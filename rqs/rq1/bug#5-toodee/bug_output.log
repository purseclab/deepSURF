     Removed 124 files, 56.1MiB total
   Compiling semver v1.0.26
   Compiling libc v0.2.175
   Compiling home v0.5.5
   Compiling xdg v2.5.2
   Compiling global_data v0.1.0 (/home/cdc/deepSURF-sp26-artifacts/artifact_code/global_data)
   Compiling toodee v0.2.4 (/home/cdc/deepSURF-sp26-artifacts/artifact_data/dataset/erasan_crates/toodee-0.2.4)
   Compiling afl v0.15.7
   Compiling rustc_version v0.4.1
   Compiling toodee_fuzz_18022505199540229386 v0.1.0 (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness)
warning: unused import: `std::str::FromStr`
 --> src/toodee_fuzz_18022505199540229386.rs:7:5
  |
7 | use std::str::FromStr;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DerefMut`, `Deref`, `IndexMut`, `Index`
 --> src/toodee_fuzz_18022505199540229386.rs:8:16
  |
8 | use std::ops::{Deref, DerefMut, Index, IndexMut};
  |                ^^^^^  ^^^^^^^^  ^^^^^  ^^^^^^^^

warning: the item `TryInto` is imported redundantly
   --> src/toodee_fuzz_18022505199540229386.rs:250:9
    |
250 |     use std::convert::TryInto;
    |         ^^^^^^^^^^^^^^^^^^^^^
   --> /rustc/11f32b73e0dc9287e305b5b9980d24aecdc8c17f/library/std/src/prelude/mod.rs:129:13
    |
    = note: the item `TryInto` is already defined here

warning: the item `TryInto` is imported redundantly
   --> src/toodee_fuzz_18022505199540229386.rs:257:9
    |
257 |     use std::convert::TryInto;
    |         ^^^^^^^^^^^^^^^^^^^^^
   --> /rustc/11f32b73e0dc9287e305b5b9980d24aecdc8c17f/library/std/src/prelude/mod.rs:129:13
    |
    = note: the item `TryInto` is already defined here

warning: variable does not need to be mutable
  --> src/toodee_fuzz_18022505199540229386.rs:32:13
   |
32 |         let mut t_150 = _to_u8(GLOBAL_DATA, 660) % 17;
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/toodee_fuzz_18022505199540229386.rs:75:13
   |
75 |         let mut t_134 = _to_u8(GLOBAL_DATA, 569) % 17;
   |             ----^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/toodee_fuzz_18022505199540229386.rs:100:13
    |
100 |         let mut t_139 = _to_u8(GLOBAL_DATA, 594) % 17;
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `idx`
   --> src/toodee_fuzz_18022505199540229386.rs:153:25
    |
153 |                     let idx = _to_usize(GLOBAL_DATA, 900 + i*8);
    |                         ^^^ help: if this is intentional, prefix it with an underscore: `_idx`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src/toodee_fuzz_18022505199540229386.rs:117:13
    |
117 |         let mut t_2 = _to_u8(GLOBAL_DATA, 16) % 33;
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/toodee_fuzz_18022505199540229386.rs:133:13
    |
133 |         let mut t_133 = &mut t_132;
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/toodee_fuzz_18022505199540229386.rs:171:21
    |
171 |                 let mut t_154 = _to_u8(GLOBAL_DATA, 1001) % 17;
    |                     ----^^^^^
    |                     |
    |                     help: remove this `mut`

warning: field `0` is never read
  --> src/toodee_fuzz_18022505199540229386.rs:11:20
   |
11 | struct CustomType0(String);
   |        ----------- ^^^^^^
   |        |
   |        field in this struct
   |
   = note: `CustomType0` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
11 | struct CustomType0(());
   |                    ~~

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:21:13
   |
21 |         let GLOBAL_DATA = global_data.first_half;
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:28:13
   |
28 |         let GLOBAL_DATA = match selector {
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:44:13
   |
44 |         let GLOBAL_DATA = global_data.first_half;
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:51:13
   |
51 |         let GLOBAL_DATA = match selector {
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:64:13
   |
64 |         let GLOBAL_DATA = global_data.first_half;
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:71:13
   |
71 |         let GLOBAL_DATA = match selector {
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:89:13
   |
89 |         let GLOBAL_DATA = global_data.first_half;
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
  --> src/toodee_fuzz_18022505199540229386.rs:96:13
   |
96 |         let GLOBAL_DATA = match selector {
   |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: variable `GLOBAL_DATA` should have a snake case name
   --> src/toodee_fuzz_18022505199540229386.rs:114:13
    |
114 |         let GLOBAL_DATA = global_data.first_half;
    |             ^^^^^^^^^^^ help: convert the identifier to snake case: `global_data`

warning: `toodee_fuzz_18022505199540229386` (bin "toodee_fuzz_18022505199540229386") generated 21 warnings (run `cargo fix --bin "toodee_fuzz_18022505199540229386"` to apply 9 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 2.97s
=================================================================
==1422700==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x508000000008 at pc 0x556c494e30c8 bp 0x7ffe8b1d5a10 sp 0x7ffe8b1d5a08
WRITE of size 8 at 0x508000000008 thread T0
    #0 0x556c494e30c7  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xcc0c7) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #1 0x556c494e8efa  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xd1efa) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #2 0x556c494e7b51  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xd0b51) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #3 0x556c494d8cf1  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xc1cf1) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #4 0x556c494d8d40  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xc1d40) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #5 0x556c49503090  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xec090) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #6 0x556c494e90b5  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xd20b5) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #7 0x7fef1d3c4d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: 490fef8403240c91833978d494d39e537409b92e)
    #8 0x7fef1d3c4e3f  (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: 490fef8403240c91833978d494d39e537409b92e)
    #9 0x556c49428934  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0x11934) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)

0x508000000008 is located 24 bytes before 96-byte region [0x508000000020,0x508000000080)
allocated by thread T0 here:
    #0 0x556c494afd15  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0x98d15) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)
    #1 0x556c494e6425  (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xcf425) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f)

SUMMARY: AddressSanitizer: heap-buffer-overflow (/home/cdc/deepSURF-sp26-artifacts/claims/claim1/rq1/bug#5-toodee/harness/target/x86_64-unknown-linux-gnu/debug/toodee_fuzz_18022505199540229386+0xcc0c7) (BuildId: 762c954f16cb280e87f80ed48fd848f9e242d71f) 
Shadow bytes around the buggy address:
  0x507ffffffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x508000000000: fa[fa]fa fa 00 00 00 00 00 00 00 00 00 00 00 00
  0x508000000080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1422700==ABORTING
