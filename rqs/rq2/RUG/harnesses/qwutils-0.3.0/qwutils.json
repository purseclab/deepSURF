{"dependencies":{"<&'a arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::slice::Iter","std::sync::Arc"],"<&'a macros::Test as std::ops::Add<&macros::Test>>::add":["macros::Test"],"<&'a macros::Test as std::ops::Add<&mut macros::Test>>::add":["macros::Test"],"<&'a macros::Test as std::ops::Add<macros::Test>>::add":["macros::Test"],"<&'a macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["macros::Test"],"<&'a macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["macros::Test"],"<&'a macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["macros::Test"],"<&'a macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["macros::Test"],"<&'a macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["macros::Test"],"<&'a macros::Test as std::ops::BitOr<macros::Test>>::bitor":["macros::Test"],"<&'a macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["macros::Test"],"<&'a macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["macros::Test"],"<&'a macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["macros::Test"],"<&'a macros::Test as std::ops::Div<&macros::Test>>::div":["macros::Test"],"<&'a macros::Test as std::ops::Div<&mut macros::Test>>::div":["macros::Test"],"<&'a macros::Test as std::ops::Div<macros::Test>>::div":["macros::Test"],"<&'a macros::Test as std::ops::Mul<&macros::Test>>::mul":["macros::Test"],"<&'a macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["macros::Test"],"<&'a macros::Test as std::ops::Mul<macros::Test>>::mul":["macros::Test"],"<&'a macros::Test as std::ops::Rem<&macros::Test>>::rem":["macros::Test"],"<&'a macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["macros::Test"],"<&'a macros::Test as std::ops::Rem<macros::Test>>::rem":["macros::Test"],"<&'a macros::Test as std::ops::Shl<&macros::Test>>::shl":["macros::Test"],"<&'a macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["macros::Test"],"<&'a macros::Test as std::ops::Shl<macros::Test>>::shl":["macros::Test"],"<&'a macros::Test as std::ops::Shr<&macros::Test>>::shr":["macros::Test"],"<&'a macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["macros::Test"],"<&'a macros::Test as std::ops::Shr<macros::Test>>::shr":["macros::Test"],"<&'a macros::Test as std::ops::Sub<&macros::Test>>::sub":["macros::Test"],"<&'a macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["macros::Test"],"<&'a macros::Test as std::ops::Sub<macros::Test>>::sub":["macros::Test"],"<&'a macros::Test2 as std::ops::Add<&macros::Test2>>::add":["macros::Test2"],"<&'a macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["macros::Test2"],"<&'a macros::Test2 as std::ops::Add<macros::Test2>>::add":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["macros::Test2"],"<&'a macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["macros::Test2"],"<&'a macros::Test2 as std::ops::Div<&macros::Test2>>::div":["macros::Test2"],"<&'a macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["macros::Test2"],"<&'a macros::Test2 as std::ops::Div<macros::Test2>>::div":["macros::Test2"],"<&'a macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["macros::Test2"],"<&'a macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["macros::Test2"],"<&'a macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["macros::Test2"],"<&'a macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["macros::Test2"],"<&'a macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["macros::Test2"],"<&'a macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["macros::Test2"],"<&'a macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["macros::Test2"],"<&'a macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["macros::Test2"],"<&'a macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["macros::Test2"],"<&'a macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["macros::Test2"],"<&'a mut arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::slice::IterMut","std::sync::Arc"],"<&'a mut macros::Test as std::ops::Add<&macros::Test>>::add":["macros::Test"],"<&'a mut macros::Test as std::ops::Add<&mut macros::Test>>::add":["macros::Test"],"<&'a mut macros::Test as std::ops::Add<macros::Test>>::add":["macros::Test"],"<&'a mut macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::AddAssign<macros::Test>>::add_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitAndAssign<macros::Test>>::bitand_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOr<macros::Test>>::bitor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitOrAssign<macros::Test>>::bitor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::BitXorAssign<macros::Test>>::bitxor_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Div<&macros::Test>>::div":["macros::Test"],"<&'a mut macros::Test as std::ops::Div<&mut macros::Test>>::div":["macros::Test"],"<&'a mut macros::Test as std::ops::Div<macros::Test>>::div":["macros::Test"],"<&'a mut macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::DivAssign<macros::Test>>::div_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Mul<&macros::Test>>::mul":["macros::Test"],"<&'a mut macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["macros::Test"],"<&'a mut macros::Test as std::ops::Mul<macros::Test>>::mul":["macros::Test"],"<&'a mut macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::MulAssign<macros::Test>>::mul_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Rem<&macros::Test>>::rem":["macros::Test"],"<&'a mut macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["macros::Test"],"<&'a mut macros::Test as std::ops::Rem<macros::Test>>::rem":["macros::Test"],"<&'a mut macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::RemAssign<macros::Test>>::rem_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Shl<&macros::Test>>::shl":["macros::Test"],"<&'a mut macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["macros::Test"],"<&'a mut macros::Test as std::ops::Shl<macros::Test>>::shl":["macros::Test"],"<&'a mut macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::ShlAssign<macros::Test>>::shl_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Shr<&macros::Test>>::shr":["macros::Test"],"<&'a mut macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["macros::Test"],"<&'a mut macros::Test as std::ops::Shr<macros::Test>>::shr":["macros::Test"],"<&'a mut macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::ShrAssign<macros::Test>>::shr_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::Sub<&macros::Test>>::sub":["macros::Test"],"<&'a mut macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["macros::Test"],"<&'a mut macros::Test as std::ops::Sub<macros::Test>>::sub":["macros::Test"],"<&'a mut macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["macros::Test"],"<&'a mut macros::Test as std::ops::SubAssign<macros::Test>>::sub_assign":["macros::Test"],"<&'a mut macros::Test2 as std::ops::Add<&macros::Test2>>::add":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Add<macros::Test2>>::add":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::AddAssign<macros::Test2>>::add_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<macros::Test2>>::bitand_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<macros::Test2>>::bitor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<macros::Test2>>::bitxor_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Div<&macros::Test2>>::div":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Div<macros::Test2>>::div":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::DivAssign<macros::Test2>>::div_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::MulAssign<macros::Test2>>::mul_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::RemAssign<macros::Test2>>::rem_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShlAssign<macros::Test2>>::shl_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::ShrAssign<macros::Test2>>::shr_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["macros::Test2"],"<&'a mut macros::Test2 as std::ops::SubAssign<macros::Test2>>::sub_assign":["macros::Test2"],"<&arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["arc_slice::ArcSlice","std::alloc::Allocator","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<&mut arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["arc_slice::ArcSlice","std::alloc::Allocator","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<&mut std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["std::collections::HashMap","std::marker::Sized"],"<&mut std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["std::collections::HashSet","std::marker::Sized"],"<&mut std::string::String as not_empty::NotEmpty>::_is_empty":["std::string::String"],"<&mut std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["std::alloc::Allocator","std::marker::Sized","std::vec::Vec"],"<&mut str as not_empty::NotEmpty>::_is_empty":[],"<&std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["std::collections::HashMap","std::marker::Sized"],"<&std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["std::collections::HashSet","std::marker::Sized"],"<&std::string::String as not_empty::NotEmpty>::_is_empty":["std::string::String"],"<&std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["std::alloc::Allocator","std::marker::Sized","std::vec::Vec"],"<&str as not_empty::NotEmpty>::_is_empty":[],"<(T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":[],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<(T,) as imp::tuple::AsArray>::as_array":[],"<(T,) as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<T as from_into::FromInto<U>>::qfrom":[],"<T as from_into::FromInto<U>>::qinto":[],"<[T; 32] as imp::tuple::AsTuple>::as_tuple":[],"<[T; 32] as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<[T; _] as imp::tuple::AsTuple>::as_tuple":[],"<[T; _] as imp::tuple::TupleFns<T>>::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as refc::RefClonable>::refc":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::borrow::Borrow<[T]>>::borrow":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::borrow::BorrowMut<[T]>>::borrow_mut":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::clone::Clone>::clone":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::cmp::Ord>::cmp":["arc_slice::ArcSlice","std::cmp::Ordering","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::cmp::PartialEq<O>>::eq":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::cmp::PartialOrd>::partial_cmp":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::option::Option","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::convert::AsMut<[T]>>::as_mut":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::convert::AsRef<[T]>>::as_ref":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::convert::From<&[T]>>::from":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["arc_slice::ArcSlice","std::alloc::Allocator","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<arc_slice::ArcSlice<T> as std::fmt::Debug>::fmt":["arc_slice::ArcSlice","std::fmt::Formatter","std::marker::Sized","std::ops::Range","std::result::Result","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::hash::Hash>::hash":["arc_slice::ArcSlice","std::hash::Hasher","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::iter::Extend<&'a T>>::extend":["arc_slice::ArcSlice","std::iter::IntoIterator","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::iter::Extend<T>>::extend":["arc_slice::ArcSlice","std::iter::IntoIterator","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["arc_slice::ArcSlice","std::alloc::Allocator","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::IntoIter"],"<arc_slice::ArcSlice<T> as std::ops::Deref>::deref":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<T> as std::ops::DerefMut>::deref_mut":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"<arc_slice::ArcSlice<u8> as std::io::Write>::flush":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::result::Result","std::sync::Arc"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::result::Result","std::sync::Arc"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_all":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::result::Result","std::sync::Arc"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_vectored":["arc_slice::ArcSlice","std::io::IoSlice","std::marker::Sized","std::ops::Range","std::result::Result","std::sync::Arc"],"<bool as imp::boolext::BoolExtOption>::option":["std::marker::Sized","std::option::Option"],"<bool as imp::boolext::BoolExtOption>::result":["std::marker::Sized","std::result::Result"],"<i128 as imp::numext::DivOrNop>::div_or_nop":[],"<i16 as imp::numext::DivOrNop>::div_or_nop":[],"<i32 as imp::numext::DivOrNop>::div_or_nop":[],"<i64 as imp::numext::DivOrNop>::div_or_nop":[],"<i8 as imp::numext::DivOrNop>::div_or_nop":[],"<isize as imp::numext::DivOrNop>::div_or_nop":[],"<macros::Test as std::clone::Clone>::clone":["macros::Test"],"<macros::Test as std::ops::Add<&macros::Test>>::add":["macros::Test"],"<macros::Test as std::ops::Add<&mut macros::Test>>::add":["macros::Test"],"<macros::Test as std::ops::Add>::add":["macros::Test"],"<macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["macros::Test"],"<macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["macros::Test"],"<macros::Test as std::ops::AddAssign>::add_assign":["macros::Test"],"<macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["macros::Test"],"<macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["macros::Test"],"<macros::Test as std::ops::BitAnd>::bitand":["macros::Test"],"<macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["macros::Test"],"<macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["macros::Test"],"<macros::Test as std::ops::BitAndAssign>::bitand_assign":["macros::Test"],"<macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["macros::Test"],"<macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["macros::Test"],"<macros::Test as std::ops::BitOr>::bitor":["macros::Test"],"<macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["macros::Test"],"<macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["macros::Test"],"<macros::Test as std::ops::BitOrAssign>::bitor_assign":["macros::Test"],"<macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["macros::Test"],"<macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["macros::Test"],"<macros::Test as std::ops::BitXor>::bitxor":["macros::Test"],"<macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["macros::Test"],"<macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["macros::Test"],"<macros::Test as std::ops::BitXorAssign>::bitxor_assign":["macros::Test"],"<macros::Test as std::ops::Div<&macros::Test>>::div":["macros::Test"],"<macros::Test as std::ops::Div<&mut macros::Test>>::div":["macros::Test"],"<macros::Test as std::ops::Div>::div":["macros::Test"],"<macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["macros::Test"],"<macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["macros::Test"],"<macros::Test as std::ops::DivAssign>::div_assign":["macros::Test"],"<macros::Test as std::ops::Mul<&macros::Test>>::mul":["macros::Test"],"<macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["macros::Test"],"<macros::Test as std::ops::Mul>::mul":["macros::Test"],"<macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["macros::Test"],"<macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["macros::Test"],"<macros::Test as std::ops::MulAssign>::mul_assign":["macros::Test"],"<macros::Test as std::ops::Rem<&macros::Test>>::rem":["macros::Test"],"<macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["macros::Test"],"<macros::Test as std::ops::Rem>::rem":["macros::Test"],"<macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["macros::Test"],"<macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["macros::Test"],"<macros::Test as std::ops::RemAssign>::rem_assign":["macros::Test"],"<macros::Test as std::ops::Shl<&macros::Test>>::shl":["macros::Test"],"<macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["macros::Test"],"<macros::Test as std::ops::Shl>::shl":["macros::Test"],"<macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["macros::Test"],"<macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["macros::Test"],"<macros::Test as std::ops::ShlAssign>::shl_assign":["macros::Test"],"<macros::Test as std::ops::Shr<&macros::Test>>::shr":["macros::Test"],"<macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["macros::Test"],"<macros::Test as std::ops::Shr>::shr":["macros::Test"],"<macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["macros::Test"],"<macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["macros::Test"],"<macros::Test as std::ops::ShrAssign>::shr_assign":["macros::Test"],"<macros::Test as std::ops::Sub<&macros::Test>>::sub":["macros::Test"],"<macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["macros::Test"],"<macros::Test as std::ops::Sub>::sub":["macros::Test"],"<macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["macros::Test"],"<macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["macros::Test"],"<macros::Test as std::ops::SubAssign>::sub_assign":["macros::Test"],"<macros::Test2 as std::clone::Clone>::clone":["macros::Test2"],"<macros::Test2 as std::ops::Add<&macros::Test2>>::add":["macros::Test2"],"<macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["macros::Test2"],"<macros::Test2 as std::ops::Add>::add":["macros::Test2"],"<macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["macros::Test2"],"<macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["macros::Test2"],"<macros::Test2 as std::ops::AddAssign>::add_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["macros::Test2"],"<macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["macros::Test2"],"<macros::Test2 as std::ops::BitAnd>::bitand":["macros::Test2"],"<macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitAndAssign>::bitand_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["macros::Test2"],"<macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["macros::Test2"],"<macros::Test2 as std::ops::BitOr>::bitor":["macros::Test2"],"<macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitOrAssign>::bitor_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["macros::Test2"],"<macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["macros::Test2"],"<macros::Test2 as std::ops::BitXor>::bitxor":["macros::Test2"],"<macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["macros::Test2"],"<macros::Test2 as std::ops::BitXorAssign>::bitxor_assign":["macros::Test2"],"<macros::Test2 as std::ops::Div<&macros::Test2>>::div":["macros::Test2"],"<macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["macros::Test2"],"<macros::Test2 as std::ops::Div>::div":["macros::Test2"],"<macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["macros::Test2"],"<macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["macros::Test2"],"<macros::Test2 as std::ops::DivAssign>::div_assign":["macros::Test2"],"<macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["macros::Test2"],"<macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["macros::Test2"],"<macros::Test2 as std::ops::Mul>::mul":["macros::Test2"],"<macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["macros::Test2"],"<macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["macros::Test2"],"<macros::Test2 as std::ops::MulAssign>::mul_assign":["macros::Test2"],"<macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["macros::Test2"],"<macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["macros::Test2"],"<macros::Test2 as std::ops::Rem>::rem":["macros::Test2"],"<macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["macros::Test2"],"<macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["macros::Test2"],"<macros::Test2 as std::ops::RemAssign>::rem_assign":["macros::Test2"],"<macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["macros::Test2"],"<macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["macros::Test2"],"<macros::Test2 as std::ops::Shl>::shl":["macros::Test2"],"<macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["macros::Test2"],"<macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["macros::Test2"],"<macros::Test2 as std::ops::ShlAssign>::shl_assign":["macros::Test2"],"<macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["macros::Test2"],"<macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["macros::Test2"],"<macros::Test2 as std::ops::Shr>::shr":["macros::Test2"],"<macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["macros::Test2"],"<macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["macros::Test2"],"<macros::Test2 as std::ops::ShrAssign>::shr_assign":["macros::Test2"],"<macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["macros::Test2"],"<macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["macros::Test2"],"<macros::Test2 as std::ops::Sub>::sub":["macros::Test2"],"<macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["macros::Test2"],"<macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["macros::Test2"],"<macros::Test2 as std::ops::SubAssign>::sub_assign":["macros::Test2"],"<std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["std::collections::HashMap","std::marker::Sized"],"<std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["std::collections::HashSet","std::marker::Sized"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to":["macros::Test","std::marker::Sized","std::ops::AddAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_if":["macros::Test","std::marker::Sized","std::ops::AddAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_lossy":["macros::Test","std::marker::Sized","std::ops::AddAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to":["macros::Test","std::marker::Sized","std::ops::DivAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_if":["macros::Test","std::marker::Sized","std::ops::DivAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_lossy":["macros::Test","std::marker::Sized","std::ops::DivAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to":["macros::Test","std::marker::Sized","std::ops::MulAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_if":["macros::Test","std::marker::Sized","std::ops::MulAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_lossy":["macros::Test","std::marker::Sized","std::ops::MulAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to":["macros::Test","std::marker::Sized","std::ops::SubAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_if":["macros::Test","std::marker::Sized","std::ops::SubAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_lossy":["macros::Test","std::marker::Sized","std::ops::SubAssign","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_if":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if_saturating":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_err_nodebug":["std::marker::Sized","std::result::Result"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_nodebug":["std::marker::Sized","std::result::Result"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_err_nodebug":["std::marker::Sized","std::result::Result"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_nodebug":["std::marker::Sized","std::result::Result"],"<std::string::String as not_empty::NotEmpty>::_is_empty":["std::string::String"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::extend_from_slice_copy":["std::alloc::Allocator","std::marker::Copy","std::marker::Sized","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_default":["arc_slice::ArcSlice","std::alloc::Allocator","std::default::Default","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_with":["std::alloc::Allocator","std::marker::Sized","std::ops::FnMut","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_clone":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_copy":["std::alloc::Allocator","std::marker::Copy","std::marker::Sized","std::vec::Vec"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::push_option":["std::alloc::Allocator","std::marker::Sized","std::option::Option","std::vec::Vec"],"<std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["std::alloc::Allocator","std::marker::Sized","std::vec::Vec"],"<u128 as imp::numext::DivOrNop>::div_or_nop":[],"<u16 as imp::numext::DivOrNop>::div_or_nop":[],"<u32 as imp::numext::DivOrNop>::div_or_nop":[],"<u64 as imp::numext::DivOrNop>::div_or_nop":[],"<u8 as imp::numext::DivOrNop>::div_or_nop":[],"<usize as imp::numext::DivOrNop>::div_or_nop":[],"arc_slice::ArcSlice":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted_with_capacity":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_with_capacity":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::append":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::clear":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::compact":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extend_from_slice":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract_with_capacity":["arc_slice::ArcSlice","std::alloc::Allocator","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted_with_capacity":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert_slice":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_empty":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_unsliced":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::len":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::new":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::pop":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::option::Option","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::push":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::remove":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_default":["arc_slice::ArcSlice","std::clone::Clone","std::default::Default","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_with":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::FnMut","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::retain":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::FnMut","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::slice":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::ops::RangeBounds","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_at":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_off":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::swap_remove":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::truncate":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::with_capacity":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl std::convert::From<std::sync::Arc<std::vec::Vec<T>>> for arc_slice::ArcSlice<T>>::from":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::<impl std::convert::From<std::vec::Vec<T>> for arc_slice::ArcSlice<T>>::from":["arc_slice::ArcSlice","std::alloc::Allocator","std::marker::Sized","std::ops::Range","std::sync::Arc","std::vec::Vec"],"arc_slice::imp::<impl std::default::Default for arc_slice::ArcSlice<T>>::default":["arc_slice::ArcSlice","std::marker::Sized","std::ops::Range","std::sync::Arc"],"arc_slice::imp::slice_slice":["std::marker::Sized","std::ops::Range","std::ops::RangeBounds"],"from_into::FromInto::qfrom":[],"from_into::FromInto::qinto":[],"if_type::if_type":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::boolext::BoolExtOption::map":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::boolext::BoolExtOption::map_or":["std::marker::Sized","std::ops::FnOnce"],"imp::boolext::BoolExtOption::map_or_else":["std::marker::Sized","std::ops::FnOnce"],"imp::boolext::BoolExtOption::map_or_err":["std::marker::Sized","std::ops::FnOnce","std::result::Result"],"imp::boolext::BoolExtOption::option":["std::marker::Sized","std::option::Option"],"imp::boolext::BoolExtOption::result":["std::marker::Sized","std::result::Result"],"imp::numext::DivOrNop::div_or_nop":[],"imp::option::OptionExt::add_to":["macros::Test","std::marker::Sized","std::ops::AddAssign"],"imp::option::OptionExt::add_to_if":["macros::Test","std::marker::Sized","std::ops::AddAssign","std::option::Option"],"imp::option::OptionExt::add_to_lossy":["macros::Test","std::marker::Sized","std::ops::AddAssign","std::option::Option"],"imp::option::OptionExt::div_to":["macros::Test","std::marker::Sized","std::ops::DivAssign"],"imp::option::OptionExt::div_to_if":["macros::Test","std::marker::Sized","std::ops::DivAssign","std::option::Option"],"imp::option::OptionExt::div_to_lossy":["macros::Test","std::marker::Sized","std::ops::DivAssign","std::option::Option"],"imp::option::OptionExt::mul_to":["macros::Test","std::marker::Sized","std::ops::MulAssign"],"imp::option::OptionExt::mul_to_if":["macros::Test","std::marker::Sized","std::ops::MulAssign","std::option::Option"],"imp::option::OptionExt::mul_to_lossy":["macros::Test","std::marker::Sized","std::ops::MulAssign","std::option::Option"],"imp::option::OptionExt::sub_to":["macros::Test","std::marker::Sized","std::ops::SubAssign"],"imp::option::OptionExt::sub_to_if":["macros::Test","std::marker::Sized","std::ops::SubAssign","std::option::Option"],"imp::option::OptionExt::sub_to_lossy":["macros::Test","std::marker::Sized","std::ops::SubAssign","std::option::Option"],"imp::option::OptionExt::with":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::option::OptionExt::with_if":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::option::OptionExt::with_mut":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::option::OptionExt::with_mut_if":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::option::OptionExt::with_mut_if_saturating":["std::marker::Sized","std::ops::FnOnce","std::option::Option"],"imp::option::flatten":["std::marker::Sized","std::option::Option"],"imp::result::ResultNonDebugUnwrap::expect_err_nodebug":[],"imp::result::ResultNonDebugUnwrap::expect_nodebug":[],"imp::result::ResultNonDebugUnwrap::unwrap_err_nodebug":[],"imp::result::ResultNonDebugUnwrap::unwrap_nodebug":[],"imp::result::unwrap_failed":["std::marker::Sized"],"imp::tuple::AsArray::as_array":[],"imp::tuple::AsTuple::as_tuple":[],"imp::tuple::TupleFns::avg":["arc_slice::ArcSlice","macros::Test","std::clone::Clone","std::convert::From","std::iter::Sum","std::marker::Sized","std::ops::DivAssign","std::ops::Range","std::sync::Arc"],"imp::vec::VecExt::extend_from_slice_copy":["std::marker::Copy"],"imp::vec::VecExt::grow_to":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"imp::vec::VecExt::grow_to_default":["arc_slice::ArcSlice","std::default::Default","std::marker::Sized","std::ops::Range","std::sync::Arc"],"imp::vec::VecExt::grow_to_with":["std::marker::Sized","std::ops::FnMut"],"imp::vec::VecExt::insert_slice_clone":["arc_slice::ArcSlice","std::clone::Clone","std::marker::Sized","std::ops::Range","std::sync::Arc"],"imp::vec::VecExt::insert_slice_copy":["std::marker::Copy"],"imp::vec::VecExt::push_option":["std::marker::Sized","std::option::Option"],"macros::Test":["macros::Test"],"macros::Test2":["macros::Test2"],"not_empty::NotEmpty::_is_empty":[],"not_empty::NotEmpty::not_empty":["std::marker::Sized","std::option::Option"],"refc::RefClonable::refc":[],"refc::imp::<impl refc::RefClonable for std::boxed::Box<T>>::refc":["std::alloc::Allocator","std::boxed::Box","std::marker::Sized"],"refc::imp::<impl refc::RefClonable for std::rc::Rc<T>>::refc":["std::rc::Rc"],"refc::imp::<impl refc::RefClonable for std::sync::Arc<T>>::refc":["std::sync::Arc"],"scoped::Interior::interior_access":["std::marker::Sized","std::ops::FnOnce"],"scoped::Interior::interior_access_mut":["std::marker::Sized","std::ops::FnOnce"],"scoped::ScopedMut::access":["std::marker::Sized","std::ops::FnOnce"],"scoped::ScopedMut::access_mut":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access_mut":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access_mut":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access":["std::alloc::Allocator","std::boxed::Box","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access_mut":["std::alloc::Allocator","std::boxed::Box","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access":["std::cell::RefCell","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access_mut":["std::cell::RefCell","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access":["std::marker::Sized","std::ops::FnOnce","std::rc::Rc"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access_mut":["std::marker::Sized","std::ops::FnOnce","std::rc::Rc"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access":["std::marker::Sized","std::ops::FnOnce","std::sync::Arc"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access_mut":["std::marker::Sized","std::ops::FnOnce","std::sync::Arc"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access":["std::marker::Sized","std::ops::FnOnce","std::sync::RwLock"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access_mut":["std::marker::Sized","std::ops::FnOnce","std::sync::RwLock"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access":["std::cell::RefCell","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access_mut":["std::cell::RefCell","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access":["std::marker::Sized","std::ops::FnOnce","std::rc::Rc"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access_mut":["std::marker::Sized","std::ops::FnOnce","std::rc::Rc"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access":["std::marker::Sized","std::ops::FnOnce","std::sync::Arc"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access_mut":["std::marker::Sized","std::ops::FnOnce","std::sync::Arc"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access":["std::marker::Sized","std::ops::FnOnce","std::sync::RwLock"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access_mut":["std::marker::Sized","std::ops::FnOnce","std::sync::RwLock"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access_mut":["std::marker::Sized","std::ops::FnOnce"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access":["std::borrow::Cow","std::borrow::ToOwned","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access_mut":["std::borrow::Cow","std::borrow::ToOwned","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access":["std::alloc::Allocator","std::boxed::Box","std::marker::Sized","std::ops::FnOnce"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access_mut":["std::alloc::Allocator","std::boxed::Box","std::marker::Sized","std::ops::FnOnce"]},"glob_path_import":{"boolinator":"imp::","if_type":"","imp":"","imp::boolext":"imp::","imp::numext":"imp::","imp::option":"imp::","imp::range":"imp::","imp::result":"imp::","imp::tuple":"imp::","imp::vec":"imp::","not_empty":"","refc":""},"self_to_fn":{"<T as from_into::FromInto<U>>::T":["impl<T,U> FromInto<U> for T where T: From<U> + Into<U> {\n    #[inline]\n    fn qfrom(t: U) -> Self {\n        <T as From<U>>::from(t)\n    }\n    #[inline]\n    fn qinto(self) -> U {\n        <T as Into<U>>::into(self)\n    }\n}"],"arc_slice::ArcSlice":["impl Write for ArcSlice<u8> {\n    #[inline]\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        self.extend_from_slice(buf);\n        Ok(buf.len())\n    }\n\n    #[inline]\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        let len = bufs.iter().map(|b| b.len()).sum();\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + len);\n        vec.truncate(slice.end);\n        vec.reserve(len);\n        for buf in bufs {\n            vec.extend_from_slice(buf);\n        }\n        slice.end += len;\n        Ok(len)\n    }\n\n    #[inline]\n    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n        self.write(buf)?;\n        Ok(())\n    }\n\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        Ok(())\n    }\n}","impl<'a,T> Extend<&'a T> for ArcSlice<T> where T: Clone + 'a {\n    fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = &'a T> {\n        let iter = iter.into_iter();\n        let reserve = {\n            let (mut lower,upper) = iter.size_hint();\n            if let Some(upper) = upper {\n                lower = lower.max(upper);\n            }\n            lower\n        };\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + reserve);\n        vec.truncate(slice.end);\n        let reserved = vec.capacity() - slice.end;\n        if reserve > reserved {\n            vec.reserve(reserve-reserved);\n        }\n        for i in iter {\n            vec.push(i.clone());\n            slice.end += 1;\n        }\n    }\n}","impl<T,O> PartialEq<O> for ArcSlice<T> where T: PartialEq, O: AsRef<[T]> {\n    fn eq(&self, other: &O) -> bool {\n        **self == *other.as_ref()\n    }\n}","impl<T> ArcSlice<T> {\n    pub fn new() -> Self {\n        Self{\n            inner: Arc::new(Vec::new()),\n            slice: 0..0,\n        }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self{\n            inner: Arc::new(Vec::with_capacity(capacity)),\n            slice: 0..0,\n        }\n    }\n    /// slice of the current slice\n    /// \n    /// will not allocate\n    #[inline]\n    pub fn slice<S>(&self, range: S) -> Self where S: RangeBounds<usize> {\n        Self{\n            inner: self.inner.refc(),\n            slice: slice_slice(&self.slice,range),\n        }\n    }\n    /// will always allocate and clone\n    pub fn extract(&self) -> Vec<T> where T: Clone {\n        self.extract_with_capacity(self.len())\n    }\n    pub fn extracted(&self) -> Self where T: Clone {\n        self.extracted_with_capacity(self.len())\n    }\n    pub fn extract_with_capacity(&self, capacity: usize) -> Vec<T> where T: Clone {\n        let mut dest = Vec::with_capacity(self.len().max(capacity));\n        dest.extend_from_slice(&self);\n        dest\n    }\n    pub fn extracted_with_capacity(&self, capacity: usize) -> Self where T: Clone {\n        if self.is_unsliced() {\n            self.refc()\n        }else{\n            Self::from(self.extract_with_capacity(capacity))\n        }\n    }\n\n    #[inline]\n    pub fn len(&self) -> usize {\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        let len = self.slice.end - self.slice.start;\n        assert_eq!(len,self[..].len());\n        len\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        self.slice.start == self.slice.end\n    }\n\n    /// whether this slice vievs the complete backing vec\n    #[inline]\n    pub fn is_unsliced(&self) -> bool {\n        self.slice.start == 0 && self.slice.end == self.len()\n    }\n\n    /// Minimize memory usage.\n    /// This will only work for unique ArcSlices and then would reallocate and move the contents.\n    pub fn compact(&mut self) -> bool {\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            if self.slice.start == 0 {\n                e.truncate(self.slice.end);\n                e.shrink_to_fit();\n            }else{\n                let mut dest = Vec::new();\n                dest.reserve_exact(e.len());\n                dest.append(e);\n                assert_eq!(dest.capacity(),dest.len());\n                self.slice = 0..dest.len();\n                *e = dest;\n            }\n            true\n        }else{\n            false\n        }\n    }\n\n    pub fn truncate(&mut self, len: usize) {\n        if len == 0 {\n            self.slice = 0..0;\n        }else{\n            self.slice.end = self.len().min(self.slice.start + len);\n        }\n    }\n\n    pub fn swap_remove(&mut self, index: usize) -> T where T: Clone {\n        assert!(index < self.len(),\"swap_remove out of bounds\");\n        if index == self.len()-1 {\n            self.remove(index)\n        }else if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            self.slice.end -= 1;\n            e.swap_remove(self.slice.start + index)\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()-1);\n            let left = &origin[..index];\n            dest.extend_from_slice(left);\n            let removed = origin[index].clone();\n            let right = &origin[(index+1)..(origin.len()-1)];\n            let end = origin.last().unwrap().clone();\n            dest.push(end);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n            removed\n        }\n    }\n\n    pub fn remove(&mut self, index: usize) -> T where T: Clone {\n        assert!(index < self.len(),\"remove out of bounds\");\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            self.slice.end -= 1;\n            e.remove(self.slice.start + index)\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()-1);\n            let left = &origin[..index];\n            dest.extend_from_slice(left);\n            let removed = origin[index].clone();\n            let right = &origin[(index+1)..];\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n            removed\n        }\n    }\n\n    pub fn retain<F>(&mut self, mut f: F) where T: Clone, F: FnMut(&T) -> bool {\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.retain(f);\n            self.slice.end = self.slice.start + e.len();\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len());\n            for v in origin {\n                if f(v) {\n                    dest.push(v.clone());\n                }\n            }\n            *self = Self::from(dest);\n        }\n    }\n\n    pub fn insert(&mut self, index: usize, element: T) where T: Clone {\n        assert!(index <= self.len(),\"insert out of bounds\");\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.insert(self.slice.start + index, element);\n            self.slice.end += 1;\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()+1);\n            let (left,right) = origin.split_at(index);\n            dest.extend_from_slice(left);\n            dest.push(element);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n        }\n    }\n\n    pub fn insert_slice(&mut self, index: usize, s: &[T]) where T: Clone {\n        assert!(index <= self.len(),\"insert out of bounds\");\n        if s.is_empty() {return;}\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.insert_slice_clone(self.slice.start + index, s);\n            self.slice.end += s.len();\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()+s.len());\n            let (left,right) = origin.split_at(index);\n            dest.extend_from_slice(left);\n            dest.extend_from_slice(s);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n        }\n    }\n\n    pub fn split_at(&mut self, at: usize) -> (Self,Self) {\n        assert!(at <= self.len(), \"`at` out of bounds\");\n        let start = self.slice(..at);\n        let end = self.slice(at..);\n        (start,end)\n    }\n    pub fn split_off(&mut self, at: usize) -> Self {\n        let (start,end) = self.split_at(at);\n        *self = start;\n        end\n    }\n\n    pub fn resize_with<F>(&mut self, new_len: usize, mut f: F) where T: Clone, F: FnMut() -> T {\n        if new_len > self.len() {\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + 1);\n            vec.truncate(slice.end);\n            vec.reserve( (slice.start+new_len).saturating_sub(vec.capacity()) );\n            for _ in slice.len()..new_len {\n                vec.push(f());\n            }\n            self.slice.end = slice.start + new_len;\n        } else {\n            self.truncate(new_len);\n        }\n    }\n    pub fn resize<F>(&mut self, new_len: usize, value: T) where T: Clone {\n        self.resize_with(new_len, move || value.clone() )\n    }\n    pub fn resize_default<F>(&mut self, new_len: usize) where T: Clone + Default {\n        self.resize_with(new_len, || T::default() )\n    }\n\n    pub fn push(&mut self, v: T) where T: Clone {\n        self.insert(self.len(), v)\n    }\n    pub fn pop(&mut self) -> Option<T> where T: Clone {\n        (self.slice.end > self.slice.start)\n            .map(|| {\n                self.remove(self.len()-1)\n            })\n    }\n\n    pub fn append(&mut self, other: &mut Vec<T>) where T: Clone {\n        if !other.is_empty() {\n            let other_len = other.len();\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + other_len);\n            vec.truncate(slice.end);\n            vec.append(other);\n            self.slice.end += other_len;\n        }\n    }\n    pub fn extend_from_slice(&mut self, other: &[T]) where T: Clone {\n        if !other.is_empty() {\n            let other_len = other.len();\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + other_len);\n            vec.truncate(slice.end);\n            vec.extend_from_slice(other);\n            self.slice.end += other_len;\n        }\n    }\n\n    pub fn clear(&mut self) {\n        self.truncate(0);\n    }\n\n    /// mutably access the mutable Vec inside\n    /// Note that self.slice will eventually mutate\n    pub fn _make_mut(&mut self) -> (&mut Vec<T>,&mut Range<usize>) where T: Clone {\n        self._make_mut_with_capacity(self.len())\n    }\n    pub fn _make_mut_with_capacity(&mut self, capacity: usize) -> (&mut Vec<T>,&mut Range<usize>) where T: Clone {\n        if Arc::get_mut(&mut self.inner).is_some() {\n            // In this case Arc::make_mut probably won't clone\n            (Arc::make_mut(&mut self.inner),&mut self.slice)\n        }else{\n            // use optimized clone in which case Arc::make_mut would probably clone\n            *self = self.extracted_with_capacity(capacity);\n            Arc::make_mut(&mut self.inner);\n            assert!(self.is_unsliced());\n            self._make_mut_with_capacity(capacity)\n        }\n    }\n    pub fn _make_mut_extracted(&mut self) -> &mut Vec<T> where T: Clone {\n        self._make_mut_extracted_with_capacity(self.len())\n    }\n    pub fn _make_mut_extracted_with_capacity(&mut self, capacity: usize) -> &mut Vec<T> where T: Clone {\n        *self = self.extracted_with_capacity(capacity);\n        assert!(self.is_unsliced());\n        self._make_mut_with_capacity(capacity).0\n    }\n}","impl<T> AsMut<[T]> for ArcSlice<T> where T: Clone {\n    #[inline]\n    fn as_mut(&mut self) -> &mut [T] {\n        &mut **self\n    }\n}","impl<T> AsRef<[T]> for ArcSlice<T> {\n    #[inline]\n    fn as_ref(&self) -> &[T] {\n        &**self\n    }\n}","impl<T> Borrow<[T]> for ArcSlice<T> {\n    #[inline]\n    fn borrow(&self) -> &[T] {\n        &**self\n    }\n}","impl<T> BorrowMut<[T]> for ArcSlice<T> where T: Clone {\n    #[inline]\n    fn borrow_mut(&mut self) -> &mut [T] {\n        &mut **self\n    }\n}","impl<T> Clone for ArcSlice<T> {\n    fn clone(&self) -> Self {\n        self.refc()\n    }\n}","impl<T> Default for ArcSlice<T> {\n    fn default() -> Self {\n        Self::new()\n    }\n}","impl<T> Deref for ArcSlice<T> {\n    type Target = [T];\n    #[inline]\n    fn deref(&self) -> &Self::Target {\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        &self.inner[self.slice.clone()]\n    }\n}","impl<T> DerefMut for ArcSlice<T> where T: Clone {\n    #[inline]\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        let (vec,range) = self._make_mut();\n        &mut vec[range.clone()]\n    }\n}","impl<T> Eq for ArcSlice<T> where T: Eq {}","impl<T> Extend<T> for ArcSlice<T> where T: Clone {\n    fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = T> {\n        let iter = iter.into_iter();\n        let reserve = {\n            let (mut lower,upper) = iter.size_hint();\n            if let Some(upper) = upper {\n                lower = lower.max(upper);\n            }\n            lower\n        };\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + reserve);\n        vec.truncate(slice.end);\n        let reserved = vec.capacity() - slice.end;\n        if reserve > reserved {\n            vec.reserve(reserve-reserved);\n        }\n        for i in iter {\n            vec.push(i);\n            slice.end += 1;\n        }\n    }\n}","impl<T> From<&[T]> for ArcSlice<T> where T: Clone {\n    fn from(v: &[T]) -> Self {\n        Self::from(v.to_vec())\n    }\n}","impl<T> From<Arc<Vec<T>>> for ArcSlice<T> {\n    fn from(v: Arc<Vec<T>>) -> Self {\n        Self{\n            slice: 0..v.len(),\n            inner: v,\n        }\n    }\n}","impl<T> From<Vec<T>> for ArcSlice<T> {\n    fn from(v: Vec<T>) -> Self {\n        Self::from(Arc::new(v))\n    }\n}","impl<T> Hash for ArcSlice<T> where T: Hash {\n    #[inline]\n    fn hash<H>(&self, state: &mut H) where H: Hasher {\n        Hash::hash(&**self, state)\n    }\n}","impl<T> Into<Vec<T>> for ArcSlice<T> where T: Clone {\n    fn into(self) -> Vec<T> {\n        self.extract()\n    }\n}","impl<T> IntoIterator for ArcSlice<T> where T: Clone {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n\n    #[inline]\n    fn into_iter(self) -> IntoIter<T> {\n        let slice = self.slice;\n        match Arc::try_unwrap(self.inner) {\n            Ok(mut v) => {\n                v.truncate(slice.end);\n                let mut iter = v.into_iter();\n                for _ in 0..slice.start {\n                    assert!(iter.next().is_some());\n                }\n                iter\n            }\n            Err(v) => {\n                let v = v[slice].to_vec();\n                v.into_iter()\n            }\n        }\n    }\n}","impl<T> Ord for ArcSlice<T> where T: Ord {\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\n        Ord::cmp(&**self,&**other)\n    }\n}","impl<T> PartialOrd for ArcSlice<T> where T: PartialOrd {\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\n        PartialOrd::partial_cmp(&**self,&**other)\n    }\n}","impl<T> RefClonable for ArcSlice<T> {\n    fn refc(&self) -> Self {\n        Self{\n            inner: self.inner.refc(),\n            slice: self.slice.clone(),\n        }\n    }\n}","impl<T> fmt::Debug for ArcSlice<T> where T: fmt::Debug {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt::Debug::fmt(&**self, f)\n    }\n}"],"macros::Test":["Clone","impl std::ops::$op<$r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: $r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op<&$r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: &$r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op<&mut $r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: &mut $r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op_assign<$r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: $r) {\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }\n        }","impl std::ops::$op_assign<&$r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: &$r) {\n                let $li = self;\n                $f\n            }\n        }","impl std::ops::$op_assign<&mut $r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: &mut $r) {\n                let $li = self;\n                $f\n            }\n        }"],"macros::Test2":["Clone","impl std::ops::$op<$r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: $r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op<&$r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: &$r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op<&mut $r> for $l {\n            type Output=$l;\n            #[inline]\n            fn $fn(mut self, r: &mut $r) -> Self::Output {\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }\n        }","impl std::ops::$op_assign<$r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: $r) {\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }\n        }","impl std::ops::$op_assign<&$r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: &$r) {\n                let $li = self;\n                $f\n            }\n        }","impl std::ops::$op_assign<&mut $r> for $l {\n            #[inline]\n            fn $fn_assign(&mut self, $ri: &mut $r) {\n                let $li = self;\n                $f\n            }\n        }"],"std::borrow::Cow":["impl<S,T> ScopedMut for Cow<'_,S> where S: ScopedMut<T=T> + Clone {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <S as ScopedMut>::access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        let b = self.to_mut();\n        <S as ScopedMut>::access_mut(b,f)\n    }\n}"],"std::boxed::Box":["impl<'a,S,T> ScopedMut for Box<S> where S: ScopedMut<T=T> + Clone {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <S as ScopedMut>::access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        <S as ScopedMut>::access_mut(self,f)\n    }\n}","impl<'a,T,C> Interior for Box<C> where C: Interior<T=T> {\n    type T=T;\n    #[inline]\n    fn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <C as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R {\n        <C as Interior>::interior_access_mut(self,f)\n    }\n}","impl<T> RefClonable for Box<T> where T: RefClonable {\n    #[inline]\n    fn refc(&self) -> Self {\n        Box::new( (**self).refc() )\n    }\n}"],"std::cell::RefCell":["impl<S,T> Interior for RefCell<S> where S: ScopedMut<T=T> {\n    type T=T;\n    #[inline]\n    fn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        let b = self.try_borrow().expect(\"ContainerMut access failed: borrowed RefCell\");\n        <S as ScopedMut>::access(&b,f)\n    }\n    #[inline]\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R {\n        let mut b = self.try_borrow_mut().expect(\"ContainerMut access failed: borrowed RefCell\");\n        <S as ScopedMut>::access_mut(&mut b,f)\n    }\n}","impl<S,T> ScopedMut for RefCell<S> where S: ScopedMut<T=T> {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <Self as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        <Self as Interior>::interior_access_mut(self,f)\n    }\n}"],"std::collections::HashMap":["impl<K,V> NotEmpty for HashMap<K,V> {\n    #[inline]\n    fn _is_empty(&self) -> bool {\n        self.is_empty()\n    }\n}"],"std::collections::HashSet":["impl<T> NotEmpty for HashSet<T> {\n    #[inline]\n    fn _is_empty(&self) -> bool {\n        self.is_empty()\n    }\n}"],"std::option::Option":["impl<T> OptionExt<T> for Option<T> {\n    #[inline]\n    fn with<R>(&self, f: impl FnOnce(&T)->R) -> Option<R> {\n        self.as_ref().map(f)\n    }\n    #[inline]\n    fn with_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> Option<R> {\n        self.as_mut().map(f)\n    }\n\n    #[inline]\n    fn with_if<R,U>(&self, o: &Option<U>, f: impl FnOnce(&T,&U)->R) -> Option<R> {\n        flatten( self.with(#[inline] |s| o.with(|o| f(s,o) )) )\n    }\n    #[inline]\n    fn with_mut_if<R,U>(&mut self, o: &Option<U>, f: impl FnOnce(&mut T,&U)->R) -> Option<R> {\n        flatten( self.with_mut(#[inline] |s| o.with(|o| f(s,o) )) )\n    }\n\n    #[inline]\n    fn with_mut_if_saturating<R>(&mut self, o: Option<T>, f: impl FnOnce(&mut T,&T)->R) -> Option<R> {\n        if let Some(s) = self {\n            o.with(#[inline] |o| f(s,o) )\n        }else{\n            *self = o;\n            None\n        }\n    }\n\n    #[inline]\n    fn add_to<V>(&mut self, v: V) where T: AddAssign<V> {\n        self.with_mut(#[inline] |s| AddAssign::add_assign(s,v) );\n    }\n    #[inline]\n    fn sub_to<V>(&mut self, v: V) where T: SubAssign<V> {\n        self.with_mut(#[inline] |s| SubAssign::sub_assign(s,v) );\n    }\n    #[inline]\n    fn mul_to<V>(&mut self, v: V) where T: MulAssign<V> {\n        self.with_mut(#[inline] |s| MulAssign::mul_assign(s,v) );\n    }\n    #[inline]\n    fn div_to<V>(&mut self, v: V) where T: DivAssign<V> {\n        self.with_mut(#[inline] |s| DivAssign::div_assign(s,v) );\n    }\n\n    #[inline]\n    fn add_to_lossy<V>(&mut self, v: Option<V>) where T: AddAssign<V> {\n        if let Some(v) = v {\n            self.add_to(v)\n        }else{\n            *self = None;\n        }\n    }\n    #[inline]\n    fn sub_to_lossy<V>(&mut self, v: Option<V>) where T: SubAssign<V> {\n        if let Some(v) = v {\n            self.sub_to(v)\n        }else{\n            *self = None;\n        }\n    }\n    #[inline]\n    fn mul_to_lossy<V>(&mut self, v: Option<V>) where T: MulAssign<V> {\n        if let Some(v) = v {\n            self.mul_to(v)\n        }else{\n            *self = None;\n        }\n    }\n    #[inline]\n    fn div_to_lossy<V>(&mut self, v: Option<V>) where T: DivAssign<V> {\n        if let Some(v) = v {\n            self.div_to(v)\n        }else{\n            *self = None;\n        }\n    }\n\n    #[inline]\n    fn add_to_if<V>(&mut self, v: Option<V>) where T: AddAssign<V> {\n        if let Some(v) = v {\n            self.add_to(v)\n        }\n    }\n    #[inline]\n    fn sub_to_if<V>(&mut self, v: Option<V>) where T: SubAssign<V> {\n        if let Some(v) = v {\n            self.sub_to(v)\n        }\n    }\n    #[inline]\n    fn mul_to_if<V>(&mut self, v: Option<V>) where T: MulAssign<V> {\n        if let Some(v) = v {\n            self.mul_to(v)\n        }\n    }\n    #[inline]\n    fn div_to_if<V>(&mut self, v: Option<V>) where T: DivAssign<V> {\n        if let Some(v) = v {\n            self.div_to(v)\n        }\n    }\n}"],"std::rc::Rc":["impl<S,T> ScopedMut for Rc<S> where S: Interior<T=T> {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <Self as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        <Self as Interior>::interior_access_mut(self,f)\n    }\n}","impl<T,C> Interior for Rc<C> where C: Interior<T=T> {\n    type T=T;\n    #[inline]\n    fn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <C as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R {\n        <C as Interior>::interior_access_mut(self,f)\n    }\n}","impl<T> RefClonable for Rc<T> where T: ?Sized {\n    #[inline]\n    fn refc(&self) -> Self {\n        Rc::clone(self)\n    }\n}"],"std::result::Result":["impl<T,E> ResultNonDebugUnwrap<T,E> for Result<T,E> {\n    #[inline]\n    fn unwrap_nodebug(self) -> T {\n        match self {\n            Ok(t) => t,\n            Err(_) => unwrap_failed::<E>(\"called `Result::unwrap()` on an `Err` value\"),\n        }\n    }\n\n    #[inline]\n    fn expect_nodebug(self, msg: &str) -> T {\n        match self {\n            Ok(t) => t,\n            Err(_) => unwrap_failed::<E>(msg),\n        }\n    }\n\n    #[inline]\n    fn unwrap_err_nodebug(self) -> E {\n        match self {\n            Ok(_) => unwrap_failed::<T>(\"called `Result::unwrap_err()` on an `Ok` value\"),\n            Err(e) => e,\n        }\n    }\n\n    #[inline]\n    fn expect_err_nodebug(self, msg: &str) -> E {\n        match self {\n            Ok(_) => unwrap_failed::<T>(msg),\n            Err(e) => e,\n        }\n    }\n}"],"std::string::String":["impl NotEmpty for String {\n    #[inline]\n    fn _is_empty(&self) -> bool {\n        self.is_empty()\n    }\n}"],"std::sync::Arc":["impl<S,T> ScopedMut for Arc<S> where S: Interior<T=T> {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <Self as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        <Self as Interior>::interior_access_mut(self,f)\n    }\n}","impl<T,C> Interior for Arc<C> where C: Interior<T=T> {\n    type T=T;\n    #[inline]\n    fn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <C as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R {\n        <C as Interior>::interior_access_mut(self,f)\n    }\n}","impl<T> RefClonable for Arc<T> where T: ?Sized {\n    #[inline]\n    fn refc(&self) -> Self {\n        Arc::clone(self)\n    }\n}"],"std::sync::RwLock":["impl<S,T> Interior for RwLock<S> where S: ScopedMut<T=T> {\n    type T=T;\n    #[inline]\n    fn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        let b = self.read().expect(\"ContainerMut access failed: poisoned RwLock\");\n        <S as ScopedMut>::access(&b,f)\n    }\n    #[inline]\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R {\n        let mut b = self.write().expect(\"ContainerMut access failed: poisoned RwLock\");\n        <S as ScopedMut>::access_mut(&mut b,f)\n    }\n}","impl<S,T> ScopedMut for RwLock<S> where S: ScopedMut<T=T> {\n    type T=T;\n    #[inline]\n    fn access<R>(&self, f: impl FnOnce(&T)->R) -> R {\n        <Self as Interior>::interior_access(self,f)\n    }\n    #[inline]\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R {\n        <Self as Interior>::interior_access_mut(self,f)\n    }\n}"],"std::vec::Vec":["impl<T> NotEmpty for Vec<T> {\n    #[inline]\n    fn _is_empty(&self) -> bool {\n        self.is_empty()\n    }\n}","impl<T> VecExt<T> for Vec<T> {\n    #[inline]\n    fn push_option(&mut self, o: Option<T>) {\n        if let Some(o) = o {\n            self.push(o);\n        }\n    }\n\n    #[inline]\n    fn grow_to_with<F: FnMut() -> T>(&mut self, size: usize, f: F) {\n        if size > self.len() {\n            self.resize_with(size, f);\n        }\n    }\n\n    #[inline]\n    fn grow_to(&mut self, size: usize, value: T) where T: Clone {\n        if size > self.len() {\n            self.resize(size, value);\n        }\n    }\n\n    #[inline]\n    fn grow_to_default(&mut self, size: usize) where T: Default {\n        if size > self.len() {\n            self.resize_with(size, T::default);\n        }\n    }\n\n    #[inline]\n    fn insert_slice_copy(&mut self, index: usize, slice: &[T]) where T: Copy {\n        let vlen = self.len();\n        let slen = slice.len();\n        assert!(index <= vlen);\n        assert!(slice.len() <= isize::MAX as usize); //no UB plz\n        let dlen = vlen+slen;\n\n        if dlen > self.capacity() {\n            self.reserve(slice.len());\n        }\n\n        unsafe {\n            {\n                let s = slice.as_ptr();\n                let p = self.as_mut_ptr().add(index);\n                ptr::copy(p, p.add(slen), vlen - index);\n                ptr::copy_nonoverlapping(s, p, slen);\n            }\n            self.set_len(dlen);\n        }\n    }\n\n    #[inline]\n    fn insert_slice_clone(&mut self, index: usize, slice: &[T]) where T: Clone {\n        let vlen = self.len();\n        let slen = slice.len();\n        assert!(index <= vlen);\n        assert!(slice.len() <= isize::MAX as usize); //no UB plz\n        let dlen = vlen+slen;\n\n        if dlen > self.capacity() {\n            self.reserve(slice.len());\n        }\n\n        unsafe {\n            {\n                let mut p = self.as_mut_ptr().add(index);\n                ptr::copy(p, p.add(slen), vlen - index);\n                for v in slice {\n                    ptr::write(p,v.clone());\n                    p = p.offset(1);\n                }\n            }\n            self.set_len(dlen);\n        }\n    }\n\n    fn extend_from_slice_copy(&mut self, slice: &[T]) where T: Copy {\n        self.insert_slice_copy(self.len(), slice);\n    }\n}"]},"single_path_import":{},"srcs":{"<&'a arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["fn into_iter(self) -> slice::Iter<'a, T>{\n        self[..].iter()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<&'a macros::Test as std::ops::Add<&macros::Test>>::add":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Add<&mut macros::Test>>::add":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Add<macros::Test>>::add":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitOr<macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Div<&macros::Test>>::div":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Div<&mut macros::Test>>::div":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Div<macros::Test>>::div":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Mul<&macros::Test>>::mul":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Mul<macros::Test>>::mul":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Rem<&macros::Test>>::rem":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Rem<macros::Test>>::rem":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shl<&macros::Test>>::shl":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shl<macros::Test>>::shl":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shr<&macros::Test>>::shr":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Shr<macros::Test>>::shr":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Sub<&macros::Test>>::sub":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test as std::ops::Sub<macros::Test>>::sub":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Add<&macros::Test2>>::add":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Add<macros::Test2>>::add":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Div<&macros::Test2>>::div":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Div<macros::Test2>>::div":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["fn into_iter(self) -> slice::IterMut<'a, T>{\n        self[..].iter_mut()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<&'a mut macros::Test as std::ops::Add<&macros::Test>>::add":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Add<&mut macros::Test>>::add":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Add<macros::Test>>::add":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::AddAssign<macros::Test>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitAndAssign<macros::Test>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOr<macros::Test>>::bitor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitOrAssign<macros::Test>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::BitXorAssign<macros::Test>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Div<&macros::Test>>::div":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Div<&mut macros::Test>>::div":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Div<macros::Test>>::div":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::DivAssign<macros::Test>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Mul<&macros::Test>>::mul":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Mul<macros::Test>>::mul":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::MulAssign<macros::Test>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Rem<&macros::Test>>::rem":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Rem<macros::Test>>::rem":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::RemAssign<macros::Test>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shl<&macros::Test>>::shl":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shl<macros::Test>>::shl":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShlAssign<macros::Test>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shr<&macros::Test>>::shr":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Shr<macros::Test>>::shr":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::ShrAssign<macros::Test>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Sub<&macros::Test>>::sub":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::Sub<macros::Test>>::sub":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test as std::ops::SubAssign<macros::Test>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Add<&macros::Test2>>::add":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Add<macros::Test2>>::add":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::AddAssign<macros::Test2>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<macros::Test2>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<macros::Test2>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<macros::Test2>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Div<&macros::Test2>>::div":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Div<macros::Test2>>::div":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::DivAssign<macros::Test2>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::MulAssign<macros::Test2>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::RemAssign<macros::Test2>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShlAssign<macros::Test2>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::ShrAssign<macros::Test2>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: &$r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: &mut $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["#[inline]\nfn $fn(self, r: $r) -> Self::Output{\n                std::ops::$op::$fn(Clone::clone(self),r)\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&'a mut macros::Test2 as std::ops::SubAssign<macros::Test2>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li: &mut $l = *self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<&arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["fn into(self) -> Vec<T>{\n        self.extract()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<&mut arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["fn into(self) -> Vec<T>{\n        self.extract()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<&mut std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&mut std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&mut std::string::String as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&mut std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&mut str as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&std::string::String as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<&str as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<(T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T,) as imp::tuple::AsArray>::as_array":["#[inline]\nfn as_array(self) -> Self::Dest{\n                let ($l,$($ls),*) = self;\n                [$l,$($ls),*]\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<(T,) as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                (*self).clone().as_array().avg()\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<T as from_into::FromInto<U>>::qfrom":["#[inline]\nfn qfrom(t: U) -> Self{\n        <T as From<U>>::from(t)\n    }","Real(LocalPath(\"src/from_into.rs\"))"],"<T as from_into::FromInto<U>>::qinto":["#[inline]\nfn qinto(self) -> U{\n        <T as Into<U>>::into(self)\n    }","Real(LocalPath(\"src/from_into.rs\"))"],"<[T; 32] as imp::tuple::AsTuple>::as_tuple":["#[inline]\nfn as_tuple(self) -> Self::Dest{\n                let [$l,$($ls),*] = self;\n                ($l,$($ls),*)\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<[T; 32] as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                let mut dest: U = self.iter().cloned().map(U::from).sum();\n                dest /= U::from($n);\n                dest\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<[T; _] as imp::tuple::AsTuple>::as_tuple":["#[inline]\nfn as_tuple(self) -> Self::Dest{\n                let [$l,$($ls),*] = self;\n                ($l,$($ls),*)\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<[T; _] as imp::tuple::TupleFns<T>>::avg":["#[inline]\nfn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>{\n                let mut dest: U = self.iter().cloned().map(U::from).sum();\n                dest /= U::from($n);\n                dest\n            }","Real(LocalPath(\"src/imp/tuple.rs\"))"],"<arc_slice::ArcSlice<T> as refc::RefClonable>::refc":["fn refc(&self) -> Self{\n        Self{\n            inner: self.inner.refc(),\n            slice: self.slice.clone(),\n        }\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::borrow::Borrow<[T]>>::borrow":["#[inline]\nfn borrow(&self) -> &[T]{\n        &**self\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::borrow::BorrowMut<[T]>>::borrow_mut":["#[inline]\nfn borrow_mut(&mut self) -> &mut [T]{\n        &mut **self\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::clone::Clone>::clone":["fn clone(&self) -> Self{\n        self.refc()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::cmp::Ord>::cmp":["fn cmp(&self, other: &Self) -> std::cmp::Ordering{\n        Ord::cmp(&**self,&**other)\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::cmp::PartialEq<O>>::eq":["fn eq(&self, other: &O) -> bool{\n        **self == *other.as_ref()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::cmp::PartialOrd>::partial_cmp":["fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering>{\n        PartialOrd::partial_cmp(&**self,&**other)\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::convert::AsMut<[T]>>::as_mut":["#[inline]\nfn as_mut(&mut self) -> &mut [T]{\n        &mut **self\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::convert::AsRef<[T]>>::as_ref":["#[inline]\nfn as_ref(&self) -> &[T]{\n        &**self\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::convert::From<&[T]>>::from":["fn from(v: &[T]) -> Self{\n        Self::from(v.to_vec())\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["fn into(self) -> Vec<T>{\n        self.extract()\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        fmt::Debug::fmt(&**self, f)\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::hash::Hash>::hash":["#[inline]\nfn hash<H>(&self, state: &mut H) where H: Hasher{\n        Hash::hash(&**self, state)\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::iter::Extend<&'a T>>::extend":["fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = &'a T>{\n        let iter = iter.into_iter();\n        let reserve = {\n            let (mut lower,upper) = iter.size_hint();\n            if let Some(upper) = upper {\n                lower = lower.max(upper);\n            }\n            lower\n        };\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + reserve);\n        vec.truncate(slice.end);\n        let reserved = vec.capacity() - slice.end;\n        if reserve > reserved {\n            vec.reserve(reserve-reserved);\n        }\n        for i in iter {\n            vec.push(i.clone());\n            slice.end += 1;\n        }\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::iter::Extend<T>>::extend":["fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = T>{\n        let iter = iter.into_iter();\n        let reserve = {\n            let (mut lower,upper) = iter.size_hint();\n            if let Some(upper) = upper {\n                lower = lower.max(upper);\n            }\n            lower\n        };\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + reserve);\n        vec.truncate(slice.end);\n        let reserved = vec.capacity() - slice.end;\n        if reserve > reserved {\n            vec.reserve(reserve-reserved);\n        }\n        for i in iter {\n            vec.push(i);\n            slice.end += 1;\n        }\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["#[inline]\nfn into_iter(self) -> IntoIter<T>{\n        let slice = self.slice;\n        match Arc::try_unwrap(self.inner) {\n            Ok(mut v) => {\n                v.truncate(slice.end);\n                let mut iter = v.into_iter();\n                for _ in 0..slice.start {\n                    assert!(iter.next().is_some());\n                }\n                iter\n            }\n            Err(v) => {\n                let v = v[slice].to_vec();\n                v.into_iter()\n            }\n        }\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::ops::Deref>::deref":["#[inline]\nfn deref(&self) -> &Self::Target{\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        &self.inner[self.slice.clone()]\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<T> as std::ops::DerefMut>::deref_mut":["#[inline]\nfn deref_mut(&mut self) -> &mut Self::Target{\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        let (vec,range) = self._make_mut();\n        &mut vec[range.clone()]\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<u8> as std::io::Write>::flush":["#[inline]\nfn flush(&mut self) -> io::Result<()>{\n        Ok(())\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write":["#[inline]\nfn write(&mut self, buf: &[u8]) -> io::Result<usize>{\n        self.extend_from_slice(buf);\n        Ok(buf.len())\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_all":["#[inline]\nfn write_all(&mut self, buf: &[u8]) -> io::Result<()>{\n        self.write(buf)?;\n        Ok(())\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_vectored":["#[inline]\nfn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>{\n        let len = bufs.iter().map(|b| b.len()).sum();\n        let (vec,slice) = self._make_mut_with_capacity(self.len() + len);\n        vec.truncate(slice.end);\n        vec.reserve(len);\n        for buf in bufs {\n            vec.extend_from_slice(buf);\n        }\n        slice.end += len;\n        Ok(len)\n    }","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"<bool as imp::boolext::BoolExtOption>::option":["#[inline]\nfn option(&self) -> Option<()>{\n        if *self {Some(())} else {None}\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"<bool as imp::boolext::BoolExtOption>::result":["#[inline]\nfn result(&self) -> Result<(),()>{\n        if *self {Ok(())} else {Err(())}\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"<i128 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<i16 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<i32 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<i64 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<i8 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<isize as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<macros::Test as std::ops::Add<&macros::Test>>::add":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Add<&mut macros::Test>>::add":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Add>::add":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::AddAssign>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAnd>::bitand":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitAndAssign>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOr>::bitor":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitOrAssign>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXor>::bitxor":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::BitXorAssign>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Div<&macros::Test>>::div":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Div<&mut macros::Test>>::div":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Div>::div":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::DivAssign>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Mul<&macros::Test>>::mul":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Mul>::mul":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::MulAssign>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Rem<&macros::Test>>::rem":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Rem>::rem":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::RemAssign>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shl<&macros::Test>>::shl":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shl>::shl":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShlAssign>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shr<&macros::Test>>::shr":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Shr>::shr":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::ShrAssign>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Sub<&macros::Test>>::sub":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::Sub>::sub":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test as std::ops::SubAssign>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Add<&macros::Test2>>::add":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Add>::add":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::AddAssign>::add_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAnd>::bitand":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitAndAssign>::bitand_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOr>::bitor":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitOrAssign>::bitor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXor>::bitxor":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::BitXorAssign>::bitxor_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Div<&macros::Test2>>::div":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Div>::div":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::DivAssign>::div_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Mul>::mul":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::MulAssign>::mul_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Rem>::rem":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::RemAssign>::rem_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shl>::shl":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShlAssign>::shl_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Shr>::shr":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::ShrAssign>::shr_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["#[inline]\nfn $fn(mut self, r: &$r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["#[inline]\nfn $fn(mut self, r: &mut $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::Sub>::sub":["#[inline]\nfn $fn(mut self, r: $r) -> Self::Output{\n                std::ops::$op_assign::$fn_assign(&mut self,r);\n                self\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &$r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: &mut $r){\n                let $li = self;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<macros::Test2 as std::ops::SubAssign>::sub_assign":["#[inline]\nfn $fn_assign(&mut self, $ri: $r){\n                let $li = self;\n                let $ri = &$ri;\n                $f\n            }","Real(LocalPath(\"src/macros.rs\"))"],"<std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to":["#[inline]\nfn add_to<V>(&mut self, v: V) where T: AddAssign<V>{\n        self.with_mut(#[inline] |s| AddAssign::add_assign(s,v) );\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_if":["#[inline]\nfn add_to_if<V>(&mut self, v: Option<V>) where T: AddAssign<V>{\n        if let Some(v) = v {\n            self.add_to(v)\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_lossy":["#[inline]\nfn add_to_lossy<V>(&mut self, v: Option<V>) where T: AddAssign<V>{\n        if let Some(v) = v {\n            self.add_to(v)\n        }else{\n            *self = None;\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to":["#[inline]\nfn div_to<V>(&mut self, v: V) where T: DivAssign<V>{\n        self.with_mut(#[inline] |s| DivAssign::div_assign(s,v) );\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_if":["#[inline]\nfn div_to_if<V>(&mut self, v: Option<V>) where T: DivAssign<V>{\n        if let Some(v) = v {\n            self.div_to(v)\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_lossy":["#[inline]\nfn div_to_lossy<V>(&mut self, v: Option<V>) where T: DivAssign<V>{\n        if let Some(v) = v {\n            self.div_to(v)\n        }else{\n            *self = None;\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to":["#[inline]\nfn mul_to<V>(&mut self, v: V) where T: MulAssign<V>{\n        self.with_mut(#[inline] |s| MulAssign::mul_assign(s,v) );\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_if":["#[inline]\nfn mul_to_if<V>(&mut self, v: Option<V>) where T: MulAssign<V>{\n        if let Some(v) = v {\n            self.mul_to(v)\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_lossy":["#[inline]\nfn mul_to_lossy<V>(&mut self, v: Option<V>) where T: MulAssign<V>{\n        if let Some(v) = v {\n            self.mul_to(v)\n        }else{\n            *self = None;\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to":["#[inline]\nfn sub_to<V>(&mut self, v: V) where T: SubAssign<V>{\n        self.with_mut(#[inline] |s| SubAssign::sub_assign(s,v) );\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_if":["#[inline]\nfn sub_to_if<V>(&mut self, v: Option<V>) where T: SubAssign<V>{\n        if let Some(v) = v {\n            self.sub_to(v)\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_lossy":["#[inline]\nfn sub_to_lossy<V>(&mut self, v: Option<V>) where T: SubAssign<V>{\n        if let Some(v) = v {\n            self.sub_to(v)\n        }else{\n            *self = None;\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with":["#[inline]\nfn with<R>(&self, f: impl FnOnce(&T)->R) -> Option<R>{\n        self.as_ref().map(f)\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_if":["#[inline]\nfn with_if<R,U>(&self, o: &Option<U>, f: impl FnOnce(&T,&U)->R) -> Option<R>{\n        flatten( self.with(#[inline] |s| o.with(|o| f(s,o) )) )\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut":["#[inline]\nfn with_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> Option<R>{\n        self.as_mut().map(f)\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if":["#[inline]\nfn with_mut_if<R,U>(&mut self, o: &Option<U>, f: impl FnOnce(&mut T,&U)->R) -> Option<R>{\n        flatten( self.with_mut(#[inline] |s| o.with(|o| f(s,o) )) )\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if_saturating":["#[inline]\nfn with_mut_if_saturating<R>(&mut self, o: Option<T>, f: impl FnOnce(&mut T,&T)->R) -> Option<R>{\n        if let Some(s) = self {\n            o.with(#[inline] |o| f(s,o) )\n        }else{\n            *self = o;\n            None\n        }\n    }","Real(LocalPath(\"src/imp/option.rs\"))"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_err_nodebug":["#[inline]\nfn expect_err_nodebug(self, msg: &str) -> E{\n        match self {\n            Ok(_) => unwrap_failed::<T>(msg),\n            Err(e) => e,\n        }\n    }","Real(LocalPath(\"src/imp/result.rs\"))"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_nodebug":["#[inline]\nfn expect_nodebug(self, msg: &str) -> T{\n        match self {\n            Ok(t) => t,\n            Err(_) => unwrap_failed::<E>(msg),\n        }\n    }","Real(LocalPath(\"src/imp/result.rs\"))"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_err_nodebug":["#[inline]\nfn unwrap_err_nodebug(self) -> E{\n        match self {\n            Ok(_) => unwrap_failed::<T>(\"called `Result::unwrap_err()` on an `Ok` value\"),\n            Err(e) => e,\n        }\n    }","Real(LocalPath(\"src/imp/result.rs\"))"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_nodebug":["#[inline]\nfn unwrap_nodebug(self) -> T{\n        match self {\n            Ok(t) => t,\n            Err(_) => unwrap_failed::<E>(\"called `Result::unwrap()` on an `Err` value\"),\n        }\n    }","Real(LocalPath(\"src/imp/result.rs\"))"],"<std::string::String as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::extend_from_slice_copy":["fn extend_from_slice_copy(&mut self, slice: &[T]) where T: Copy{\n        self.insert_slice_copy(self.len(), slice);\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to":["#[inline]\nfn grow_to(&mut self, size: usize, value: T) where T: Clone{\n        if size > self.len() {\n            self.resize(size, value);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_default":["#[inline]\nfn grow_to_default(&mut self, size: usize) where T: Default{\n        if size > self.len() {\n            self.resize_with(size, T::default);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_with":["#[inline]\nfn grow_to_with<F: FnMut() -> T>(&mut self, size: usize, f: F){\n        if size > self.len() {\n            self.resize_with(size, f);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_clone":["#[inline]\nfn insert_slice_clone(&mut self, index: usize, slice: &[T]) where T: Clone{\n        let vlen = self.len();\n        let slen = slice.len();\n        assert!(index <= vlen);\n        assert!(slice.len() <= isize::MAX as usize); //no UB plz\n        let dlen = vlen+slen;\n\n        if dlen > self.capacity() {\n            self.reserve(slice.len());\n        }\n\n        unsafe {\n            {\n                let mut p = self.as_mut_ptr().add(index);\n                ptr::copy(p, p.add(slen), vlen - index);\n                for v in slice {\n                    ptr::write(p,v.clone());\n                    p = p.offset(1);\n                }\n            }\n            self.set_len(dlen);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_copy":["#[inline]\nfn insert_slice_copy(&mut self, index: usize, slice: &[T]) where T: Copy{\n        let vlen = self.len();\n        let slen = slice.len();\n        assert!(index <= vlen);\n        assert!(slice.len() <= isize::MAX as usize); //no UB plz\n        let dlen = vlen+slen;\n\n        if dlen > self.capacity() {\n            self.reserve(slice.len());\n        }\n\n        unsafe {\n            {\n                let s = slice.as_ptr();\n                let p = self.as_mut_ptr().add(index);\n                ptr::copy(p, p.add(slen), vlen - index);\n                ptr::copy_nonoverlapping(s, p, slen);\n            }\n            self.set_len(dlen);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::push_option":["#[inline]\nfn push_option(&mut self, o: Option<T>){\n        if let Some(o) = o {\n            self.push(o);\n        }\n    }","Real(LocalPath(\"src/imp/vec.rs\"))"],"<std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["#[inline]\nfn _is_empty(&self) -> bool{\n        self.is_empty()\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"<u128 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<u16 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<u32 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<u64 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<u8 as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"<usize as imp::numext::DivOrNop>::div_or_nop":["#[inline]\nfn div_or_nop(self, d: Self) -> Self{\n                self.checked_div(d).unwrap_or(self)\n            }","Real(LocalPath(\"src/imp/numext.rs\"))"],"arc_slice::ArcSlice":["/// Slice backed by Arc<Vec<T>>\n///\n/// Cow mechanisms, minimizes clones\npub struct ArcSlice<T> {\n    inner: Arc<Vec<T>>,\n    slice: Range<usize>,\n}","Real(LocalPath(\"src/arc_slice/mod.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut":["/// mutably access the mutable Vec inside\n/// Note that self.slice will eventually mutate\npub fn _make_mut(&mut self) -> (&mut Vec<T>,&mut Range<usize>) where T: Clone{\n        self._make_mut_with_capacity(self.len())\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted":["pub fn _make_mut_extracted(&mut self) -> &mut Vec<T> where T: Clone{\n        self._make_mut_extracted_with_capacity(self.len())\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted_with_capacity":["pub fn _make_mut_extracted_with_capacity(&mut self, capacity: usize) -> &mut Vec<T> where T: Clone{\n        *self = self.extracted_with_capacity(capacity);\n        assert!(self.is_unsliced());\n        self._make_mut_with_capacity(capacity).0\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_with_capacity":["pub fn _make_mut_with_capacity(&mut self, capacity: usize) -> (&mut Vec<T>,&mut Range<usize>) where T: Clone{\n        if Arc::get_mut(&mut self.inner).is_some() {\n            // In this case Arc::make_mut probably won't clone\n            (Arc::make_mut(&mut self.inner),&mut self.slice)\n        }else{\n            // use optimized clone in which case Arc::make_mut would probably clone\n            *self = self.extracted_with_capacity(capacity);\n            Arc::make_mut(&mut self.inner);\n            assert!(self.is_unsliced());\n            self._make_mut_with_capacity(capacity)\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::append":["pub fn append(&mut self, other: &mut Vec<T>) where T: Clone{\n        if !other.is_empty() {\n            let other_len = other.len();\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + other_len);\n            vec.truncate(slice.end);\n            vec.append(other);\n            self.slice.end += other_len;\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::clear":["pub fn clear(&mut self){\n        self.truncate(0);\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::compact":["/// Minimize memory usage.\n/// This will only work for unique ArcSlices and then would reallocate and move the contents.\npub fn compact(&mut self) -> bool{\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            if self.slice.start == 0 {\n                e.truncate(self.slice.end);\n                e.shrink_to_fit();\n            }else{\n                let mut dest = Vec::new();\n                dest.reserve_exact(e.len());\n                dest.append(e);\n                assert_eq!(dest.capacity(),dest.len());\n                self.slice = 0..dest.len();\n                *e = dest;\n            }\n            true\n        }else{\n            false\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extend_from_slice":["pub fn extend_from_slice(&mut self, other: &[T]) where T: Clone{\n        if !other.is_empty() {\n            let other_len = other.len();\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + other_len);\n            vec.truncate(slice.end);\n            vec.extend_from_slice(other);\n            self.slice.end += other_len;\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract":["/// will always allocate and clone\npub fn extract(&self) -> Vec<T> where T: Clone{\n        self.extract_with_capacity(self.len())\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract_with_capacity":["pub fn extract_with_capacity(&self, capacity: usize) -> Vec<T> where T: Clone{\n        let mut dest = Vec::with_capacity(self.len().max(capacity));\n        dest.extend_from_slice(&self);\n        dest\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted":["pub fn extracted(&self) -> Self where T: Clone{\n        self.extracted_with_capacity(self.len())\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted_with_capacity":["pub fn extracted_with_capacity(&self, capacity: usize) -> Self where T: Clone{\n        if self.is_unsliced() {\n            self.refc()\n        }else{\n            Self::from(self.extract_with_capacity(capacity))\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert":["pub fn insert(&mut self, index: usize, element: T) where T: Clone{\n        assert!(index <= self.len(),\"insert out of bounds\");\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.insert(self.slice.start + index, element);\n            self.slice.end += 1;\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()+1);\n            let (left,right) = origin.split_at(index);\n            dest.extend_from_slice(left);\n            dest.push(element);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert_slice":["pub fn insert_slice(&mut self, index: usize, s: &[T]) where T: Clone{\n        assert!(index <= self.len(),\"insert out of bounds\");\n        if s.is_empty() {return;}\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.insert_slice_clone(self.slice.start + index, s);\n            self.slice.end += s.len();\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()+s.len());\n            let (left,right) = origin.split_at(index);\n            dest.extend_from_slice(left);\n            dest.extend_from_slice(s);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_empty":["#[inline]\npub fn is_empty(&self) -> bool{\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        self.slice.start == self.slice.end\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_unsliced":["/// whether this slice vievs the complete backing vec\n#[inline]\npub fn is_unsliced(&self) -> bool{\n        self.slice.start == 0 && self.slice.end == self.len()\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::len":["#[inline]\npub fn len(&self) -> usize{\n        assert!(self.slice.end >= self.slice.start);\n        assert!(self.slice.end <= self.inner.len());\n        let len = self.slice.end - self.slice.start;\n        assert_eq!(len,self[..].len());\n        len\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::new":["pub fn new() -> Self{\n        Self{\n            inner: Arc::new(Vec::new()),\n            slice: 0..0,\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::pop":["pub fn pop(&mut self) -> Option<T> where T: Clone{\n        (self.slice.end > self.slice.start)\n            .map(|| {\n                self.remove(self.len()-1)\n            })\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::push":["pub fn push(&mut self, v: T) where T: Clone{\n        self.insert(self.len(), v)\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::remove":["pub fn remove(&mut self, index: usize) -> T where T: Clone{\n        assert!(index < self.len(),\"remove out of bounds\");\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            self.slice.end -= 1;\n            e.remove(self.slice.start + index)\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()-1);\n            let left = &origin[..index];\n            dest.extend_from_slice(left);\n            let removed = origin[index].clone();\n            let right = &origin[(index+1)..];\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n            removed\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize":["pub fn resize<F>(&mut self, new_len: usize, value: T) where T: Clone{\n        self.resize_with(new_len, move || value.clone() )\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_default":["pub fn resize_default<F>(&mut self, new_len: usize) where T: Clone + Default{\n        self.resize_with(new_len, || T::default() )\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_with":["pub fn resize_with<F>(&mut self, new_len: usize, mut f: F) where T: Clone, F: FnMut() -> T{\n        if new_len > self.len() {\n            let (vec,slice) = self._make_mut_with_capacity(self.len() + 1);\n            vec.truncate(slice.end);\n            vec.reserve( (slice.start+new_len).saturating_sub(vec.capacity()) );\n            for _ in slice.len()..new_len {\n                vec.push(f());\n            }\n            self.slice.end = slice.start + new_len;\n        } else {\n            self.truncate(new_len);\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::retain":["pub fn retain<F>(&mut self, mut f: F) where T: Clone, F: FnMut(&T) -> bool{\n        if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            e.retain(f);\n            self.slice.end = self.slice.start + e.len();\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len());\n            for v in origin {\n                if f(v) {\n                    dest.push(v.clone());\n                }\n            }\n            *self = Self::from(dest);\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::slice":["/// slice of the current slice\n/// \n/// will not allocate\n#[inline]\npub fn slice<S>(&self, range: S) -> Self where S: RangeBounds<usize>{\n        Self{\n            inner: self.inner.refc(),\n            slice: slice_slice(&self.slice,range),\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_at":["pub fn split_at(&mut self, at: usize) -> (Self,Self){\n        assert!(at <= self.len(), \"`at` out of bounds\");\n        let start = self.slice(..at);\n        let end = self.slice(at..);\n        (start,end)\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_off":["pub fn split_off(&mut self, at: usize) -> Self{\n        let (start,end) = self.split_at(at);\n        *self = start;\n        end\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::swap_remove":["pub fn swap_remove(&mut self, index: usize) -> T where T: Clone{\n        assert!(index < self.len(),\"swap_remove out of bounds\");\n        if index == self.len()-1 {\n            self.remove(index)\n        }else if let Some(e) = Arc::get_mut(&mut self.inner) {\n            e.truncate(self.slice.end);\n            self.slice.end -= 1;\n            e.swap_remove(self.slice.start + index)\n        }else{\n            let origin = &self[..];\n            let mut dest = Vec::with_capacity(self.len()-1);\n            let left = &origin[..index];\n            dest.extend_from_slice(left);\n            let removed = origin[index].clone();\n            let right = &origin[(index+1)..(origin.len()-1)];\n            let end = origin.last().unwrap().clone();\n            dest.push(end);\n            dest.extend_from_slice(right);\n            *self = Self::from(dest);\n            removed\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::truncate":["pub fn truncate(&mut self, len: usize){\n        if len == 0 {\n            self.slice = 0..0;\n        }else{\n            self.slice.end = self.len().min(self.slice.start + len);\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::with_capacity":["pub fn with_capacity(capacity: usize) -> Self{\n        Self{\n            inner: Arc::new(Vec::with_capacity(capacity)),\n            slice: 0..0,\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl std::convert::From<std::sync::Arc<std::vec::Vec<T>>> for arc_slice::ArcSlice<T>>::from":["fn from(v: Arc<Vec<T>>) -> Self{\n        Self{\n            slice: 0..v.len(),\n            inner: v,\n        }\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl std::convert::From<std::vec::Vec<T>> for arc_slice::ArcSlice<T>>::from":["fn from(v: Vec<T>) -> Self{\n        Self::from(Arc::new(v))\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::<impl std::default::Default for arc_slice::ArcSlice<T>>::default":["fn default() -> Self{\n        Self::new()\n    }","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"arc_slice::imp::slice_slice":["#[inline]\nfn slice_slice<S>(range: &Range<usize>, slice: S) -> Range<usize> where S: RangeBounds<usize>{\n    let (os,oe) = (range.start,range.end);\n    let (mut s,mut e) = (os,oe);\n    match slice.end_bound() {\n        std::ops::Bound::Included(&b) => e = oe.min(b+1+os),\n        std::ops::Bound::Excluded(&b) => e = oe.min(b+os),\n        std::ops::Bound::Unbounded => (),\n    }\n    match slice.start_bound() {\n        std::ops::Bound::Included(&b) => s = os.max(b+os),\n        std::ops::Bound::Excluded(&b) => s = os.max(b-1+os),\n        std::ops::Bound::Unbounded => (),\n    }\n    assert!(s >= os && s <= oe && e >= os && e <= oe && e >= s, \"Inner slice out of bounds\");\n    s..e\n}","Real(LocalPath(\"src/arc_slice/imp.rs\"))"],"from_into::FromInto":["pub trait FromInto<T> {\n    fn qfrom(t: T) -> Self;\n    fn qinto(self) -> T;\n}","Real(LocalPath(\"src/from_into.rs\"))"],"if_type::if_type":["#[inline]\npub fn if_type<Specific: 'static, T: 'static>(f: impl FnOnce() -> Specific) -> Option<T>{\n    if TypeId::of::<T>() == TypeId::of::<Specific>() {\n        let typed = f();\n        let erased: T = unsafe{ std::mem::transmute_copy(&typed) };\n        std::mem::forget(typed);\n        Some(erased)\n    }else{\n        None\n    }\n}","Real(LocalPath(\"src/if_type.rs\"))"],"imp::boolext::BoolExtOption":["pub trait BoolExtOption {\n    fn option(&self) -> Option<()>;\n    fn result(&self) -> Result<(),()>;\n    \n    #[inline]\n    fn map<U>(&self, f: impl FnOnce()->U) -> Option<U> {\n        self.option().map(#[inline]|_|f())\n    }\n    #[inline]\n    fn map_or<U>(&self, default: U, f: impl FnOnce()->U) -> U {\n        self.option().map_or(default,#[inline]|_|f())\n    }\n    #[inline]\n    fn map_or_else<U>(&self, default: impl FnOnce()->U, f: impl FnOnce()->U) -> U {\n        self.option().map_or_else(default,#[inline]|_|f())\n    }\n    #[inline]\n    fn map_or_err<T,E>(&self, f: impl FnOnce()->T, e: impl FnOnce()->E) -> Result<T,E> {\n        self.result().map(#[inline]|_|f()).map_err(#[inline]|_|e())\n    }\n}","Real(LocalPath(\"src/imp/boolext.rs\"))"],"imp::boolext::BoolExtOption::map":["#[inline]\nfn map<U>(&self, f: impl FnOnce()->U) -> Option<U>{\n        self.option().map(#[inline]|_|f())\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"imp::boolext::BoolExtOption::map_or":["#[inline]\nfn map_or<U>(&self, default: U, f: impl FnOnce()->U) -> U{\n        self.option().map_or(default,#[inline]|_|f())\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"imp::boolext::BoolExtOption::map_or_else":["#[inline]\nfn map_or_else<U>(&self, default: impl FnOnce()->U, f: impl FnOnce()->U) -> U{\n        self.option().map_or_else(default,#[inline]|_|f())\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"imp::boolext::BoolExtOption::map_or_err":["#[inline]\nfn map_or_err<T,E>(&self, f: impl FnOnce()->T, e: impl FnOnce()->E) -> Result<T,E>{\n        self.result().map(#[inline]|_|f()).map_err(#[inline]|_|e())\n    }","Real(LocalPath(\"src/imp/boolext.rs\"))"],"imp::numext::DivOrNop":["pub trait DivOrNop: Sized + Copy {\n    fn div_or_nop(self, d: Self) -> Self;\n}","Real(LocalPath(\"src/imp/numext.rs\"))"],"imp::option::OptionExt":["pub trait OptionExt<T> {\n    fn with<R>(&self, f: impl FnOnce(&T)->R) -> Option<R>;\n    fn with_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> Option<R>;\n\n    fn with_if<R,U>(&self, o: &Option<U>, f: impl FnOnce(&T,&U)->R) -> Option<R>;\n    fn with_mut_if<R,U>(&mut self, o: &Option<U>, f: impl FnOnce(&mut T,&U)->R) -> Option<R>;\n\n    fn with_mut_if_saturating<R>(&mut self, o: Option<T>, f: impl FnOnce(&mut T,&T)->R) -> Option<R>;\n\n    fn add_to<V>(&mut self, v: V) where T: AddAssign<V>;\n    fn sub_to<V>(&mut self, v: V) where T: SubAssign<V>;\n    fn mul_to<V>(&mut self, v: V) where T: MulAssign<V>;\n    fn div_to<V>(&mut self, v: V) where T: DivAssign<V>;\n\n    fn add_to_lossy<V>(&mut self, v: Option<V>) where T: AddAssign<V>;\n    fn sub_to_lossy<V>(&mut self, v: Option<V>) where T: SubAssign<V>;\n    fn mul_to_lossy<V>(&mut self, v: Option<V>) where T: MulAssign<V>;\n    fn div_to_lossy<V>(&mut self, v: Option<V>) where T: DivAssign<V>;\n\n    fn add_to_if<V>(&mut self, v: Option<V>) where T: AddAssign<V>;\n    fn sub_to_if<V>(&mut self, v: Option<V>) where T: SubAssign<V>;\n    fn mul_to_if<V>(&mut self, v: Option<V>) where T: MulAssign<V>;\n    fn div_to_if<V>(&mut self, v: Option<V>) where T: DivAssign<V>;\n}","Real(LocalPath(\"src/imp/option.rs\"))"],"imp::option::flatten":["#[inline]\nfn flatten<T>(i: Option<Option<T>>) -> Option<T>{\n    match i {\n        Some(j) => j,\n        None => None,\n    }\n}","Real(LocalPath(\"src/imp/option.rs\"))"],"imp::result::ResultNonDebugUnwrap":["pub trait ResultNonDebugUnwrap<T,E> {\n    fn expect_nodebug(self, msg: &str) -> T;\n    fn expect_err_nodebug(self, msg: &str) -> E;\n    fn unwrap_nodebug(self) -> T;\n    fn unwrap_err_nodebug(self) -> E;\n}","Real(LocalPath(\"src/imp/result.rs\"))"],"imp::result::unwrap_failed":["#[inline(never)]\n#[cold]\nfn unwrap_failed<E>(msg: &str) -> !{\n    panic!(\"{}: {}\", msg, std::any::type_name::<E>())\n}","Real(LocalPath(\"src/imp/result.rs\"))"],"imp::tuple::AsArray":["pub trait AsArray {\n    type Dest;\n\n    fn as_array(self) -> Self::Dest;\n}","Real(LocalPath(\"src/imp/tuple.rs\"))"],"imp::tuple::AsTuple":["pub trait AsTuple {\n    type Dest;\n\n    fn as_tuple(self) -> Self::Dest;\n}","Real(LocalPath(\"src/imp/tuple.rs\"))"],"imp::tuple::TupleFns":["pub trait TupleFns<T> where T: 'static {\n    fn avg<U>(&self) -> U where T: Clone, U: From<T> + From<u8> + Sum<U> + DivAssign<U>;\n}","Real(LocalPath(\"src/imp/tuple.rs\"))"],"imp::vec::VecExt":["pub trait VecExt<T> {\n    fn push_option(&mut self, o: Option<T>);\n\n    fn grow_to_with<F: FnMut() -> T>(&mut self, size: usize, f: F);\n\n    fn grow_to(&mut self, size: usize, value: T) where T: Clone;\n\n    fn grow_to_default(&mut self, size: usize) where T: Default;\n\n    fn insert_slice_copy(&mut self, index: usize, slice: &[T]) where T: Copy;\n\n    fn insert_slice_clone(&mut self, index: usize, slice: &[T]) where T: Clone;\n\n    fn extend_from_slice_copy(&mut self, slice: &[T]) where T: Copy;\n}","Real(LocalPath(\"src/imp/vec.rs\"))"],"macros::Test":["struct Test {}","Real(LocalPath(\"src/macros.rs\"))"],"macros::Test2":["struct Test2 {}","Real(LocalPath(\"src/macros.rs\"))"],"not_empty::NotEmpty":["pub trait NotEmpty: Sized {\n    fn _is_empty(&self) -> bool;\n    #[inline]\n    fn not_empty(self) -> Option<Self> {\n        self._is_empty().map(|| self)\n    }\n}","Real(LocalPath(\"src/not_empty.rs\"))"],"not_empty::NotEmpty::not_empty":["#[inline]\nfn not_empty(self) -> Option<Self>{\n        self._is_empty().map(|| self)\n    }","Real(LocalPath(\"src/not_empty.rs\"))"],"refc::RefClonable":["/**\n * Clone function but only does cheap ref-cloning like rc\n */\npub trait RefClonable {\n    fn refc(&self) -> Self;\n}","Real(LocalPath(\"src/refc/mod.rs\"))"],"refc::imp::<impl refc::RefClonable for std::boxed::Box<T>>::refc":["#[inline]\nfn refc(&self) -> Self{\n        Box::new( (**self).refc() )\n    }","Real(LocalPath(\"src/refc/imp.rs\"))"],"refc::imp::<impl refc::RefClonable for std::rc::Rc<T>>::refc":["#[inline]\nfn refc(&self) -> Self{\n        Rc::clone(self)\n    }","Real(LocalPath(\"src/refc/imp.rs\"))"],"refc::imp::<impl refc::RefClonable for std::sync::Arc<T>>::refc":["#[inline]\nfn refc(&self) -> Self{\n        Arc::clone(self)\n    }","Real(LocalPath(\"src/refc/imp.rs\"))"],"scoped::Interior":["/// like ScopedMut, but explict with interior mutability\npub trait Interior {\n    type T;\n\n    fn interior_access<R>(&self, f: impl FnOnce(&Self::T)->R) -> R;\n    fn interior_access_mut<R>(&self, f: impl FnOnce(&mut Self::T)->R) -> R;\n}","Real(LocalPath(\"src/scoped/mod.rs\"))"],"scoped::ScopedMut":["/// a type which inner type T can be accessed scoped\n/// \n/// use impl_scoped_mut!(T) if a implementation is missing\npub trait ScopedMut {\n    type T;\n\n    fn access<R>(&self, f: impl FnOnce(&Self::T)->R) -> R;\n    fn access_mut<R>(&mut self, f: impl FnOnce(&mut Self::T)->R) -> R;\n}","Real(LocalPath(\"src/scoped/mod.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <C as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        <C as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <C as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        <C as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <C as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        <C as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        let b = self.try_borrow().expect(\"ContainerMut access failed: borrowed RefCell\");\n        <S as ScopedMut>::access(&b,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        let mut b = self.try_borrow_mut().expect(\"ContainerMut access failed: borrowed RefCell\");\n        <S as ScopedMut>::access_mut(&mut b,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <C as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        <C as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <C as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        <C as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access":["#[inline]\nfn interior_access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        let b = self.read().expect(\"ContainerMut access failed: poisoned RwLock\");\n        <S as ScopedMut>::access(&b,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access_mut":["#[inline]\nfn interior_access_mut<R>(&self, f: impl FnOnce(&mut T)->R) -> R{\n        let mut b = self.write().expect(\"ContainerMut access failed: poisoned RwLock\");\n        <S as ScopedMut>::access_mut(&mut b,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <Self as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <Self as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <Self as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <Self as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <Self as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <Self as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <Self as Interior>::interior_access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <Self as Interior>::interior_access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/interior.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <S as ScopedMut>::access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <S as ScopedMut>::access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <S as ScopedMut>::access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        let b = self.to_mut();\n        <S as ScopedMut>::access_mut(b,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access":["#[inline]\nfn access<R>(&self, f: impl FnOnce(&T)->R) -> R{\n        <S as ScopedMut>::access(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access_mut":["#[inline]\nfn access_mut<R>(&mut self, f: impl FnOnce(&mut T)->R) -> R{\n        <S as ScopedMut>::access_mut(self,f)\n    }","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))"]},"struct_constructor":{"!":["unwrap_failed"],"&<arc_slice::ArcSlice<T> as std::ops::Deref>::Target":["deref"],"&[T]":["as_ref","borrow"],"&mut <arc_slice::ArcSlice<T> as std::ops::Deref>::Target":["deref_mut"],"&mut [T]":["as_mut","borrow_mut"],"(&mut std::vec::Vec<T>, &mut std::ops::Range<usize>)":["_make_mut","_make_mut_with_capacity"],"(arc_slice::ArcSlice<T>, arc_slice::ArcSlice<T>)":["split_at"],"<&'a macros::Test as std::ops::Add<&macros::Test>>::Output":["add"],"<&'a macros::Test as std::ops::Add<&mut macros::Test>>::Output":["add"],"<&'a macros::Test as std::ops::Add<macros::Test>>::Output":["add"],"<&'a macros::Test as std::ops::BitAnd<&macros::Test>>::Output":["bitand"],"<&'a macros::Test as std::ops::BitAnd<&mut macros::Test>>::Output":["bitand"],"<&'a macros::Test as std::ops::BitAnd<macros::Test>>::Output":["bitand"],"<&'a macros::Test as std::ops::BitOr<&macros::Test>>::Output":["bitor"],"<&'a macros::Test as std::ops::BitOr<&mut macros::Test>>::Output":["bitor"],"<&'a macros::Test as std::ops::BitOr<macros::Test>>::Output":["bitor"],"<&'a macros::Test as std::ops::BitXor<&macros::Test>>::Output":["bitxor"],"<&'a macros::Test as std::ops::BitXor<&mut macros::Test>>::Output":["bitxor"],"<&'a macros::Test as std::ops::BitXor<macros::Test>>::Output":["bitxor"],"<&'a macros::Test as std::ops::Div<&macros::Test>>::Output":["div"],"<&'a macros::Test as std::ops::Div<&mut macros::Test>>::Output":["div"],"<&'a macros::Test as std::ops::Div<macros::Test>>::Output":["div"],"<&'a macros::Test as std::ops::Mul<&macros::Test>>::Output":["mul"],"<&'a macros::Test as std::ops::Mul<&mut macros::Test>>::Output":["mul"],"<&'a macros::Test as std::ops::Mul<macros::Test>>::Output":["mul"],"<&'a macros::Test as std::ops::Rem<&macros::Test>>::Output":["rem"],"<&'a macros::Test as std::ops::Rem<&mut macros::Test>>::Output":["rem"],"<&'a macros::Test as std::ops::Rem<macros::Test>>::Output":["rem"],"<&'a macros::Test as std::ops::Shl<&macros::Test>>::Output":["shl"],"<&'a macros::Test as std::ops::Shl<&mut macros::Test>>::Output":["shl"],"<&'a macros::Test as std::ops::Shl<macros::Test>>::Output":["shl"],"<&'a macros::Test as std::ops::Shr<&macros::Test>>::Output":["shr"],"<&'a macros::Test as std::ops::Shr<&mut macros::Test>>::Output":["shr"],"<&'a macros::Test as std::ops::Shr<macros::Test>>::Output":["shr"],"<&'a macros::Test as std::ops::Sub<&macros::Test>>::Output":["sub"],"<&'a macros::Test as std::ops::Sub<&mut macros::Test>>::Output":["sub"],"<&'a macros::Test as std::ops::Sub<macros::Test>>::Output":["sub"],"<&'a macros::Test2 as std::ops::Add<&macros::Test2>>::Output":["add"],"<&'a macros::Test2 as std::ops::Add<&mut macros::Test2>>::Output":["add"],"<&'a macros::Test2 as std::ops::Add<macros::Test2>>::Output":["add"],"<&'a macros::Test2 as std::ops::BitAnd<&macros::Test2>>::Output":["bitand"],"<&'a macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::Output":["bitand"],"<&'a macros::Test2 as std::ops::BitAnd<macros::Test2>>::Output":["bitand"],"<&'a macros::Test2 as std::ops::BitOr<&macros::Test2>>::Output":["bitor"],"<&'a macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::Output":["bitor"],"<&'a macros::Test2 as std::ops::BitOr<macros::Test2>>::Output":["bitor"],"<&'a macros::Test2 as std::ops::BitXor<&macros::Test2>>::Output":["bitxor"],"<&'a macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::Output":["bitxor"],"<&'a macros::Test2 as std::ops::BitXor<macros::Test2>>::Output":["bitxor"],"<&'a macros::Test2 as std::ops::Div<&macros::Test2>>::Output":["div"],"<&'a macros::Test2 as std::ops::Div<&mut macros::Test2>>::Output":["div"],"<&'a macros::Test2 as std::ops::Div<macros::Test2>>::Output":["div"],"<&'a macros::Test2 as std::ops::Mul<&macros::Test2>>::Output":["mul"],"<&'a macros::Test2 as std::ops::Mul<&mut macros::Test2>>::Output":["mul"],"<&'a macros::Test2 as std::ops::Mul<macros::Test2>>::Output":["mul"],"<&'a macros::Test2 as std::ops::Rem<&macros::Test2>>::Output":["rem"],"<&'a macros::Test2 as std::ops::Rem<&mut macros::Test2>>::Output":["rem"],"<&'a macros::Test2 as std::ops::Rem<macros::Test2>>::Output":["rem"],"<&'a macros::Test2 as std::ops::Shl<&macros::Test2>>::Output":["shl"],"<&'a macros::Test2 as std::ops::Shl<&mut macros::Test2>>::Output":["shl"],"<&'a macros::Test2 as std::ops::Shl<macros::Test2>>::Output":["shl"],"<&'a macros::Test2 as std::ops::Shr<&macros::Test2>>::Output":["shr"],"<&'a macros::Test2 as std::ops::Shr<&mut macros::Test2>>::Output":["shr"],"<&'a macros::Test2 as std::ops::Shr<macros::Test2>>::Output":["shr"],"<&'a macros::Test2 as std::ops::Sub<&macros::Test2>>::Output":["sub"],"<&'a macros::Test2 as std::ops::Sub<&mut macros::Test2>>::Output":["sub"],"<&'a macros::Test2 as std::ops::Sub<macros::Test2>>::Output":["sub"],"<&'a mut macros::Test as std::ops::Add<&macros::Test>>::Output":["add"],"<&'a mut macros::Test as std::ops::Add<&mut macros::Test>>::Output":["add"],"<&'a mut macros::Test as std::ops::Add<macros::Test>>::Output":["add"],"<&'a mut macros::Test as std::ops::BitAnd<&macros::Test>>::Output":["bitand"],"<&'a mut macros::Test as std::ops::BitAnd<&mut macros::Test>>::Output":["bitand"],"<&'a mut macros::Test as std::ops::BitAnd<macros::Test>>::Output":["bitand"],"<&'a mut macros::Test as std::ops::BitOr<&macros::Test>>::Output":["bitor"],"<&'a mut macros::Test as std::ops::BitOr<&mut macros::Test>>::Output":["bitor"],"<&'a mut macros::Test as std::ops::BitOr<macros::Test>>::Output":["bitor"],"<&'a mut macros::Test as std::ops::BitXor<&macros::Test>>::Output":["bitxor"],"<&'a mut macros::Test as std::ops::BitXor<&mut macros::Test>>::Output":["bitxor"],"<&'a mut macros::Test as std::ops::BitXor<macros::Test>>::Output":["bitxor"],"<&'a mut macros::Test as std::ops::Div<&macros::Test>>::Output":["div"],"<&'a mut macros::Test as std::ops::Div<&mut macros::Test>>::Output":["div"],"<&'a mut macros::Test as std::ops::Div<macros::Test>>::Output":["div"],"<&'a mut macros::Test as std::ops::Mul<&macros::Test>>::Output":["mul"],"<&'a mut macros::Test as std::ops::Mul<&mut macros::Test>>::Output":["mul"],"<&'a mut macros::Test as std::ops::Mul<macros::Test>>::Output":["mul"],"<&'a mut macros::Test as std::ops::Rem<&macros::Test>>::Output":["rem"],"<&'a mut macros::Test as std::ops::Rem<&mut macros::Test>>::Output":["rem"],"<&'a mut macros::Test as std::ops::Rem<macros::Test>>::Output":["rem"],"<&'a mut macros::Test as std::ops::Shl<&macros::Test>>::Output":["shl"],"<&'a mut macros::Test as std::ops::Shl<&mut macros::Test>>::Output":["shl"],"<&'a mut macros::Test as std::ops::Shl<macros::Test>>::Output":["shl"],"<&'a mut macros::Test as std::ops::Shr<&macros::Test>>::Output":["shr"],"<&'a mut macros::Test as std::ops::Shr<&mut macros::Test>>::Output":["shr"],"<&'a mut macros::Test as std::ops::Shr<macros::Test>>::Output":["shr"],"<&'a mut macros::Test as std::ops::Sub<&macros::Test>>::Output":["sub"],"<&'a mut macros::Test as std::ops::Sub<&mut macros::Test>>::Output":["sub"],"<&'a mut macros::Test as std::ops::Sub<macros::Test>>::Output":["sub"],"<&'a mut macros::Test2 as std::ops::Add<&macros::Test2>>::Output":["add"],"<&'a mut macros::Test2 as std::ops::Add<&mut macros::Test2>>::Output":["add"],"<&'a mut macros::Test2 as std::ops::Add<macros::Test2>>::Output":["add"],"<&'a mut macros::Test2 as std::ops::BitAnd<&macros::Test2>>::Output":["bitand"],"<&'a mut macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::Output":["bitand"],"<&'a mut macros::Test2 as std::ops::BitAnd<macros::Test2>>::Output":["bitand"],"<&'a mut macros::Test2 as std::ops::BitOr<&macros::Test2>>::Output":["bitor"],"<&'a mut macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::Output":["bitor"],"<&'a mut macros::Test2 as std::ops::BitOr<macros::Test2>>::Output":["bitor"],"<&'a mut macros::Test2 as std::ops::BitXor<&macros::Test2>>::Output":["bitxor"],"<&'a mut macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::Output":["bitxor"],"<&'a mut macros::Test2 as std::ops::BitXor<macros::Test2>>::Output":["bitxor"],"<&'a mut macros::Test2 as std::ops::Div<&macros::Test2>>::Output":["div"],"<&'a mut macros::Test2 as std::ops::Div<&mut macros::Test2>>::Output":["div"],"<&'a mut macros::Test2 as std::ops::Div<macros::Test2>>::Output":["div"],"<&'a mut macros::Test2 as std::ops::Mul<&macros::Test2>>::Output":["mul"],"<&'a mut macros::Test2 as std::ops::Mul<&mut macros::Test2>>::Output":["mul"],"<&'a mut macros::Test2 as std::ops::Mul<macros::Test2>>::Output":["mul"],"<&'a mut macros::Test2 as std::ops::Rem<&macros::Test2>>::Output":["rem"],"<&'a mut macros::Test2 as std::ops::Rem<&mut macros::Test2>>::Output":["rem"],"<&'a mut macros::Test2 as std::ops::Rem<macros::Test2>>::Output":["rem"],"<&'a mut macros::Test2 as std::ops::Shl<&macros::Test2>>::Output":["shl"],"<&'a mut macros::Test2 as std::ops::Shl<&mut macros::Test2>>::Output":["shl"],"<&'a mut macros::Test2 as std::ops::Shl<macros::Test2>>::Output":["shl"],"<&'a mut macros::Test2 as std::ops::Shr<&macros::Test2>>::Output":["shr"],"<&'a mut macros::Test2 as std::ops::Shr<&mut macros::Test2>>::Output":["shr"],"<&'a mut macros::Test2 as std::ops::Shr<macros::Test2>>::Output":["shr"],"<&'a mut macros::Test2 as std::ops::Sub<&macros::Test2>>::Output":["sub"],"<&'a mut macros::Test2 as std::ops::Sub<&mut macros::Test2>>::Output":["sub"],"<&'a mut macros::Test2 as std::ops::Sub<macros::Test2>>::Output":["sub"],"<(T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::Dest":["as_array"],"<(T,) as imp::tuple::AsArray>::Dest":["as_array"],"<Self as imp::tuple::AsArray>::Dest":["as_array"],"<Self as imp::tuple::AsTuple>::Dest":["as_tuple"],"<[T; 32] as imp::tuple::AsTuple>::Dest":["as_tuple"],"<[T; _] as imp::tuple::AsTuple>::Dest":["as_tuple"],"<macros::Test as std::ops::Add<&macros::Test>>::Output":["add"],"<macros::Test as std::ops::Add<&mut macros::Test>>::Output":["add"],"<macros::Test as std::ops::Add>::Output":["add"],"<macros::Test as std::ops::BitAnd<&macros::Test>>::Output":["bitand"],"<macros::Test as std::ops::BitAnd<&mut macros::Test>>::Output":["bitand"],"<macros::Test as std::ops::BitAnd>::Output":["bitand"],"<macros::Test as std::ops::BitOr<&macros::Test>>::Output":["bitor"],"<macros::Test as std::ops::BitOr<&mut macros::Test>>::Output":["bitor"],"<macros::Test as std::ops::BitOr>::Output":["bitor"],"<macros::Test as std::ops::BitXor<&macros::Test>>::Output":["bitxor"],"<macros::Test as std::ops::BitXor<&mut macros::Test>>::Output":["bitxor"],"<macros::Test as std::ops::BitXor>::Output":["bitxor"],"<macros::Test as std::ops::Div<&macros::Test>>::Output":["div"],"<macros::Test as std::ops::Div<&mut macros::Test>>::Output":["div"],"<macros::Test as std::ops::Div>::Output":["div"],"<macros::Test as std::ops::Mul<&macros::Test>>::Output":["mul"],"<macros::Test as std::ops::Mul<&mut macros::Test>>::Output":["mul"],"<macros::Test as std::ops::Mul>::Output":["mul"],"<macros::Test as std::ops::Rem<&macros::Test>>::Output":["rem"],"<macros::Test as std::ops::Rem<&mut macros::Test>>::Output":["rem"],"<macros::Test as std::ops::Rem>::Output":["rem"],"<macros::Test as std::ops::Shl<&macros::Test>>::Output":["shl"],"<macros::Test as std::ops::Shl<&mut macros::Test>>::Output":["shl"],"<macros::Test as std::ops::Shl>::Output":["shl"],"<macros::Test as std::ops::Shr<&macros::Test>>::Output":["shr"],"<macros::Test as std::ops::Shr<&mut macros::Test>>::Output":["shr"],"<macros::Test as std::ops::Shr>::Output":["shr"],"<macros::Test as std::ops::Sub<&macros::Test>>::Output":["sub"],"<macros::Test as std::ops::Sub<&mut macros::Test>>::Output":["sub"],"<macros::Test as std::ops::Sub>::Output":["sub"],"<macros::Test2 as std::ops::Add<&macros::Test2>>::Output":["add"],"<macros::Test2 as std::ops::Add<&mut macros::Test2>>::Output":["add"],"<macros::Test2 as std::ops::Add>::Output":["add"],"<macros::Test2 as std::ops::BitAnd<&macros::Test2>>::Output":["bitand"],"<macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::Output":["bitand"],"<macros::Test2 as std::ops::BitAnd>::Output":["bitand"],"<macros::Test2 as std::ops::BitOr<&macros::Test2>>::Output":["bitor"],"<macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::Output":["bitor"],"<macros::Test2 as std::ops::BitOr>::Output":["bitor"],"<macros::Test2 as std::ops::BitXor<&macros::Test2>>::Output":["bitxor"],"<macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::Output":["bitxor"],"<macros::Test2 as std::ops::BitXor>::Output":["bitxor"],"<macros::Test2 as std::ops::Div<&macros::Test2>>::Output":["div"],"<macros::Test2 as std::ops::Div<&mut macros::Test2>>::Output":["div"],"<macros::Test2 as std::ops::Div>::Output":["div"],"<macros::Test2 as std::ops::Mul<&macros::Test2>>::Output":["mul"],"<macros::Test2 as std::ops::Mul<&mut macros::Test2>>::Output":["mul"],"<macros::Test2 as std::ops::Mul>::Output":["mul"],"<macros::Test2 as std::ops::Rem<&macros::Test2>>::Output":["rem"],"<macros::Test2 as std::ops::Rem<&mut macros::Test2>>::Output":["rem"],"<macros::Test2 as std::ops::Rem>::Output":["rem"],"<macros::Test2 as std::ops::Shl<&macros::Test2>>::Output":["shl"],"<macros::Test2 as std::ops::Shl<&mut macros::Test2>>::Output":["shl"],"<macros::Test2 as std::ops::Shl>::Output":["shl"],"<macros::Test2 as std::ops::Shr<&macros::Test2>>::Output":["shr"],"<macros::Test2 as std::ops::Shr<&mut macros::Test2>>::Output":["shr"],"<macros::Test2 as std::ops::Shr>::Output":["shr"],"<macros::Test2 as std::ops::Sub<&macros::Test2>>::Output":["sub"],"<macros::Test2 as std::ops::Sub<&mut macros::Test2>>::Output":["sub"],"<macros::Test2 as std::ops::Sub>::Output":["sub"],"arc_slice::ArcSlice":["clone","default","extracted","extracted_with_capacity","from","new","refc","slice","split_off","with_capacity"],"bool":["_is_empty","compact","eq","is_empty","is_unsliced"],"macros::Test":["clone"],"macros::Test2":["clone"],"std::boxed::Box":["refc"],"std::cmp::Ordering":["cmp","partial_cmp"],"std::ops::Range":["slice_slice"],"std::rc::Rc":["refc"],"std::slice::Iter":["into_iter"],"std::slice::IterMut":["into_iter"],"std::sync::Arc":["refc"],"std::vec::IntoIter":["into_iter"],"std::vec::Vec":["extract","extract_with_capacity","into"],"usize":["len","write","write_vectored"]},"struct_to_trait":{"<T as from_into::FromInto<U>>::T":["from_into::FromInto"],"arc_slice::ArcSlice":["refc::RefClonable","std::borrow::Borrow","std::borrow::BorrowMut","std::clone::Clone","std::cmp::Eq","std::cmp::Ord","std::cmp::PartialEq","std::cmp::PartialOrd","std::convert::AsMut","std::convert::AsRef","std::convert::From","std::convert::Into","std::default::Default","std::fmt::Debug","std::hash::Hash","std::io::Write","std::iter::Extend","std::iter::IntoIterator","std::ops::Deref","std::ops::DerefMut"],"macros::Test":["std::clone::Clone","std::ops::Add","std::ops::AddAssign","std::ops::BitAnd","std::ops::BitAndAssign","std::ops::BitOr","std::ops::BitOrAssign","std::ops::BitXor","std::ops::BitXorAssign","std::ops::Div","std::ops::DivAssign","std::ops::Mul","std::ops::MulAssign","std::ops::Rem","std::ops::RemAssign","std::ops::Shl","std::ops::ShlAssign","std::ops::Shr","std::ops::ShrAssign","std::ops::Sub","std::ops::SubAssign"],"macros::Test2":["std::clone::Clone","std::ops::Add","std::ops::AddAssign","std::ops::BitAnd","std::ops::BitAndAssign","std::ops::BitOr","std::ops::BitOrAssign","std::ops::BitXor","std::ops::BitXorAssign","std::ops::Div","std::ops::DivAssign","std::ops::Mul","std::ops::MulAssign","std::ops::Rem","std::ops::RemAssign","std::ops::Shl","std::ops::ShlAssign","std::ops::Shr","std::ops::ShrAssign","std::ops::Sub","std::ops::SubAssign"],"std::borrow::Cow":["scoped::ScopedMut"],"std::boxed::Box":["refc::RefClonable","scoped::Interior","scoped::ScopedMut"],"std::cell::RefCell":["scoped::Interior","scoped::ScopedMut"],"std::collections::HashMap":["not_empty::NotEmpty"],"std::collections::HashSet":["not_empty::NotEmpty"],"std::option::Option":["imp::option::OptionExt"],"std::rc::Rc":["refc::RefClonable","scoped::Interior","scoped::ScopedMut"],"std::result::Result":["imp::result::ResultNonDebugUnwrap"],"std::string::String":["not_empty::NotEmpty"],"std::sync::Arc":["refc::RefClonable","scoped::Interior","scoped::ScopedMut"],"std::sync::RwLock":["scoped::Interior","scoped::ScopedMut"],"std::vec::Vec":["imp::vec::VecExt","not_empty::NotEmpty"]},"targets":{"<&'a arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["into_iter","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::iter::IntoIterator"],"<&'a macros::Test as std::ops::Add<&macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test as std::ops::Add<&mut macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test as std::ops::Add<macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test as std::ops::BitOr<macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test as std::ops::Div<&macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test as std::ops::Div<&mut macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test as std::ops::Div<macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test as std::ops::Mul<&macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test as std::ops::Mul<macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test as std::ops::Rem<&macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test as std::ops::Rem<macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test as std::ops::Shl<&macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test as std::ops::Shl<macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test as std::ops::Shr<&macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test as std::ops::Shr<macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test as std::ops::Sub<&macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a macros::Test as std::ops::Sub<macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a macros::Test2 as std::ops::Add<&macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test2 as std::ops::Add<macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a macros::Test2 as std::ops::Div<&macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test2 as std::ops::Div<macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["into_iter","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::iter::IntoIterator"],"<&'a mut macros::Test as std::ops::Add<&macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test as std::ops::Add<&mut macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test as std::ops::Add<macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test as std::ops::AddAssign<macros::Test>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test as std::ops::BitAnd<macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test as std::ops::BitAndAssign<macros::Test>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test as std::ops::BitOr<macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test as std::ops::BitOrAssign<macros::Test>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test as std::ops::BitXor<macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test as std::ops::BitXorAssign<macros::Test>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test as std::ops::Div<&macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test as std::ops::Div<&mut macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test as std::ops::Div<macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test as std::ops::DivAssign<macros::Test>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test as std::ops::Mul<&macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test as std::ops::Mul<macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test as std::ops::MulAssign<macros::Test>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test as std::ops::Rem<&macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test as std::ops::Rem<macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test as std::ops::RemAssign<macros::Test>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test as std::ops::Shl<&macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test as std::ops::Shl<macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test as std::ops::ShlAssign<macros::Test>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test as std::ops::Shr<&macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test as std::ops::Shr<macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test as std::ops::ShrAssign<macros::Test>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test as std::ops::Sub<&macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test as std::ops::Sub<macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&'a mut macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&'a mut macros::Test as std::ops::SubAssign<macros::Test>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&'a mut macros::Test2 as std::ops::Add<&macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test2 as std::ops::Add<macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<&'a mut macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test2 as std::ops::AddAssign<macros::Test2>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<&'a mut macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test2 as std::ops::BitAnd<macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test2 as std::ops::BitAndAssign<macros::Test2>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<&'a mut macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test2 as std::ops::BitOr<macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test2 as std::ops::BitOrAssign<macros::Test2>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<&'a mut macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test2 as std::ops::BitXor<macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test2 as std::ops::BitXorAssign<macros::Test2>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<&'a mut macros::Test2 as std::ops::Div<&macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test2 as std::ops::Div<macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<&'a mut macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test2 as std::ops::DivAssign<macros::Test2>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<&'a mut macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test2 as std::ops::Mul<macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<&'a mut macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test2 as std::ops::MulAssign<macros::Test2>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<&'a mut macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test2 as std::ops::Rem<macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<&'a mut macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test2 as std::ops::RemAssign<macros::Test2>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<&'a mut macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test2 as std::ops::Shl<macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test2 as std::ops::ShlAssign<macros::Test2>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<&'a mut macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test2 as std::ops::Shr<macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test2 as std::ops::ShrAssign<macros::Test2>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<&'a mut macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test2 as std::ops::Sub<macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<&'a mut macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&'a mut macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&'a mut macros::Test2 as std::ops::SubAssign<macros::Test2>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<&arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["into","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::Into"],"<&mut arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["into","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::Into"],"<&mut std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&mut std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&mut std::string::String as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&mut std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&mut str as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&std::string::String as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<&str as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<(T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<(T,) as imp::tuple::AsArray>::as_array":["as_array","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsArray"],"<(T,) as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<T as from_into::FromInto<U>>::qfrom":["qfrom","Real(LocalPath(\"src/from_into.rs\"))","from_into::FromInto"],"<T as from_into::FromInto<U>>::qinto":["qinto","Real(LocalPath(\"src/from_into.rs\"))","from_into::FromInto"],"<[T; 32] as imp::tuple::AsTuple>::as_tuple":["as_tuple","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsTuple"],"<[T; 32] as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<[T; _] as imp::tuple::AsTuple>::as_tuple":["as_tuple","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::AsTuple"],"<[T; _] as imp::tuple::TupleFns<T>>::avg":["avg","Real(LocalPath(\"src/imp/tuple.rs\"))","imp::tuple::TupleFns"],"<arc_slice::ArcSlice<T> as refc::RefClonable>::refc":["refc","Real(LocalPath(\"src/arc_slice/mod.rs\"))","refc::RefClonable"],"<arc_slice::ArcSlice<T> as std::borrow::Borrow<[T]>>::borrow":["borrow","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::borrow::Borrow"],"<arc_slice::ArcSlice<T> as std::borrow::BorrowMut<[T]>>::borrow_mut":["borrow_mut","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::borrow::BorrowMut"],"<arc_slice::ArcSlice<T> as std::clone::Clone>::clone":["clone","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::clone::Clone"],"<arc_slice::ArcSlice<T> as std::cmp::Ord>::cmp":["cmp","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::cmp::Ord"],"<arc_slice::ArcSlice<T> as std::cmp::PartialEq<O>>::eq":["eq","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::cmp::PartialEq"],"<arc_slice::ArcSlice<T> as std::cmp::PartialOrd>::partial_cmp":["partial_cmp","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::cmp::PartialOrd"],"<arc_slice::ArcSlice<T> as std::convert::AsMut<[T]>>::as_mut":["as_mut","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::AsMut"],"<arc_slice::ArcSlice<T> as std::convert::AsRef<[T]>>::as_ref":["as_ref","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::AsRef"],"<arc_slice::ArcSlice<T> as std::convert::From<&[T]>>::from":["from","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::From"],"<arc_slice::ArcSlice<T> as std::convert::Into<std::vec::Vec<T>>>::into":["into","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::convert::Into"],"<arc_slice::ArcSlice<T> as std::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::fmt::Debug"],"<arc_slice::ArcSlice<T> as std::hash::Hash>::hash":["hash","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::hash::Hash"],"<arc_slice::ArcSlice<T> as std::iter::Extend<&'a T>>::extend":["extend","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::iter::Extend"],"<arc_slice::ArcSlice<T> as std::iter::Extend<T>>::extend":["extend","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::iter::Extend"],"<arc_slice::ArcSlice<T> as std::iter::IntoIterator>::into_iter":["into_iter","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::iter::IntoIterator"],"<arc_slice::ArcSlice<T> as std::ops::Deref>::deref":["deref","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::ops::Deref"],"<arc_slice::ArcSlice<T> as std::ops::DerefMut>::deref_mut":["deref_mut","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::ops::DerefMut"],"<arc_slice::ArcSlice<u8> as std::io::Write>::flush":["flush","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::io::Write"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write":["write","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::io::Write"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_all":["write_all","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::io::Write"],"<arc_slice::ArcSlice<u8> as std::io::Write>::write_vectored":["write_vectored","Real(LocalPath(\"src/arc_slice/mod.rs\"))","std::io::Write"],"<bool as imp::boolext::BoolExtOption>::option":["option","Real(LocalPath(\"src/imp/boolext.rs\"))","imp::boolext::BoolExtOption"],"<bool as imp::boolext::BoolExtOption>::result":["result","Real(LocalPath(\"src/imp/boolext.rs\"))","imp::boolext::BoolExtOption"],"<i128 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<i16 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<i32 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<i64 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<i8 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<isize as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<macros::Test as std::ops::Add<&macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test as std::ops::Add<&mut macros::Test>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test as std::ops::Add>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test as std::ops::AddAssign<&macros::Test>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test as std::ops::AddAssign<&mut macros::Test>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test as std::ops::AddAssign>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test as std::ops::BitAnd<&macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test as std::ops::BitAnd<&mut macros::Test>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test as std::ops::BitAnd>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test as std::ops::BitAndAssign<&macros::Test>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test as std::ops::BitAndAssign<&mut macros::Test>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test as std::ops::BitAndAssign>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test as std::ops::BitOr<&macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test as std::ops::BitOr<&mut macros::Test>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test as std::ops::BitOr>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test as std::ops::BitOrAssign<&macros::Test>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test as std::ops::BitOrAssign<&mut macros::Test>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test as std::ops::BitOrAssign>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test as std::ops::BitXor<&macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test as std::ops::BitXor<&mut macros::Test>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test as std::ops::BitXor>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test as std::ops::BitXorAssign<&macros::Test>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test as std::ops::BitXorAssign<&mut macros::Test>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test as std::ops::BitXorAssign>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test as std::ops::Div<&macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test as std::ops::Div<&mut macros::Test>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test as std::ops::Div>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test as std::ops::DivAssign<&macros::Test>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test as std::ops::DivAssign<&mut macros::Test>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test as std::ops::DivAssign>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test as std::ops::Mul<&macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test as std::ops::Mul<&mut macros::Test>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test as std::ops::Mul>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test as std::ops::MulAssign<&macros::Test>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test as std::ops::MulAssign<&mut macros::Test>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test as std::ops::MulAssign>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test as std::ops::Rem<&macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test as std::ops::Rem<&mut macros::Test>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test as std::ops::Rem>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test as std::ops::RemAssign<&macros::Test>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test as std::ops::RemAssign<&mut macros::Test>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test as std::ops::RemAssign>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test as std::ops::Shl<&macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test as std::ops::Shl<&mut macros::Test>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test as std::ops::Shl>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test as std::ops::ShlAssign<&macros::Test>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test as std::ops::ShlAssign<&mut macros::Test>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test as std::ops::ShlAssign>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test as std::ops::Shr<&macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test as std::ops::Shr<&mut macros::Test>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test as std::ops::Shr>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test as std::ops::ShrAssign<&macros::Test>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test as std::ops::ShrAssign<&mut macros::Test>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test as std::ops::ShrAssign>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test as std::ops::Sub<&macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test as std::ops::Sub<&mut macros::Test>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test as std::ops::Sub>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test as std::ops::SubAssign<&macros::Test>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<macros::Test as std::ops::SubAssign<&mut macros::Test>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<macros::Test as std::ops::SubAssign>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<macros::Test2 as std::ops::Add<&macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test2 as std::ops::Add<&mut macros::Test2>>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test2 as std::ops::Add>::add":["add","Real(LocalPath(\"src/macros.rs\"))","std::ops::Add"],"<macros::Test2 as std::ops::AddAssign<&macros::Test2>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test2 as std::ops::AddAssign<&mut macros::Test2>>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test2 as std::ops::AddAssign>::add_assign":["add_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::AddAssign"],"<macros::Test2 as std::ops::BitAnd<&macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test2 as std::ops::BitAnd<&mut macros::Test2>>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test2 as std::ops::BitAnd>::bitand":["bitand","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAnd"],"<macros::Test2 as std::ops::BitAndAssign<&macros::Test2>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test2 as std::ops::BitAndAssign<&mut macros::Test2>>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test2 as std::ops::BitAndAssign>::bitand_assign":["bitand_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitAndAssign"],"<macros::Test2 as std::ops::BitOr<&macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test2 as std::ops::BitOr<&mut macros::Test2>>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test2 as std::ops::BitOr>::bitor":["bitor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOr"],"<macros::Test2 as std::ops::BitOrAssign<&macros::Test2>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test2 as std::ops::BitOrAssign<&mut macros::Test2>>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test2 as std::ops::BitOrAssign>::bitor_assign":["bitor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitOrAssign"],"<macros::Test2 as std::ops::BitXor<&macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test2 as std::ops::BitXor<&mut macros::Test2>>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test2 as std::ops::BitXor>::bitxor":["bitxor","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXor"],"<macros::Test2 as std::ops::BitXorAssign<&macros::Test2>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test2 as std::ops::BitXorAssign<&mut macros::Test2>>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test2 as std::ops::BitXorAssign>::bitxor_assign":["bitxor_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::BitXorAssign"],"<macros::Test2 as std::ops::Div<&macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test2 as std::ops::Div<&mut macros::Test2>>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test2 as std::ops::Div>::div":["div","Real(LocalPath(\"src/macros.rs\"))","std::ops::Div"],"<macros::Test2 as std::ops::DivAssign<&macros::Test2>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test2 as std::ops::DivAssign<&mut macros::Test2>>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test2 as std::ops::DivAssign>::div_assign":["div_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::DivAssign"],"<macros::Test2 as std::ops::Mul<&macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test2 as std::ops::Mul<&mut macros::Test2>>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test2 as std::ops::Mul>::mul":["mul","Real(LocalPath(\"src/macros.rs\"))","std::ops::Mul"],"<macros::Test2 as std::ops::MulAssign<&macros::Test2>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test2 as std::ops::MulAssign<&mut macros::Test2>>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test2 as std::ops::MulAssign>::mul_assign":["mul_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::MulAssign"],"<macros::Test2 as std::ops::Rem<&macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test2 as std::ops::Rem<&mut macros::Test2>>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test2 as std::ops::Rem>::rem":["rem","Real(LocalPath(\"src/macros.rs\"))","std::ops::Rem"],"<macros::Test2 as std::ops::RemAssign<&macros::Test2>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test2 as std::ops::RemAssign<&mut macros::Test2>>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test2 as std::ops::RemAssign>::rem_assign":["rem_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::RemAssign"],"<macros::Test2 as std::ops::Shl<&macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test2 as std::ops::Shl<&mut macros::Test2>>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test2 as std::ops::Shl>::shl":["shl","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shl"],"<macros::Test2 as std::ops::ShlAssign<&macros::Test2>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test2 as std::ops::ShlAssign<&mut macros::Test2>>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test2 as std::ops::ShlAssign>::shl_assign":["shl_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShlAssign"],"<macros::Test2 as std::ops::Shr<&macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test2 as std::ops::Shr<&mut macros::Test2>>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test2 as std::ops::Shr>::shr":["shr","Real(LocalPath(\"src/macros.rs\"))","std::ops::Shr"],"<macros::Test2 as std::ops::ShrAssign<&macros::Test2>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test2 as std::ops::ShrAssign<&mut macros::Test2>>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test2 as std::ops::ShrAssign>::shr_assign":["shr_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::ShrAssign"],"<macros::Test2 as std::ops::Sub<&macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test2 as std::ops::Sub<&mut macros::Test2>>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test2 as std::ops::Sub>::sub":["sub","Real(LocalPath(\"src/macros.rs\"))","std::ops::Sub"],"<macros::Test2 as std::ops::SubAssign<&macros::Test2>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<macros::Test2 as std::ops::SubAssign<&mut macros::Test2>>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<macros::Test2 as std::ops::SubAssign>::sub_assign":["sub_assign","Real(LocalPath(\"src/macros.rs\"))","std::ops::SubAssign"],"<std::collections::HashMap<K, V> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<std::collections::HashSet<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to":["add_to","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_if":["add_to_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::add_to_lossy":["add_to_lossy","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to":["div_to","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_if":["div_to_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::div_to_lossy":["div_to_lossy","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to":["mul_to","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_if":["mul_to_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::mul_to_lossy":["mul_to_lossy","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to":["sub_to","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_if":["sub_to_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::sub_to_lossy":["sub_to_lossy","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with":["with","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_if":["with_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut":["with_mut","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if":["with_mut_if","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::option::Option<T> as imp::option::OptionExt<T>>::with_mut_if_saturating":["with_mut_if_saturating","Real(LocalPath(\"src/imp/option.rs\"))","imp::option::OptionExt"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_err_nodebug":["expect_err_nodebug","Real(LocalPath(\"src/imp/result.rs\"))","imp::result::ResultNonDebugUnwrap"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::expect_nodebug":["expect_nodebug","Real(LocalPath(\"src/imp/result.rs\"))","imp::result::ResultNonDebugUnwrap"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_err_nodebug":["unwrap_err_nodebug","Real(LocalPath(\"src/imp/result.rs\"))","imp::result::ResultNonDebugUnwrap"],"<std::result::Result<T, E> as imp::result::ResultNonDebugUnwrap<T, E>>::unwrap_nodebug":["unwrap_nodebug","Real(LocalPath(\"src/imp/result.rs\"))","imp::result::ResultNonDebugUnwrap"],"<std::string::String as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::extend_from_slice_copy":["extend_from_slice_copy","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to":["grow_to","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_default":["grow_to_default","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::grow_to_with":["grow_to_with","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_clone":["insert_slice_clone","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::insert_slice_copy":["insert_slice_copy","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as imp::vec::VecExt<T>>::push_option":["push_option","Real(LocalPath(\"src/imp/vec.rs\"))","imp::vec::VecExt"],"<std::vec::Vec<T> as not_empty::NotEmpty>::_is_empty":["_is_empty","Real(LocalPath(\"src/not_empty.rs\"))","not_empty::NotEmpty"],"<u128 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<u16 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<u32 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<u64 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<u8 as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"<usize as imp::numext::DivOrNop>::div_or_nop":["div_or_nop","Real(LocalPath(\"src/imp/numext.rs\"))","imp::numext::DivOrNop"],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut":["_make_mut","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted":["_make_mut_extracted","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_extracted_with_capacity":["_make_mut_extracted_with_capacity","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::_make_mut_with_capacity":["_make_mut_with_capacity","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::append":["append","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::clear":["clear","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::compact":["compact","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extend_from_slice":["extend_from_slice","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract":["extract","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extract_with_capacity":["extract_with_capacity","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted":["extracted","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::extracted_with_capacity":["extracted_with_capacity","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert":["insert","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::insert_slice":["insert_slice","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_empty":["is_empty","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::is_unsliced":["is_unsliced","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::len":["len","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::new":["new","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::pop":["pop","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::push":["push","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::remove":["remove","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize":["resize","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_default":["resize_default","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::resize_with":["resize_with","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::retain":["retain","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::slice":["slice","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_at":["split_at","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::split_off":["split_off","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::swap_remove":["swap_remove","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::truncate":["truncate","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl arc_slice::ArcSlice<T>>::with_capacity":["with_capacity","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"arc_slice::imp::<impl std::convert::From<std::sync::Arc<std::vec::Vec<T>>> for arc_slice::ArcSlice<T>>::from":["from","Real(LocalPath(\"src/arc_slice/imp.rs\"))","std::convert::From"],"arc_slice::imp::<impl std::convert::From<std::vec::Vec<T>> for arc_slice::ArcSlice<T>>::from":["from","Real(LocalPath(\"src/arc_slice/imp.rs\"))","std::convert::From"],"arc_slice::imp::<impl std::default::Default for arc_slice::ArcSlice<T>>::default":["default","Real(LocalPath(\"src/arc_slice/imp.rs\"))","std::default::Default"],"arc_slice::imp::slice_slice":["slice_slice","Real(LocalPath(\"src/arc_slice/imp.rs\"))",""],"if_type::if_type":["if_type","Real(LocalPath(\"src/if_type.rs\"))",""],"imp::boolext::BoolExtOption::map":["map","Real(LocalPath(\"src/imp/boolext.rs\"))",""],"imp::boolext::BoolExtOption::map_or":["map_or","Real(LocalPath(\"src/imp/boolext.rs\"))",""],"imp::boolext::BoolExtOption::map_or_else":["map_or_else","Real(LocalPath(\"src/imp/boolext.rs\"))",""],"imp::boolext::BoolExtOption::map_or_err":["map_or_err","Real(LocalPath(\"src/imp/boolext.rs\"))",""],"imp::option::flatten":["flatten","Real(LocalPath(\"src/imp/option.rs\"))",""],"imp::result::unwrap_failed":["unwrap_failed","Real(LocalPath(\"src/imp/result.rs\"))",""],"not_empty::NotEmpty::not_empty":["not_empty","Real(LocalPath(\"src/not_empty.rs\"))",""],"refc::imp::<impl refc::RefClonable for std::boxed::Box<T>>::refc":["refc","Real(LocalPath(\"src/refc/imp.rs\"))","refc::RefClonable"],"refc::imp::<impl refc::RefClonable for std::rc::Rc<T>>::refc":["refc","Real(LocalPath(\"src/refc/imp.rs\"))","refc::RefClonable"],"refc::imp::<impl refc::RefClonable for std::sync::Arc<T>>::refc":["refc","Real(LocalPath(\"src/refc/imp.rs\"))","refc::RefClonable"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for &'a C>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for &'a mut C>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::boxed::Box<C>>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::cell::RefCell<S>>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::rc::Rc<C>>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::sync::Arc<C>>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access":["interior_access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::Interior for std::sync::RwLock<S>>::interior_access_mut":["interior_access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::Interior"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access":["access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::cell::RefCell<S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access":["access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::rc::Rc<S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access":["access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::Arc<S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access":["access","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::interior::<impl scoped::ScopedMut for std::sync::RwLock<S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/interior.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access":["access","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for &'a mut S>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access":["access","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::borrow::Cow<'_, S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access":["access","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"],"scoped::imp::scoped::<impl scoped::ScopedMut for std::boxed::Box<S>>::access_mut":["access_mut","Real(LocalPath(\"src/scoped/imp/scoped.rs\"))","scoped::ScopedMut"]},"trait_to_struct":{"from_into::FromInto":["<T as from_into::FromInto<U>>::T"],"imp::option::OptionExt":["std::option::Option"],"imp::result::ResultNonDebugUnwrap":["std::result::Result"],"imp::vec::VecExt":["std::vec::Vec"],"not_empty::NotEmpty":["std::collections::HashMap","std::collections::HashSet","std::string::String","std::vec::Vec"],"refc::RefClonable":["arc_slice::ArcSlice","std::boxed::Box","std::rc::Rc","std::sync::Arc"],"scoped::Interior":["std::boxed::Box","std::cell::RefCell","std::rc::Rc","std::sync::Arc","std::sync::RwLock"],"scoped::ScopedMut":["std::borrow::Cow","std::boxed::Box","std::cell::RefCell","std::rc::Rc","std::sync::Arc","std::sync::RwLock"],"std::borrow::Borrow":["arc_slice::ArcSlice"],"std::borrow::BorrowMut":["arc_slice::ArcSlice"],"std::clone::Clone":["arc_slice::ArcSlice","macros::Test","macros::Test2"],"std::cmp::Eq":["arc_slice::ArcSlice"],"std::cmp::Ord":["arc_slice::ArcSlice"],"std::cmp::PartialEq":["arc_slice::ArcSlice"],"std::cmp::PartialOrd":["arc_slice::ArcSlice"],"std::convert::AsMut":["arc_slice::ArcSlice"],"std::convert::AsRef":["arc_slice::ArcSlice"],"std::convert::From":["arc_slice::ArcSlice"],"std::convert::Into":["arc_slice::ArcSlice"],"std::default::Default":["arc_slice::ArcSlice"],"std::fmt::Debug":["arc_slice::ArcSlice"],"std::hash::Hash":["arc_slice::ArcSlice"],"std::io::Write":["arc_slice::ArcSlice"],"std::iter::Extend":["arc_slice::ArcSlice"],"std::iter::IntoIterator":["arc_slice::ArcSlice"],"std::ops::Add":["macros::Test","macros::Test2"],"std::ops::AddAssign":["macros::Test","macros::Test2"],"std::ops::BitAnd":["macros::Test","macros::Test2"],"std::ops::BitAndAssign":["macros::Test","macros::Test2"],"std::ops::BitOr":["macros::Test","macros::Test2"],"std::ops::BitOrAssign":["macros::Test","macros::Test2"],"std::ops::BitXor":["macros::Test","macros::Test2"],"std::ops::BitXorAssign":["macros::Test","macros::Test2"],"std::ops::Deref":["arc_slice::ArcSlice"],"std::ops::DerefMut":["arc_slice::ArcSlice"],"std::ops::Div":["macros::Test","macros::Test2"],"std::ops::DivAssign":["macros::Test","macros::Test2"],"std::ops::Mul":["macros::Test","macros::Test2"],"std::ops::MulAssign":["macros::Test","macros::Test2"],"std::ops::Rem":["macros::Test","macros::Test2"],"std::ops::RemAssign":["macros::Test","macros::Test2"],"std::ops::Shl":["macros::Test","macros::Test2"],"std::ops::ShlAssign":["macros::Test","macros::Test2"],"std::ops::Shr":["macros::Test","macros::Test2"],"std::ops::ShrAssign":["macros::Test","macros::Test2"],"std::ops::Sub":["macros::Test","macros::Test2"],"std::ops::SubAssign":["macros::Test","macros::Test2"]},"type_to_def_path":{"arc_slice::ArcSlice<T>":"arc_slice::ArcSlice","macros::Test":"macros::Test","macros::Test2":"macros::Test2"}}