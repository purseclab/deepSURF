-----------------
src/header/map.rs header::map::do_insert_phase_two
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // [header::map::Pos]
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // header::map::Pos
+header::map::do_insert_phase_two(p0, p1, p2);
+crate::header::map::do_insert_phase_two(p0, p1, p2);
+crate::header::map::do_insert_phase_two(p0, p1, p2);
-----------------
src/header/map.rs header::map::append_value
deps:{"header::map::append_value":{"T":["std::marker::Sized"]}}
candidates:{"header::map::append_value":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Bucket<T>
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<header::map::ExtraValue<T>>
let mut p3 = MaybeUninit::uninit().assume_init(); // T
+header::map::append_value(p0, p1, p2, p3);
+crate::header::map::append_value(p0, p1, p2, p3);
+crate::header::map::append_value(p0, p1, p2, p3);
-----------------
src/header/map.rs header::map::usable_capacity
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+header::map::usable_capacity(p0);
+crate::header::map::usable_capacity(p0);
+crate::header::map::usable_capacity(p0);
-----------------
src/header/map.rs header::map::to_raw_capacity
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+header::map::to_raw_capacity(p0);
+crate::header::map::to_raw_capacity(p0);
+crate::header::map::to_raw_capacity(p0);
-----------------
src/header/map.rs header::map::desired_pos
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = MaybeUninit::uninit().assume_init(); // header::map::HashValue
+header::map::desired_pos(p0, p1);
+crate::header::map::desired_pos(p0, p1);
+crate::header::map::desired_pos(p0, p1);
-----------------
src/header/map.rs header::map::probe_distance
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = MaybeUninit::uninit().assume_init(); // header::map::HashValue
let mut p2 = 0usize; // None+usize
+header::map::probe_distance(p0, p1, p2);
+crate::header::map::probe_distance(p0, p1, p2);
+crate::header::map::probe_distance(p0, p1, p2);
-----------------
src/header/map.rs header::map::hash_elem_using
deps:{"header::map::hash_elem_using":{"K":["std::hash::Hash"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::hash::Hash","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{}}
candidates:{"header::map::hash_elem_using":{"K":["version::Version","uri::scheme::Scheme","method::Method","header::name::StandardHeader","version::Http","header::name::Custom","uri::authority::Authority","uri::Uri","header::value::HeaderValue","header::name::HdrName","std::hash::impls::<impl std::hash::Hash for *const T>","status::StatusCode","header::name::Repr","header::name::MaybeLower","method::Inner","header::name::HeaderName","byte_str::ByteStr"]},"header::name::Repr":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","header::name::StandardHeader","header::name::Repr","header::name::Custom","byte_str::ByteStr","version::Version"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Danger
let mut p1 = & MaybeUninit::uninit().assume_init(); // K
+header::map::hash_elem_using(p0, p1);
+crate::header::map::hash_elem_using(p0, p1);
+crate::header::map::hash_elem_using(p0, p1);
-----------------
src/header/name.rs header::name::parse_hdr
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = &mut [0u8;1]; // None+[u8; 64]
let mut p2 = & [0u8;1]; // None+[u8; 256]
+header::name::parse_hdr(p0, p1, p2);
+crate::header::name::parse_hdr(p0, p1, p2);
+crate::header::name::parse_hdr(p0, p1, p2);
-----------------
src/header/name.rs header::name::eq_ignore_ascii_case
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+header::name::eq_ignore_ascii_case(p0, p1);
+crate::header::name::eq_ignore_ascii_case(p0, p1);
+crate::header::name::eq_ignore_ascii_case(p0, p1);
-----------------
src/header/value.rs header::value::is_visible_ascii
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+header::value::is_visible_ascii(p0);
+crate::header::value::is_visible_ascii(p0);
+crate::header::value::is_visible_ascii(p0);
-----------------
src/header/value.rs header::value::is_valid
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+header::value::is_valid(p0);
+crate::header::value::is_valid(p0);
+crate::header::value::is_valid(p0);
-----------------
src/method.rs method::write_checked
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = &mut [0u8].as_mut_slice(); // None+[u8]
+method::write_checked(p0, p1);
+crate::method::write_checked(p0, p1);
+crate::method::write_checked(p0, p1);
-----------------
src/request.rs request::head
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::option::Option<request::Parts>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::option::Option<error::Error>
+request::head(p0, p1);
+crate::request::head(p0, p1);
+crate::request::head(p0, p1);
-----------------
src/response.rs response::head
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::option::Option<response::Parts>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::option::Option<error::Error>
+response::head(p0, p1);
+crate::response::head(p0, p1);
+crate::response::head(p0, p1);
-----------------
src/status.rs status::canonical_reason
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+status::canonical_reason(p0);
+crate::status::canonical_reason(p0);
+crate::status::canonical_reason(p0);
-----------------
src/uri/authority.rs uri::authority::host
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+uri::authority::host(&p0);
+crate::uri::authority::host(&p0);
+crate::uri::authority::host(&p0);
-----------------
src/uri/mod.rs uri::parse_full
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+uri::parse_full(p0);
+crate::uri::parse_full(p0);
+crate::uri::parse_full(p0);
-----------------
src/lib.rs _assert_types
deps:{}
candidates:{}
+_assert_types();
+crate::_assert_types();
+crate::_assert_types();
-----------------
src/lib.rs _assert_types::assert_send
deps:{"<&T as std::marker::Send>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"_assert_types::assert_send":{"T":["std::marker::Send","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]}}
candidates:{"<&T as std::marker::Send>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"_assert_types::assert_send":{"T":["<*const T as std::marker::Send>","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::Drain","<*mut T as std::marker::Send>","header::map::ValueDrain"]},"header::map::Drain":{"T":["header::map::Iter","header::map::IterMut","header::map::Drain","<*const T as std::marker::Sync>","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::Iter":{"T":["header::map::ValueDrain","header::map::Drain","header::map::Iter","header::map::IterMut","header::map::ValueIterMut","<*const T as std::marker::Sync>"]},"header::map::IterMut":{"T":["<*mut T as std::marker::Sync>","header::map::IterMut","header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut","header::map::Drain"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain","header::map::Drain","<*mut T as std::marker::Send>","header::map::IterMut"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter","<*const T as std::marker::Sync>"]}}
+_assert_types::assert_send();
+crate::_assert_types::assert_send();
+crate::_assert_types::assert_send();
-----------------
src/lib.rs _assert_types::assert_sync
deps:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"_assert_types::assert_sync":{"T":["std::marker::Sized","std::marker::Sync"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Send","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sync","std::marker::Sized"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"_assert_types::assert_sync":{"T":["header::map::ValueDrain","<*mut T as std::marker::Sync>","header::map::Iter","header::map::IterMut","header::map::Drain","header::map::ValueIterMut"]},"header::map::Drain":{"T":["header::map::Iter","header::map::ValueDrain","<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain","header::map::IterMut"]},"header::map::Iter":{"T":["<*mut T as std::fmt::Debug>","header::map::IterMut","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter","<*const T as std::marker::Sync>","header::map::ValueIterMut"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","header::map::Iter","<*const T as std::marker::Send>","header::map::Drain","header::map::ValueDrain","header::map::IterMut"]},"header::map::ValueIterMut":{"T":["<*const T as std::marker::Send>","header::map::ValueIterMut","header::map::IterMut","header::map::ValueDrain","header::map::Drain","header::map::Iter"]}}
+_assert_types::assert_sync();
+crate::_assert_types::assert_sync();
+crate::_assert_types::assert_sync();
-----------------
src/header/map.rs header::map::into_header_name::Sealed::insert
deps:{"header::map::into_header_name::Sealed::insert":{"Self":["header::map::into_header_name::Sealed"],"T":["std::marker::Sized"]}}
candidates:{"header::map::into_header_name::Sealed::insert":{"Self":["header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1, p2);
+header::map::into_header_name::Sealed::insert(p0, p1, p2);
+crate::header::map::into_header_name::Sealed::insert(p0, p1, p2);
+crate::header::map::into_header_name::Sealed::insert(p0, p1, p2);
-----------------
src/header/map.rs header::map::into_header_name::Sealed::append
deps:{"header::map::into_header_name::Sealed::append":{"Self":["header::map::into_header_name::Sealed"],"T":["std::marker::Sized"]}}
candidates:{"header::map::into_header_name::Sealed::append":{"Self":["header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1, p2);
+header::map::into_header_name::Sealed::append(p0, p1, p2);
+crate::header::map::into_header_name::Sealed::append(p0, p1, p2);
+crate::header::map::into_header_name::Sealed::append(p0, p1, p2);
-----------------
src/header/map.rs header::map::as_header_name::Sealed::entry
deps:{"header::map::as_header_name::Sealed::entry":{"Self":["header::map::as_header_name::Sealed"],"T":["std::marker::Sized"]}}
candidates:{"header::map::as_header_name::Sealed::entry":{"Self":["std::string::String","header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+header::map::as_header_name::Sealed::entry(p0, p1);
+crate::header::map::as_header_name::Sealed::entry(p0, p1);
+crate::header::map::as_header_name::Sealed::entry(p0, p1);
-----------------
src/header/map.rs header::map::as_header_name::Sealed::find
deps:{"header::map::as_header_name::Sealed::find":{"Self":["header::map::as_header_name::Sealed"],"T":["std::marker::Sized"]}}
candidates:{"header::map::as_header_name::Sealed::find":{"Self":["std::string::String","header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+header::map::as_header_name::Sealed::find(p0, p1);
+crate::header::map::as_header_name::Sealed::find(p0, p1);
+crate::header::map::as_header_name::Sealed::find(p0, p1);
-----------------
src/header/map.rs header::map::as_header_name::Sealed::as_str
deps:{"header::map::as_header_name::Sealed::as_str":{"Self":["header::map::as_header_name::Sealed"]}}
candidates:{"header::map::as_header_name::Sealed::as_str":{"Self":["header::name::HeaderName","std::string::String"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.as_str();
+header::map::as_header_name::Sealed::as_str(p0);
+crate::header::map::as_header_name::Sealed::as_str(p0);
+crate::header::map::as_header_name::Sealed::as_str(p0);
-----------------
src/convert.rs convert::HttpTryFrom::try_from
deps:{"convert::HttpTryFrom::try_from":{"Self":["std::marker::Sized","convert::HttpTryFrom","sealed::Sealed"],"T":["std::marker::Sized"]}}
candidates:{"convert::HttpTryFrom::try_from":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+convert::HttpTryFrom::try_from(p0);
+crate::convert::HttpTryFrom::try_from(p0);
+crate::convert::HttpTryFrom::try_from(p0);
-----------------
src/convert.rs convert::HttpTryInto::http_try_into
deps:{"<T as convert::HttpTryInto<U>>":{"T":["std::marker::Sized"]},"convert::HttpTryInto::http_try_into":{"Self":["std::marker::Sized","convert::HttpTryInto"],"T":["std::marker::Sized"]}}
candidates:{"<T as convert::HttpTryInto<U>>":{"T":["RUG_ANY"]},"convert::HttpTryInto::http_try_into":{"Self":["<T as convert::HttpTryInto<U>>"],"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.http_try_into();
+convert::HttpTryInto::http_try_into(p0);
+crate::convert::HttpTryInto::http_try_into(p0);
+crate::convert::HttpTryInto::http_try_into(p0);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as std::clone::Clone>::clone":{"T":["std::marker::Sized","std::clone::Clone"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::cmp::Eq","convert::HttpTryFrom","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::hash::Hash"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as std::clone::Clone>::clone":{"T":["uri::path::PathAndQuery","uri::authority::Authority","header::map::HeaderMap","std::clone::impls::<impl std::clone::Clone for *const T>","header::name::StandardHeader","uri::scheme::Scheme","header::map::Danger","uri::scheme::Scheme2","header::map::HashValue","header::name::HeaderName","version::Version","header::name::Custom","uri::Uri","header::map::Bucket","header::name::MaybeLower","uri::scheme::Protocol","header::map::Cursor","version::Http","header::map::Link","method::Inner","byte_str::ByteStr","status::StatusCode","std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::ExtraValue","method::Method","header::value::HeaderValue","header::name::Repr","header::map::Links","header::map::Pos"]},"header::map::Bucket":{"T":["uri::scheme::Protocol","status::StatusCode","header::name::HeaderName","method::Method","<*mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::Cursor","uri::scheme::Scheme2","header::name::Repr","header::value::HeaderValue","header::map::ExtraValue","header::name::Custom","uri::scheme::Scheme","byte_str::ByteStr","header::map::HashValue","header::name::StandardHeader","header::name::MaybeLower","uri::authority::Authority","header::map::Link","header::map::Bucket","header::map::HeaderMap","header::map::Links","version::Version","uri::Uri"]},"header::map::ExtraValue":{"T":["header::value::HeaderValue","header::map::Cursor","method::Method","header::map::HashValue","header::name::Custom","byte_str::ByteStr","uri::scheme::Protocol","uri::scheme::Scheme2","header::map::Bucket","header::name::MaybeLower","uri::authority::Authority","header::name::StandardHeader","header::map::Link","status::StatusCode","header::name::Repr","header::name::HeaderName","header::map::ExtraValue","header::map::HeaderMap","version::Version","std::clone::impls::<impl std::clone::Clone for *const T>","uri::path::PathAndQuery","uri::scheme::Scheme","uri::Uri","header::map::Links"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr","header::value::HeaderValue"]},"header::name::Repr":{"T":["header::name::Custom","header::name::Repr","<*mut T as std::fmt::Debug>","header::name::StandardHeader","version::Version","byte_str::ByteStr"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"uri::scheme::Scheme2":{"T":["header::name::Custom","method::Method","uri::Uri","byte_str::ByteStr","header::map::HashValue","header::map::Bucket","header::map::HeaderMap","version::Version","uri::scheme::Scheme2","header::name::Repr","header::name::HeaderName","header::map::Links","uri::authority::Authority","std::boxed::Box<byte_str::ByteStr>","uri::scheme::Protocol","header::name::MaybeLower","header::value::HeaderValue","status::StatusCode","header::map::Link","uri::scheme::Scheme","header::map::Cursor","header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::ExtraValue","uri::path::PathAndQuery"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.clone();
+<header::map::HeaderMap<T> as std::clone::Clone>::clone(p0);
+crate::<header::map::HeaderMap<T> as std::clone::Clone>::clone(p0);
+<header::map::HeaderMap<T>>::clone(p0);
-----------------
src/header/map.rs <header::map::Iter<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Iter<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send","std::fmt::Debug"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","convert::HttpTryFrom","std::clone::Clone"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized","std::marker::Send"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::marker::Sized","std::cmp::PartialEq","std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"request::Request":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"response::Response":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Iter<'a, T> as std::fmt::Debug>::fmt":{"T":["response::Response","uri::builder::Builder","header::value::HeaderValue","header::name::InvalidHeaderNameBytes","header::map::Keys","status::InvalidStatusCode","method::InvalidMethod","uri::scheme::Scheme","uri::path::PathAndQuery","uri::InvalidUriBytes","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","<&T as std::fmt::Debug>","header::map::Values","uri::authority::Authority","header::map::HashValue","request::Builder","header::map::OccupiedEntry","error::Never","header::name::MaybeLower","uri::Parts","header::value::InvalidHeaderValue","status::StatusCode","byte_str::ByteStr","header::map::HeaderMap","header::map::Cursor","header::value::ToStrError","header::map::IterMut","uri::port::Port","version::Version","uri::scheme::Protocol","header::map::IntoIter","uri::InvalidUri","header::map::Bucket","header::name::HdrName","header::map::Link","header::name::Repr","header::name::StandardHeader","header::map::Entry","<*mut T as std::fmt::Debug>","error::Error","header::name::InvalidHeaderName","header::map::GetAll","header::map::VacantEntry","header::map::Links","response::Builder","uri::ErrorKind","header::map::ExtraValue","uri::Uri","uri::scheme::Scheme2","header::name::Custom","request::Parts","header::map::ValueDrain","header::name::HeaderName","extensions::Extensions","header::map::ValuesMut","request::Request","header::map::Drain","response::Parts","header::map::ValueIterMut","header::map::Iter","method::Method","header::map::ValueIter"]},"header::map::Bucket":{"T":["header::name::HeaderName","header::map::Bucket","header::value::HeaderValue","version::Version","uri::scheme::Protocol","header::map::Links","header::name::StandardHeader","header::name::Repr","byte_str::ByteStr","header::map::HashValue","header::map::Cursor","uri::path::PathAndQuery","uri::authority::Authority","header::map::ExtraValue","uri::scheme::Scheme2","uri::Uri","status::StatusCode","<&T as std::fmt::Debug>","header::name::Custom","header::map::HeaderMap","header::map::Link","uri::scheme::Scheme","header::name::MaybeLower","method::Method"]},"header::map::Drain":{"T":["<*const T as std::fmt::Debug>","header::map::ValueDrain","header::map::Iter","header::map::Drain","header::map::IterMut","header::map::ValueIterMut"]},"header::map::Entry":{"T":["uri::scheme::Scheme","header::value::ToStrError","byte_str::ByteStr","uri::port::Port","response::Response","header::name::Repr","header::name::MaybeLower","uri::authority::Authority","header::map::ValuesMut","header::map::Keys","header::map::Bucket","header::map::Iter","error::Error","header::name::InvalidHeaderName","header::map::VacantEntry","uri::InvalidUriBytes","uri::InvalidUri","request::Request","header::map::Link","header::map::GetAll","header::map::Values","response::Builder","request::Builder","header::value::HeaderValue","header::map::Links","header::map::ExtraValue","header::map::ValueIter","header::map::ValueIterMut","request::Parts","uri::ErrorKind","header::name::Custom","error::Never","uri::scheme::Protocol","header::map::Entry","response::Parts","uri::Parts","method::Method","uri::InvalidUriParts","header::map::IterMut","header::name::StandardHeader","header::value::InvalidHeaderValueBytes","header::map::Cursor","version::Version","status::StatusCode","uri::Uri","header::map::HashValue","header::name::HdrName","header::map::HeaderMap","header::value::InvalidHeaderValue","header::map::ValueDrain","header::name::HeaderName","header::map::OccupiedEntry","uri::scheme::Scheme2","status::InvalidStatusCode","header::map::Drain","uri::builder::Builder","uri::path::PathAndQuery","header::map::IntoIter","<*const T as std::fmt::Debug>","extensions::Extensions","method::InvalidMethod","header::name::InvalidHeaderNameBytes"]},"header::map::ExtraValue":{"T":["uri::scheme::Scheme2","header::map::Bucket","uri::Uri","uri::scheme::Protocol","uri::scheme::Scheme","<*mut T as std::fmt::Debug>","header::name::MaybeLower","header::map::Link","uri::path::PathAndQuery","version::Version","byte_str::ByteStr","header::name::Repr","header::map::HeaderMap","method::Method","header::name::StandardHeader","header::map::HashValue","header::map::Links","header::map::ExtraValue","header::value::HeaderValue","status::StatusCode","header::map::Cursor","header::name::HeaderName","header::name::Custom","uri::authority::Authority"]},"header::map::GetAll":{"T":["header::map::GetAll","header::map::HeaderMap","header::name::StandardHeader","byte_str::ByteStr","header::map::Link","header::name::Repr","header::name::Custom","version::Version","header::map::Cursor","header::map::HashValue","std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>","uri::ErrorKind"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["header::map::IterMut","<&mut T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","header::name::Repr","request::Parts","header::map::Iter","status::StatusCode","header::map::IntoIter","header::name::HdrName","header::map::OccupiedEntry","error::Never","extensions::Extensions","response::Parts","uri::ErrorKind","header::map::Values","uri::InvalidUri","status::InvalidStatusCode","header::map::ValueIterMut","header::map::ExtraValue","header::map::HeaderMap","header::name::MaybeLower","version::Version","header::map::VacantEntry","header::value::HeaderValue","header::map::Links","header::map::Link","header::name::StandardHeader","request::Request","uri::authority::Authority","header::map::ValueIter","error::Error","header::value::ToStrError","response::Builder","header::map::Entry","header::name::InvalidHeaderName","header::name::Custom","uri::path::PathAndQuery","uri::InvalidUriBytes","uri::port::Port","uri::Uri","header::map::Drain","header::name::HeaderName","uri::InvalidUriParts","response::Response","uri::scheme::Protocol","header::map::Keys","request::Builder","header::map::ValuesMut","uri::Parts","header::map::GetAll","header::map::HashValue","uri::scheme::Scheme","uri::builder::Builder","method::Method","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme2","header::map::Bucket","header::map::ValueDrain","byte_str::ByteStr","header::value::InvalidHeaderValue","method::InvalidMethod","header::map::Cursor"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::ValueDrain","header::map::Iter","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::Drain","<*const T as std::marker::Send>"]},"header::map::Keys":{"T":["uri::InvalidUriParts","header::map::HeaderMap","header::name::InvalidHeaderName","header::map::ExtraValue","header::map::ValueIter","header::map::Bucket","uri::scheme::Scheme","error::Never","header::map::IterMut","uri::scheme::Protocol","response::Builder","header::map::OccupiedEntry","<&mut T as std::fmt::Debug>","header::name::Custom","uri::port::Port","request::Builder","header::value::ToStrError","header::map::Entry","response::Parts","header::map::ValuesMut","uri::builder::Builder","header::map::ValueIterMut","status::InvalidStatusCode","uri::ErrorKind","byte_str::ByteStr","request::Parts","header::map::HashValue","header::map::Values","header::map::IntoIter","uri::Parts","header::map::Drain","header::map::ValueDrain","header::name::HeaderName","uri::authority::Authority","version::Version","response::Response","header::value::InvalidHeaderValueBytes","header::map::Link","uri::InvalidUriBytes","header::map::Cursor","header::map::Iter","header::name::MaybeLower","status::StatusCode","uri::InvalidUri","header::map::GetAll","header::map::Keys","method::Method","request::Request","method::InvalidMethod","header::name::Repr","extensions::Extensions","header::name::InvalidHeaderNameBytes","uri::Uri","uri::scheme::Scheme2","header::name::HdrName","header::name::StandardHeader","header::map::Links","header::value::HeaderValue","header::map::VacantEntry","header::value::InvalidHeaderValue","error::Error","uri::path::PathAndQuery"]},"header::map::OccupiedEntry":{"T":["header::name::Custom","header::map::HeaderMap","uri::InvalidUriParts","header::map::Drain","header::name::InvalidHeaderName","<*const T as std::fmt::Debug>","header::name::MaybeLower","method::InvalidMethod","error::Never","header::value::InvalidHeaderValueBytes","header::map::Cursor","uri::scheme::Protocol","uri::port::Port","extensions::Extensions","header::map::VacantEntry","request::Request","status::InvalidStatusCode","error::Error","header::map::Keys","header::map::ValueDrain","header::map::Links","header::map::OccupiedEntry","header::map::Values","header::map::ValueIter","header::value::InvalidHeaderValue","request::Builder","header::name::StandardHeader","header::map::Iter","status::StatusCode","header::value::HeaderValue","header::name::Repr","header::map::IntoIter","uri::ErrorKind","header::map::HashValue","header::name::HeaderName","header::name::HdrName","header::map::Entry","header::value::ToStrError","uri::Parts","uri::Uri","uri::path::PathAndQuery","header::map::Link","request::Parts","header::map::Bucket","header::map::ValueIterMut","uri::builder::Builder","header::map::ExtraValue","response::Parts","response::Response","header::map::ValuesMut","uri::scheme::Scheme","version::Version","method::Method","uri::authority::Authority","uri::InvalidUriBytes","header::map::IterMut","uri::scheme::Scheme2","header::name::InvalidHeaderNameBytes","header::map::GetAll","byte_str::ByteStr","uri::InvalidUri","response::Builder"]},"header::map::VacantEntry":{"T":["header::map::IterMut","header::map::HeaderMap","byte_str::ByteStr","header::name::Custom","header::value::HeaderValue","uri::path::PathAndQuery","header::map::ExtraValue","uri::ErrorKind","header::name::HeaderName","header::map::Entry","header::map::Link","response::Parts","request::Request","header::map::ValueIterMut","header::name::InvalidHeaderName","uri::builder::Builder","response::Builder","response::Response","header::name::StandardHeader","status::StatusCode","uri::InvalidUri","uri::InvalidUriParts","header::map::OccupiedEntry","header::name::MaybeLower","header::map::Cursor","header::map::HashValue","header::map::IntoIter","uri::Uri","header::name::Repr","header::map::Keys","method::InvalidMethod","version::Version","uri::InvalidUriBytes","header::map::Values","header::map::ValueIter","status::InvalidStatusCode","uri::authority::Authority","header::map::VacantEntry","header::name::InvalidHeaderNameBytes","header::value::ToStrError","request::Builder","method::Method","error::Error","header::map::ValuesMut","header::name::HdrName","<&T as std::fmt::Debug>","header::map::Drain","header::map::GetAll","header::map::ValueDrain","uri::port::Port","header::map::Iter","uri::scheme::Protocol","header::value::InvalidHeaderValueBytes","header::value::InvalidHeaderValue","request::Parts","uri::scheme::Scheme","header::map::Links","uri::Parts","extensions::Extensions","header::map::Bucket","error::Never","uri::scheme::Scheme2"]},"header::map::ValueDrain":{"T":["header::map::IterMut","<*const T as std::fmt::Debug>","header::map::Iter","header::map::ValueDrain","header::map::Drain","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["uri::path::PathAndQuery","header::map::HeaderMap","header::map::Link","request::Request","response::Response","header::map::ExtraValue","header::name::HeaderName","error::Never","header::map::Drain","method::Method","header::map::Values","version::Version","header::name::InvalidHeaderName","byte_str::ByteStr","header::value::InvalidHeaderValue","uri::Parts","uri::builder::Builder","header::map::OccupiedEntry","header::map::VacantEntry","extensions::Extensions","header::name::HdrName","header::map::IntoIter","request::Parts","header::name::StandardHeader","uri::scheme::Protocol","header::name::MaybeLower","uri::Uri","uri::port::Port","header::map::Entry","header::name::InvalidHeaderNameBytes","header::map::Iter","response::Parts","<*const T as std::fmt::Debug>","uri::InvalidUriBytes","status::InvalidStatusCode","uri::scheme::Scheme2","header::map::ValueIter","header::map::Keys","uri::scheme::Scheme","status::StatusCode","uri::authority::Authority","header::map::HashValue","request::Builder","header::value::HeaderValue","header::map::Links","uri::InvalidUriParts","header::map::Cursor","header::map::GetAll","header::value::InvalidHeaderValueBytes","header::map::ValueIterMut","header::name::Repr","uri::InvalidUri","header::name::Custom","header::map::ValueDrain","header::map::IterMut","uri::ErrorKind","header::map::ValuesMut","header::map::Bucket","header::value::ToStrError","response::Builder","error::Error","method::InvalidMethod"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::Iter","header::map::IterMut","header::map::Drain","header::map::ValueDrain","<*const T as std::fmt::Debug>"]},"header::map::Values":{"T":["header::name::MaybeLower","header::map::ValueIter","error::Never","header::map::IntoIter","error::Error","header::map::ValuesMut","header::map::ValueDrain","header::name::InvalidHeaderName","uri::InvalidUriBytes","uri::InvalidUriParts","uri::port::Port","extensions::Extensions","response::Builder","header::map::GetAll","header::map::Cursor","header::value::InvalidHeaderValue","uri::authority::Authority","response::Parts","header::map::Bucket","uri::InvalidUri","byte_str::ByteStr","header::name::Repr","header::map::Entry","header::map::Drain","uri::scheme::Protocol","uri::Uri","header::value::ToStrError","status::StatusCode","header::map::VacantEntry","header::map::Links","header::map::HashValue","uri::path::PathAndQuery","header::map::ValueIterMut","<*mut T as std::fmt::Debug>","uri::Parts","header::map::OccupiedEntry","header::map::Iter","version::Version","header::name::HeaderName","header::map::Keys","header::map::HeaderMap","uri::builder::Builder","request::Request","header::map::ExtraValue","header::value::HeaderValue","uri::scheme::Scheme2","header::name::HdrName","header::map::IterMut","response::Response","header::value::InvalidHeaderValueBytes","method::Method","status::InvalidStatusCode","method::InvalidMethod","uri::scheme::Scheme","header::name::StandardHeader","request::Parts","header::name::Custom","header::map::Values","header::map::Link","request::Builder","header::name::InvalidHeaderNameBytes","uri::ErrorKind"]},"header::map::ValuesMut":{"T":["error::Error","header::map::ValueIterMut","uri::Uri","byte_str::ByteStr","header::map::Entry","header::name::HdrName","uri::path::PathAndQuery","version::Version","header::name::StandardHeader","header::name::Repr","header::name::MaybeLower","header::map::Values","error::Never","uri::builder::Builder","header::value::InvalidHeaderValue","header::map::ValuesMut","header::map::Cursor","request::Builder","header::map::Iter","header::name::InvalidHeaderName","uri::scheme::Scheme","response::Parts","header::map::VacantEntry","uri::port::Port","header::map::Link","header::map::GetAll","uri::scheme::Protocol","header::map::IntoIter","header::map::OccupiedEntry","header::map::Bucket","uri::InvalidUriParts","header::name::Custom","header::name::HeaderName","<*mut T as std::fmt::Debug>","header::name::InvalidHeaderNameBytes","header::value::ToStrError","uri::ErrorKind","header::map::ExtraValue","uri::Parts","header::map::Links","response::Response","extensions::Extensions","response::Builder","header::map::Drain","status::StatusCode","header::value::InvalidHeaderValueBytes","header::map::IterMut","header::value::HeaderValue","status::InvalidStatusCode","request::Parts","uri::scheme::Scheme2","method::Method","method::InvalidMethod","uri::InvalidUriBytes","header::map::ValueIter","header::map::HeaderMap","request::Request","header::map::HashValue","header::map::Keys","header::map::ValueDrain","uri::authority::Authority","uri::InvalidUri"]},"header::name::Repr":{"T":["header::name::Custom","<*mut T as std::fmt::Debug>","version::Version","header::name::StandardHeader","header::name::Repr","byte_str::ByteStr"]},"request::Request":{"T":["uri::builder::Builder","method::Method","response::Builder","uri::Uri","extensions::Extensions","uri::Parts","response::Response","request::Request","request::Builder","status::StatusCode","header::map::HeaderMap","version::Version"]},"response::Response":{"T":["version::Version","uri::Parts","response::Response","extensions::Extensions","method::Method","header::map::HeaderMap","uri::Uri","request::Builder","request::Request","uri::builder::Builder","status::StatusCode","response::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["uri::port::Port","header::value::HeaderValue","method::Method","<&mut T as std::fmt::Debug>","uri::authority::Authority","uri::scheme::Scheme"]},"uri::scheme::Scheme2":{"T":["version::Version","header::map::ExtraValue","uri::path::PathAndQuery","status::StatusCode","<*mut T as std::fmt::Debug>","header::name::StandardHeader","header::map::Link","header::map::HashValue","header::map::Cursor","std::boxed::Box<byte_str::ByteStr>","method::Method","uri::authority::Authority","header::map::Bucket","header::name::Repr","header::value::HeaderValue","header::name::HeaderName","header::map::Links","uri::scheme::Scheme","header::name::Custom","header::map::HeaderMap","uri::Uri","uri::scheme::Protocol","header::name::MaybeLower","byte_str::ByteStr","uri::scheme::Scheme2"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Iter<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Iter<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Iter<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Iter<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::IterMut<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::IterMut<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Sized","std::marker::Send","std::fmt::Debug","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::marker::Sized","convert::HttpTryFrom","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Send","std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized","std::marker::Send"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash"]},"request::Request":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::IterMut<'a, T> as std::fmt::Debug>::fmt":{"T":["header::map::ValueDrain","method::Method","header::value::ToStrError","uri::builder::Builder","header::map::HashValue","header::map::Links","header::map::Entry","header::map::ValueIterMut","header::map::VacantEntry","uri::InvalidUri","header::name::InvalidHeaderName","uri::scheme::Scheme2","header::name::Custom","uri::ErrorKind","header::value::InvalidHeaderValueBytes","header::name::HeaderName","uri::authority::Authority","header::name::InvalidHeaderNameBytes","header::map::Cursor","uri::scheme::Scheme","header::name::StandardHeader","header::map::ValuesMut","uri::port::Port","header::value::HeaderValue","uri::path::PathAndQuery","header::map::GetAll","byte_str::ByteStr","<*const T as std::fmt::Debug>","response::Response","request::Builder","header::map::Iter","status::StatusCode","method::InvalidMethod","request::Parts","header::name::HdrName","version::Version","header::name::Repr","header::map::IterMut","extensions::Extensions","header::map::Link","response::Builder","header::map::IntoIter","response::Parts","header::map::Bucket","header::map::Values","uri::Parts","<*mut T as std::fmt::Debug>","status::InvalidStatusCode","header::map::OccupiedEntry","header::name::MaybeLower","header::value::InvalidHeaderValue","uri::InvalidUriParts","header::map::HeaderMap","header::map::ValueIter","header::map::ExtraValue","uri::scheme::Protocol","request::Request","error::Error","error::Never","uri::InvalidUriBytes","uri::Uri","header::map::Drain","header::map::Keys"]},"header::map::Bucket":{"T":["header::map::HashValue","uri::scheme::Scheme","uri::scheme::Scheme2","uri::Uri","header::map::Link","header::name::Repr","version::Version","status::StatusCode","header::map::ExtraValue","header::name::StandardHeader","header::map::Cursor","header::name::MaybeLower","uri::path::PathAndQuery","header::map::Bucket","header::name::Custom","header::name::HeaderName","method::Method","uri::scheme::Protocol","std::clone::impls::<impl std::clone::Clone for &mut T>","header::value::HeaderValue","uri::authority::Authority","header::map::HeaderMap","byte_str::ByteStr","header::map::Links"]},"header::map::Drain":{"T":["<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Iter","header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain"]},"header::map::Entry":{"T":["response::Response","method::Method","uri::scheme::Protocol","response::Parts","uri::scheme::Scheme","header::map::IterMut","header::name::InvalidHeaderNameBytes","method::InvalidMethod","uri::ErrorKind","request::Request","error::Error","request::Builder","extensions::Extensions","header::map::Drain","header::map::Link","uri::builder::Builder","header::map::ExtraValue","header::map::OccupiedEntry","header::map::HeaderMap","error::Never","response::Builder","uri::Uri","header::map::Iter","uri::InvalidUriParts","header::name::Repr","uri::InvalidUriBytes","uri::scheme::Scheme2","header::map::Links","header::map::Entry","uri::port::Port","<&mut T as std::fmt::Debug>","header::name::MaybeLower","header::name::StandardHeader","header::value::InvalidHeaderValueBytes","header::map::GetAll","header::value::InvalidHeaderValue","header::map::HashValue","version::Version","uri::Parts","header::name::InvalidHeaderName","uri::path::PathAndQuery","header::map::Values","header::map::ValueIter","header::map::VacantEntry","header::map::ValuesMut","header::name::HdrName","header::map::ValueDrain","status::InvalidStatusCode","header::map::ValueIterMut","status::StatusCode","header::name::Custom","byte_str::ByteStr","header::map::Bucket","request::Parts","header::map::Keys","header::map::Cursor","uri::InvalidUri","header::name::HeaderName","header::value::HeaderValue","header::value::ToStrError","header::map::IntoIter","uri::authority::Authority"]},"header::map::ExtraValue":{"T":["uri::authority::Authority","header::map::HashValue","status::StatusCode","header::map::HeaderMap","uri::scheme::Protocol","header::name::HeaderName","uri::Uri","header::map::Bucket","version::Version","uri::scheme::Scheme","byte_str::ByteStr","uri::path::PathAndQuery","header::map::ExtraValue","header::value::HeaderValue","method::Method","header::name::Repr","header::map::Link","uri::scheme::Scheme2","header::map::Cursor","header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for &T>","header::name::Custom","header::name::MaybeLower","header::map::Links"]},"header::map::GetAll":{"T":["header::map::HeaderMap","header::map::Cursor","uri::ErrorKind","header::name::Custom","byte_str::ByteStr","header::map::HashValue","header::name::Repr","version::Version","header::name::StandardHeader","header::map::Link","header::map::GetAll","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["header::map::Links","header::map::VacantEntry","method::InvalidMethod","header::map::HeaderMap","uri::port::Port","header::map::ExtraValue","header::value::InvalidHeaderValueBytes","error::Error","header::map::IntoIter","byte_str::ByteStr","header::map::Iter","uri::InvalidUriBytes","uri::InvalidUriParts","header::map::ValueIterMut","method::Method","uri::builder::Builder","header::map::Drain","uri::path::PathAndQuery","response::Response","header::name::InvalidHeaderName","header::name::HeaderName","header::map::ValueIter","header::value::InvalidHeaderValue","extensions::Extensions","header::name::StandardHeader","header::name::MaybeLower","status::InvalidStatusCode","header::map::HashValue","header::map::Bucket","header::map::Values","version::Version","uri::scheme::Scheme","uri::scheme::Protocol","<&T as std::fmt::Debug>","uri::InvalidUri","uri::scheme::Scheme2","header::map::Link","uri::Uri","request::Request","request::Builder","header::name::Custom","header::value::HeaderValue","header::map::Cursor","header::name::InvalidHeaderNameBytes","uri::authority::Authority","header::value::ToStrError","header::map::GetAll","header::map::ValuesMut","header::map::Keys","header::map::IterMut","request::Parts","uri::Parts","response::Parts","uri::ErrorKind","error::Never","header::map::ValueDrain","header::map::Entry","response::Builder","status::StatusCode","header::name::HdrName","header::map::OccupiedEntry","header::name::Repr"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::Drain","header::map::ValueIterMut","<*mut T as std::marker::Sync>","header::map::Iter","header::map::ValueDrain"]},"header::map::IterMut":{"T":["header::map::Drain","header::map::ValueDrain","header::map::IterMut","<*const T as std::marker::Send>","header::map::ValueIterMut","header::map::Iter"]},"header::map::Keys":{"T":["uri::scheme::Scheme2","byte_str::ByteStr","extensions::Extensions","status::InvalidStatusCode","header::map::HashValue","header::name::StandardHeader","header::map::ExtraValue","header::map::Bucket","uri::scheme::Protocol","header::value::HeaderValue","header::name::Repr","header::map::IntoIter","uri::authority::Authority","error::Never","version::Version","header::name::HdrName","header::map::Entry","method::Method","uri::ErrorKind","header::name::InvalidHeaderName","header::map::Cursor","response::Parts","header::name::Custom","header::name::MaybeLower","header::value::ToStrError","response::Response","<*mut T as std::fmt::Debug>","header::map::ValueIter","uri::path::PathAndQuery","uri::InvalidUriBytes","request::Builder","header::map::IterMut","header::map::ValueIterMut","uri::scheme::Scheme","status::StatusCode","uri::InvalidUri","header::map::Keys","request::Request","method::InvalidMethod","response::Builder","header::map::ValueDrain","uri::InvalidUriParts","header::map::Link","header::map::Values","request::Parts","header::map::HeaderMap","uri::Uri","uri::Parts","header::map::VacantEntry","header::map::Links","error::Error","uri::port::Port","header::map::Iter","header::map::Drain","header::name::HeaderName","header::map::OccupiedEntry","header::map::ValuesMut","header::value::InvalidHeaderValue","header::name::InvalidHeaderNameBytes","uri::builder::Builder","header::map::GetAll","header::value::InvalidHeaderValueBytes"]},"header::map::OccupiedEntry":{"T":["uri::InvalidUriParts","error::Error","header::map::IterMut","extensions::Extensions","header::name::HeaderName","header::map::Bucket","uri::path::PathAndQuery","header::map::ValuesMut","uri::ErrorKind","header::map::HeaderMap","error::Never","uri::Parts","header::map::ValueIter","header::map::VacantEntry","uri::InvalidUriBytes","header::map::ValueDrain","header::value::HeaderValue","header::name::InvalidHeaderNameBytes","response::Builder","header::map::Iter","status::StatusCode","header::name::HdrName","request::Builder","header::name::InvalidHeaderName","header::map::Cursor","header::map::Link","header::map::ValueIterMut","method::InvalidMethod","header::name::Custom","header::map::Entry","uri::port::Port","uri::authority::Authority","<&mut T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","header::map::Keys","response::Response","request::Parts","method::Method","uri::scheme::Protocol","uri::Uri","header::map::Links","header::value::ToStrError","version::Version","header::value::InvalidHeaderValue","header::map::Drain","uri::InvalidUri","header::map::GetAll","header::name::StandardHeader","header::map::Values","byte_str::ByteStr","header::name::MaybeLower","response::Parts","header::map::HashValue","header::map::OccupiedEntry","header::map::IntoIter","uri::scheme::Scheme","uri::scheme::Scheme2","uri::builder::Builder","header::name::Repr","request::Request","status::InvalidStatusCode","header::map::ExtraValue"]},"header::map::VacantEntry":{"T":["response::Response","header::map::ExtraValue","status::StatusCode","header::name::StandardHeader","uri::authority::Authority","uri::port::Port","request::Builder","header::map::GetAll","header::map::ValueDrain","header::value::HeaderValue","method::Method","header::map::ValueIterMut","uri::Parts","response::Builder","version::Version","header::name::Custom","header::map::IntoIter","uri::scheme::Scheme","header::name::HeaderName","uri::path::PathAndQuery","uri::InvalidUri","error::Error","method::InvalidMethod","header::map::Values","header::map::Links","header::map::Link","uri::ErrorKind","<&T as std::fmt::Debug>","header::map::Drain","byte_str::ByteStr","header::value::InvalidHeaderValueBytes","header::map::Entry","header::value::ToStrError","header::name::InvalidHeaderName","extensions::Extensions","header::name::Repr","request::Parts","error::Never","uri::InvalidUriParts","header::value::InvalidHeaderValue","status::InvalidStatusCode","uri::InvalidUriBytes","header::map::Iter","header::name::InvalidHeaderNameBytes","header::map::Cursor","request::Request","header::map::VacantEntry","header::map::OccupiedEntry","header::map::Keys","header::map::Bucket","uri::Uri","uri::builder::Builder","header::map::HashValue","header::map::ValueIter","header::map::HeaderMap","response::Parts","uri::scheme::Scheme2","header::name::MaybeLower","header::name::HdrName","header::map::ValuesMut","uri::scheme::Protocol","header::map::IterMut"]},"header::map::ValueDrain":{"T":["header::map::Iter","header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::IterMut"]},"header::map::ValueIter":{"T":["uri::Parts","header::name::StandardHeader","header::value::InvalidHeaderValue","header::name::MaybeLower","header::map::Link","header::map::Drain","header::map::IntoIter","header::name::InvalidHeaderNameBytes","uri::InvalidUriParts","header::name::Repr","header::value::InvalidHeaderValueBytes","uri::InvalidUri","header::map::Keys","uri::path::PathAndQuery","version::Version","uri::port::Port","header::name::Custom","extensions::Extensions","header::value::HeaderValue","uri::scheme::Scheme","status::InvalidStatusCode","header::name::HdrName","request::Request","uri::authority::Authority","byte_str::ByteStr","header::map::ValueDrain","header::map::Links","header::map::ValueIterMut","uri::builder::Builder","method::Method","<&T as std::fmt::Debug>","header::map::ExtraValue","request::Builder","header::map::Values","header::map::VacantEntry","status::StatusCode","header::map::ValueIter","error::Never","error::Error","uri::InvalidUriBytes","header::map::Entry","header::map::OccupiedEntry","response::Response","uri::scheme::Scheme2","request::Parts","header::map::ValuesMut","header::value::ToStrError","response::Parts","header::map::Cursor","method::InvalidMethod","header::map::Iter","uri::ErrorKind","header::name::InvalidHeaderName","header::map::Bucket","header::map::IterMut","header::name::HeaderName","header::map::GetAll","response::Builder","header::map::HashValue","uri::scheme::Protocol","uri::Uri","header::map::HeaderMap"]},"header::map::ValueIterMut":{"T":["<*mut T as std::marker::Send>","header::map::IterMut","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::Drain"]},"header::map::Values":{"T":["header::map::ValueIterMut","version::Version","header::name::MaybeLower","header::map::ExtraValue","header::map::Bucket","header::map::ValueDrain","header::map::Entry","header::map::ValueIter","error::Error","header::name::HeaderName","header::value::HeaderValue","header::map::Drain","header::map::IntoIter","header::map::Links","request::Request","uri::path::PathAndQuery","header::map::ValuesMut","<&T as std::fmt::Debug>","extensions::Extensions","request::Builder","uri::authority::Authority","header::map::Keys","header::map::Iter","header::map::HeaderMap","uri::scheme::Scheme","uri::Uri","uri::InvalidUriParts","header::name::HdrName","header::map::Link","uri::builder::Builder","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","header::name::InvalidHeaderNameBytes","method::InvalidMethod","header::map::Values","uri::port::Port","status::InvalidStatusCode","uri::Parts","status::StatusCode","header::map::HashValue","header::map::OccupiedEntry","method::Method","header::map::Cursor","header::map::GetAll","header::value::InvalidHeaderValue","header::name::StandardHeader","header::name::InvalidHeaderName","header::map::IterMut","uri::scheme::Protocol","uri::InvalidUriBytes","error::Never","uri::scheme::Scheme2","response::Builder","byte_str::ByteStr","request::Parts","response::Response","response::Parts","uri::ErrorKind","header::name::Repr","uri::InvalidUri","header::name::Custom","header::value::ToStrError"]},"header::map::ValuesMut":{"T":["uri::Parts","uri::Uri","header::value::InvalidHeaderValue","header::map::Bucket","header::map::Link","header::value::ToStrError","extensions::Extensions","header::map::Cursor","header::map::Drain","response::Parts","header::map::HeaderMap","status::InvalidStatusCode","uri::scheme::Scheme","response::Response","byte_str::ByteStr","header::value::HeaderValue","header::name::Custom","request::Request","header::map::Keys","header::map::Iter","header::name::HdrName","response::Builder","uri::builder::Builder","uri::InvalidUriBytes","uri::InvalidUriParts","header::map::ValueDrain","error::Error","uri::scheme::Scheme2","uri::scheme::Protocol","header::map::ValueIter","header::map::HashValue","header::map::Entry","header::name::InvalidHeaderName","header::map::ValuesMut","header::map::GetAll","status::StatusCode","header::map::ValueIterMut","uri::ErrorKind","header::map::Values","uri::port::Port","header::map::OccupiedEntry","uri::authority::Authority","header::map::VacantEntry","uri::path::PathAndQuery","version::Version","header::map::IterMut","header::map::Links","error::Never","method::InvalidMethod","header::name::StandardHeader","<&mut T as std::fmt::Debug>","method::Method","request::Parts","header::map::ExtraValue","request::Builder","header::name::HeaderName","uri::InvalidUri","header::map::IntoIter","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","header::name::Repr","header::value::InvalidHeaderValueBytes"]},"header::name::Repr":{"T":["header::name::Repr","byte_str::ByteStr","header::name::Custom","<*mut T as std::fmt::Debug>","header::name::StandardHeader","version::Version"]},"request::Request":{"T":["uri::Parts","request::Builder","response::Response","method::Method","uri::builder::Builder","request::Request","status::StatusCode","version::Version","response::Builder","header::map::HeaderMap","extensions::Extensions","uri::Uri"]},"response::Response":{"T":["version::Version","request::Builder","uri::Parts","method::Method","uri::Uri","header::map::HeaderMap","request::Request","response::Response","extensions::Extensions","uri::builder::Builder","response::Builder","status::StatusCode"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["<&T as std::convert::AsRef<U>>","uri::scheme::Scheme","uri::port::Port","method::Method","header::value::HeaderValue","uri::authority::Authority"]},"uri::scheme::Scheme2":{"T":["method::Method","header::map::Link","byte_str::ByteStr","<*mut T as std::fmt::Debug>","header::map::Links","header::map::Cursor","uri::Uri","header::name::HeaderName","header::name::MaybeLower","status::StatusCode","uri::authority::Authority","uri::scheme::Scheme","header::map::HeaderMap","header::name::StandardHeader","std::boxed::Box<byte_str::ByteStr>","header::value::HeaderValue","header::map::ExtraValue","header::map::HashValue","version::Version","uri::scheme::Protocol","uri::scheme::Scheme2","header::map::Bucket","header::name::Custom","uri::path::PathAndQuery","header::name::Repr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::IterMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::IterMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::IterMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::IterMut<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::IntoIter<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::IntoIter<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","convert::HttpTryFrom","std::cmp::Eq"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::IntoIter<T> as std::fmt::Debug>::fmt":{"T":["uri::InvalidUriBytes","status::InvalidStatusCode","header::map::ExtraValue","header::map::Entry","uri::InvalidUriParts","uri::path::PathAndQuery","response::Response","header::map::Links","uri::scheme::Scheme","byte_str::ByteStr","header::map::Iter","header::map::ValueIterMut","header::map::VacantEntry","uri::scheme::Scheme2","header::value::InvalidHeaderValueBytes","uri::authority::Authority","version::Version","header::map::Link","header::value::HeaderValue","header::map::Bucket","header::map::ValuesMut","<&mut T as std::fmt::Debug>","request::Builder","header::map::Values","uri::port::Port","response::Parts","header::map::IntoIter","method::InvalidMethod","header::name::HeaderName","header::name::StandardHeader","header::name::InvalidHeaderName","uri::Uri","uri::ErrorKind","extensions::Extensions","request::Parts","header::map::IterMut","uri::scheme::Protocol","error::Error","header::map::ValueDrain","header::name::HdrName","header::map::HeaderMap","header::value::InvalidHeaderValue","request::Request","uri::InvalidUri","header::map::Cursor","header::map::OccupiedEntry","header::map::HashValue","method::Method","error::Never","header::map::GetAll","header::name::MaybeLower","header::map::ValueIter","uri::Parts","response::Builder","header::map::Drain","status::StatusCode","uri::builder::Builder","header::name::InvalidHeaderNameBytes","header::map::Keys","header::name::Custom","header::name::Repr","header::value::ToStrError","<&T as std::fmt::Debug>"]},"header::map::Bucket":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","header::value::HeaderValue","header::map::Bucket","uri::Uri","header::name::Repr","header::name::MaybeLower","header::map::HeaderMap","version::Version","header::map::Links","method::Method","header::name::HeaderName","uri::scheme::Protocol","uri::path::PathAndQuery","header::map::Cursor","byte_str::ByteStr","header::map::Link","header::map::HashValue","uri::scheme::Scheme","uri::authority::Authority","uri::scheme::Scheme2","header::name::StandardHeader","status::StatusCode","header::map::ExtraValue","header::name::Custom"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","header::map::Drain","<*mut T as std::marker::Sync>"]},"header::map::Entry":{"T":["uri::Uri","header::name::Custom","uri::Parts","status::InvalidStatusCode","header::name::StandardHeader","request::Parts","uri::ErrorKind","uri::scheme::Scheme2","<*const T as std::fmt::Debug>","uri::InvalidUri","status::StatusCode","header::map::Iter","header::map::VacantEntry","header::name::HdrName","header::map::Link","header::map::Values","version::Version","uri::authority::Authority","uri::InvalidUriBytes","request::Request","header::name::Repr","response::Response","header::value::HeaderValue","header::name::HeaderName","request::Builder","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","header::map::HashValue","header::map::GetAll","uri::InvalidUriParts","header::map::IterMut","header::value::InvalidHeaderValueBytes","header::map::HeaderMap","header::map::ValuesMut","header::map::Cursor","header::map::Bucket","extensions::Extensions","uri::builder::Builder","response::Parts","header::value::ToStrError","response::Builder","header::map::Entry","uri::scheme::Scheme","header::map::Links","header::map::ValueDrain","header::map::ValueIter","header::map::Keys","byte_str::ByteStr","method::InvalidMethod","header::name::MaybeLower","header::map::IntoIter","header::map::ValueIterMut","header::name::InvalidHeaderName","method::Method","uri::path::PathAndQuery","header::map::OccupiedEntry","uri::port::Port","error::Error","error::Never","header::value::InvalidHeaderValue","uri::scheme::Protocol","header::map::Drain"]},"header::map::ExtraValue":{"T":["header::map::Link","header::name::Custom","header::map::ExtraValue","uri::scheme::Scheme","byte_str::ByteStr","uri::scheme::Scheme2","version::Version","status::StatusCode","header::map::HashValue","uri::scheme::Protocol","uri::path::PathAndQuery","method::Method","header::map::HeaderMap","std::clone::impls::<impl std::clone::Clone for *mut T>","header::name::HeaderName","uri::Uri","header::name::MaybeLower","header::value::HeaderValue","uri::authority::Authority","header::map::Cursor","header::name::StandardHeader","header::map::Links","header::name::Repr","header::map::Bucket"]},"header::map::GetAll":{"T":["header::name::Custom","version::Version","byte_str::ByteStr","header::map::GetAll","header::map::Link","header::name::StandardHeader","uri::ErrorKind","header::map::HashValue","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::Repr","header::map::Cursor","header::map::HeaderMap"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["uri::InvalidUri","response::Builder","header::map::ValuesMut","header::value::HeaderValue","header::map::Entry","header::map::HeaderMap","uri::scheme::Protocol","header::name::MaybeLower","header::name::InvalidHeaderName","header::map::ValueDrain","header::map::IntoIter","header::map::Link","header::map::ValueIter","byte_str::ByteStr","header::map::IterMut","header::map::Keys","uri::builder::Builder","header::map::GetAll","header::map::Iter","uri::scheme::Scheme2","uri::path::PathAndQuery","header::map::HashValue","request::Parts","header::map::OccupiedEntry","header::value::ToStrError","uri::ErrorKind","extensions::Extensions","request::Builder","header::map::Values","uri::Parts","header::map::ValueIterMut","header::name::Repr","error::Error","method::Method","header::value::InvalidHeaderValue","status::StatusCode","response::Response","uri::InvalidUriParts","header::map::VacantEntry","uri::port::Port","error::Never","uri::scheme::Scheme","header::map::Bucket","header::map::Links","header::name::StandardHeader","header::map::Cursor","<&T as std::fmt::Debug>","version::Version","header::name::InvalidHeaderNameBytes","uri::authority::Authority","header::name::HeaderName","request::Request","uri::InvalidUriBytes","header::name::HdrName","status::InvalidStatusCode","response::Parts","header::map::ExtraValue","header::value::InvalidHeaderValueBytes","header::name::Custom","method::InvalidMethod","uri::Uri","header::map::Drain"]},"header::map::Iter":{"T":["<*const T as std::marker::Sync>","header::map::ValueDrain","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::Iter"]},"header::map::IterMut":{"T":["header::map::Iter","header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::IterMut"]},"header::map::Keys":{"T":["response::Parts","header::map::ValueIter","header::map::ValueDrain","header::map::Cursor","uri::InvalidUriBytes","header::name::Custom","header::map::Bucket","request::Builder","header::map::Keys","header::value::InvalidHeaderValue","header::map::ValueIterMut","uri::Parts","header::map::Values","header::map::HashValue","request::Parts","error::Error","header::name::InvalidHeaderName","header::map::Iter","header::value::InvalidHeaderValueBytes","header::map::Drain","extensions::Extensions","uri::port::Port","uri::scheme::Scheme2","header::map::Link","header::name::HeaderName","status::StatusCode","uri::path::PathAndQuery","header::value::HeaderValue","uri::scheme::Scheme","response::Response","uri::InvalidUri","method::InvalidMethod","header::name::InvalidHeaderNameBytes","header::map::OccupiedEntry","response::Builder","header::map::IntoIter","header::name::StandardHeader","uri::InvalidUriParts","<*const T as std::fmt::Debug>","uri::scheme::Protocol","byte_str::ByteStr","status::InvalidStatusCode","uri::ErrorKind","header::name::MaybeLower","header::value::ToStrError","header::name::HdrName","uri::authority::Authority","header::map::IterMut","header::map::VacantEntry","header::name::Repr","uri::builder::Builder","header::map::ValuesMut","header::map::Links","uri::Uri","error::Never","request::Request","header::map::Entry","header::map::ExtraValue","version::Version","header::map::GetAll","header::map::HeaderMap","method::Method"]},"header::map::OccupiedEntry":{"T":["extensions::Extensions","uri::path::PathAndQuery","header::name::InvalidHeaderNameBytes","uri::ErrorKind","header::map::Bucket","header::name::MaybeLower","header::name::StandardHeader","header::map::ValueIter","uri::builder::Builder","header::map::ValueIterMut","uri::scheme::Scheme","header::name::Custom","status::StatusCode","header::map::Iter","header::map::VacantEntry","header::map::Cursor","header::map::ValueDrain","method::Method","header::map::Keys","header::name::Repr","header::map::ExtraValue","request::Builder","header::map::OccupiedEntry","uri::scheme::Scheme2","response::Builder","header::name::InvalidHeaderName","uri::port::Port","uri::Uri","uri::InvalidUriBytes","header::map::Link","<*mut T as std::fmt::Debug>","request::Parts","request::Request","header::name::HeaderName","header::map::HashValue","header::map::Drain","uri::authority::Authority","header::value::HeaderValue","error::Error","header::map::IterMut","uri::InvalidUriParts","response::Parts","header::value::InvalidHeaderValue","header::value::InvalidHeaderValueBytes","header::map::HeaderMap","header::map::Entry","header::map::GetAll","error::Never","header::map::IntoIter","uri::InvalidUri","method::InvalidMethod","uri::scheme::Protocol","header::name::HdrName","byte_str::ByteStr","header::map::Values","status::InvalidStatusCode","header::value::ToStrError","version::Version","header::map::Links","uri::Parts","response::Response","header::map::ValuesMut"]},"header::map::VacantEntry":{"T":["header::map::OccupiedEntry","method::Method","header::map::HeaderMap","header::map::HashValue","uri::authority::Authority","response::Builder","extensions::Extensions","header::map::Iter","uri::scheme::Protocol","header::map::ValueIterMut","uri::scheme::Scheme2","header::name::Repr","header::map::IterMut","error::Never","header::map::GetAll","header::map::Drain","uri::InvalidUri","uri::builder::Builder","error::Error","response::Response","header::map::ValueIter","request::Parts","header::map::Bucket","header::value::InvalidHeaderValue","header::map::Keys","header::map::Links","uri::path::PathAndQuery","header::map::Cursor","header::name::HdrName","header::map::VacantEntry","header::map::ExtraValue","header::name::Custom","uri::InvalidUriBytes","header::value::HeaderValue","uri::Parts","response::Parts","request::Builder","method::InvalidMethod","header::name::InvalidHeaderName","header::map::Link","header::map::ValuesMut","header::value::ToStrError","header::name::InvalidHeaderNameBytes","<&T as std::fmt::Debug>","version::Version","header::map::Values","uri::InvalidUriParts","uri::port::Port","status::InvalidStatusCode","header::map::ValueDrain","header::name::StandardHeader","header::map::IntoIter","byte_str::ByteStr","header::name::HeaderName","status::StatusCode","request::Request","header::map::Entry","uri::Uri","uri::ErrorKind","header::value::InvalidHeaderValueBytes","header::name::MaybeLower","uri::scheme::Scheme"]},"header::map::ValueDrain":{"T":["<*const T as std::marker::Sync>","header::map::Iter","header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["header::map::GetAll","header::name::StandardHeader","<*const T as std::fmt::Debug>","header::map::HeaderMap","header::map::Iter","header::map::Link","extensions::Extensions","request::Parts","header::map::VacantEntry","header::map::Bucket","header::map::Keys","uri::authority::Authority","header::name::InvalidHeaderName","request::Request","header::map::Links","request::Builder","header::name::HeaderName","uri::InvalidUriBytes","header::map::OccupiedEntry","uri::scheme::Scheme2","header::map::Entry","uri::path::PathAndQuery","uri::builder::Builder","version::Version","uri::InvalidUriParts","header::name::Repr","error::Never","header::map::HashValue","header::map::IntoIter","header::value::InvalidHeaderValueBytes","uri::scheme::Protocol","status::StatusCode","error::Error","header::map::ExtraValue","header::map::Cursor","header::name::MaybeLower","uri::scheme::Scheme","header::value::ToStrError","header::name::InvalidHeaderNameBytes","status::InvalidStatusCode","header::map::ValuesMut","byte_str::ByteStr","header::map::Values","response::Builder","header::name::HdrName","uri::InvalidUri","header::name::Custom","header::value::InvalidHeaderValue","uri::Parts","header::map::ValueIter","response::Parts","header::value::HeaderValue","header::map::ValueIterMut","header::map::ValueDrain","method::Method","uri::Uri","method::InvalidMethod","uri::ErrorKind","response::Response","header::map::IterMut","header::map::Drain","uri::port::Port"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","<*const T as std::marker::Send>","header::map::Drain"]},"header::map::Values":{"T":["status::StatusCode","header::map::Drain","header::name::MaybeLower","response::Builder","byte_str::ByteStr","uri::Uri","request::Parts","<*mut T as std::fmt::Debug>","error::Error","header::map::Iter","header::value::ToStrError","header::map::ValueDrain","header::name::HeaderName","uri::scheme::Protocol","response::Response","header::map::IntoIter","version::Version","header::map::ValueIterMut","method::Method","extensions::Extensions","header::map::IterMut","header::value::InvalidHeaderValueBytes","status::InvalidStatusCode","uri::scheme::Scheme2","uri::path::PathAndQuery","uri::port::Port","header::map::Keys","header::map::VacantEntry","request::Builder","header::map::Link","header::value::HeaderValue","header::map::ExtraValue","response::Parts","header::name::InvalidHeaderName","header::map::GetAll","uri::authority::Authority","uri::InvalidUriParts","header::map::Links","header::value::InvalidHeaderValue","error::Never","header::name::StandardHeader","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme","request::Request","uri::InvalidUri","header::map::Entry","uri::ErrorKind","header::map::OccupiedEntry","header::map::ValueIter","header::map::Values","header::map::HeaderMap","header::name::Repr","header::map::HashValue","header::name::Custom","header::map::ValuesMut","method::InvalidMethod","header::map::Cursor","uri::InvalidUriBytes","header::map::Bucket","header::name::HdrName","uri::builder::Builder","uri::Parts"]},"header::map::ValuesMut":{"T":["header::map::HashValue","status::StatusCode","header::map::Iter","header::map::ValueDrain","<&mut T as std::fmt::Debug>","header::name::Repr","uri::InvalidUri","method::Method","header::value::InvalidHeaderValueBytes","method::InvalidMethod","status::InvalidStatusCode","header::map::Links","header::map::Entry","header::name::InvalidHeaderName","header::map::Keys","header::map::Bucket","request::Builder","byte_str::ByteStr","header::map::ExtraValue","header::map::Drain","header::map::ValuesMut","uri::Parts","extensions::Extensions","header::value::HeaderValue","header::map::OccupiedEntry","version::Version","header::name::HeaderName","uri::InvalidUriBytes","header::name::StandardHeader","header::map::VacantEntry","response::Response","header::map::GetAll","uri::scheme::Scheme2","uri::builder::Builder","header::map::IterMut","header::map::ValueIterMut","header::name::MaybeLower","uri::Uri","header::map::Values","uri::ErrorKind","uri::authority::Authority","error::Never","response::Parts","uri::InvalidUriParts","header::value::ToStrError","header::map::Link","uri::port::Port","header::map::Cursor","uri::path::PathAndQuery","header::value::InvalidHeaderValue","request::Request","request::Parts","header::name::InvalidHeaderNameBytes","uri::scheme::Protocol","header::name::HdrName","header::name::Custom","header::map::IntoIter","uri::scheme::Scheme","response::Builder","header::map::ValueIter","header::map::HeaderMap","error::Error"]},"header::name::Repr":{"T":["version::Version","<*const T as std::fmt::Debug>","header::name::Custom","byte_str::ByteStr","header::name::StandardHeader","header::name::Repr"]},"request::Request":{"T":["version::Version","uri::Uri","method::Method","request::Request","response::Builder","status::StatusCode","uri::Parts","response::Response","uri::builder::Builder","request::Builder","header::map::HeaderMap","extensions::Extensions"]},"response::Response":{"T":["extensions::Extensions","uri::Parts","response::Response","status::StatusCode","header::map::HeaderMap","uri::builder::Builder","uri::Uri","request::Request","request::Builder","method::Method","version::Version","response::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["method::Method","uri::scheme::Scheme","uri::authority::Authority","<&mut T as std::fmt::Debug>","header::value::HeaderValue","uri::port::Port"]},"uri::scheme::Scheme2":{"T":["header::name::Repr","header::map::Link","header::map::Cursor","header::name::StandardHeader","uri::scheme::Protocol","status::StatusCode","header::map::HeaderMap","header::map::Bucket","header::map::HashValue","uri::scheme::Scheme2","uri::authority::Authority","header::value::HeaderValue","header::map::Links","uri::path::PathAndQuery","uri::scheme::Scheme","version::Version","header::map::ExtraValue","std::boxed::Box<byte_str::ByteStr>","uri::Uri","header::name::Custom","header::name::HeaderName","byte_str::ByteStr","method::Method","<*mut T as std::fmt::Debug>","header::name::MaybeLower"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::IntoIter<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::IntoIter<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::IntoIter<T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::IntoIter<T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Keys<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<header::map::Keys<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","convert::HttpTryFrom","std::marker::Sized","std::cmp::Eq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sized","std::marker::Send","std::fmt::Debug","std::marker::Sync"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"request::Request":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"response::Response":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<header::map::Keys<'a, T> as std::fmt::Debug>::fmt":{"T":["error::Error","uri::Parts","header::map::OccupiedEntry","header::map::HeaderMap","request::Builder","uri::InvalidUriParts","header::name::Custom","response::Parts","status::InvalidStatusCode","header::name::Repr","request::Parts","status::StatusCode","<&mut T as std::fmt::Debug>","header::map::Links","header::map::GetAll","uri::port::Port","uri::path::PathAndQuery","header::name::MaybeLower","byte_str::ByteStr","uri::InvalidUri","uri::scheme::Scheme2","header::map::VacantEntry","header::map::Values","header::value::ToStrError","request::Request","uri::scheme::Protocol","header::map::HashValue","header::map::Cursor","uri::InvalidUriBytes","version::Version","header::map::Entry","header::map::Iter","header::map::ValuesMut","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","method::InvalidMethod","header::map::Link","header::map::ExtraValue","method::Method","error::Never","uri::authority::Authority","uri::builder::Builder","header::map::Drain","header::name::InvalidHeaderName","header::name::StandardHeader","header::map::IntoIter","header::map::IterMut","response::Response","uri::ErrorKind","header::map::ValueDrain","response::Builder","header::map::ValueIterMut","header::value::InvalidHeaderValue","uri::Uri","header::map::Keys","header::map::Bucket","header::name::HeaderName","header::map::ValueIter","extensions::Extensions","header::name::HdrName","uri::scheme::Scheme","header::name::InvalidHeaderNameBytes"]},"header::map::Bucket":{"T":["uri::Uri","header::name::Repr","uri::authority::Authority","version::Version","<*mut T as std::fmt::Debug>","method::Method","header::map::Bucket","uri::scheme::Scheme","header::map::HashValue","header::value::HeaderValue","uri::scheme::Protocol","header::name::MaybeLower","status::StatusCode","byte_str::ByteStr","uri::scheme::Scheme2","header::map::ExtraValue","header::map::Links","header::name::Custom","header::name::HeaderName","uri::path::PathAndQuery","header::name::StandardHeader","header::map::Cursor","header::map::Link","header::map::HeaderMap"]},"header::map::Drain":{"T":["header::map::IterMut","<*const T as std::fmt::Debug>","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::Drain"]},"header::map::Entry":{"T":["header::name::MaybeLower","status::InvalidStatusCode","header::map::HashValue","header::map::ValueDrain","header::name::Custom","uri::scheme::Protocol","<*mut T as std::fmt::Debug>","header::map::Cursor","header::name::HeaderName","request::Request","header::name::InvalidHeaderName","header::value::HeaderValue","request::Parts","request::Builder","header::value::InvalidHeaderValue","uri::ErrorKind","uri::path::PathAndQuery","header::map::HeaderMap","status::StatusCode","uri::scheme::Scheme2","method::Method","header::map::ExtraValue","header::map::OccupiedEntry","header::value::ToStrError","byte_str::ByteStr","uri::port::Port","uri::Parts","header::name::StandardHeader","error::Never","header::map::ValueIter","method::InvalidMethod","uri::Uri","header::map::Values","header::map::Iter","version::Version","uri::InvalidUriParts","header::map::Entry","uri::InvalidUri","response::Response","header::map::IntoIter","header::map::ValuesMut","header::name::InvalidHeaderNameBytes","header::map::Bucket","header::name::Repr","header::map::Keys","header::map::Link","uri::authority::Authority","header::name::HdrName","extensions::Extensions","error::Error","response::Parts","header::map::Links","uri::InvalidUriBytes","header::map::IterMut","uri::builder::Builder","header::map::Drain","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme","header::map::VacantEntry","header::map::GetAll","header::map::ValueIterMut","response::Builder"]},"header::map::ExtraValue":{"T":["header::name::HeaderName","method::Method","<&T as std::fmt::Debug>","uri::authority::Authority","header::name::Custom","uri::scheme::Scheme","byte_str::ByteStr","status::StatusCode","uri::scheme::Protocol","header::map::HeaderMap","uri::scheme::Scheme2","version::Version","header::map::Cursor","header::map::ExtraValue","uri::Uri","header::map::Link","header::name::Repr","header::name::MaybeLower","header::map::Links","header::name::StandardHeader","uri::path::PathAndQuery","header::map::HashValue","header::map::Bucket","header::value::HeaderValue"]},"header::map::GetAll":{"T":["header::map::HashValue","header::map::GetAll","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>","header::name::Repr","version::Version","header::map::Cursor","uri::ErrorKind","header::map::Link","header::map::HeaderMap","byte_str::ByteStr","header::name::StandardHeader","header::name::Custom"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["request::Request","header::value::ToStrError","header::map::IterMut","header::map::HeaderMap","version::Version","header::map::ValuesMut","header::map::Links","header::name::InvalidHeaderNameBytes","error::Never","status::StatusCode","header::map::HashValue","uri::InvalidUri","uri::ErrorKind","<*const T as std::fmt::Debug>","header::name::Repr","request::Builder","header::map::VacantEntry","header::value::InvalidHeaderValue","uri::Uri","uri::InvalidUriParts","uri::scheme::Scheme","uri::path::PathAndQuery","header::name::Custom","header::map::GetAll","header::map::ValueDrain","byte_str::ByteStr","header::name::InvalidHeaderName","header::name::StandardHeader","header::map::IntoIter","uri::Parts","uri::scheme::Protocol","header::value::HeaderValue","header::map::Entry","response::Parts","header::value::InvalidHeaderValueBytes","uri::authority::Authority","header::map::OccupiedEntry","response::Builder","request::Parts","error::Error","header::map::Values","header::map::ExtraValue","status::InvalidStatusCode","header::map::Iter","uri::scheme::Scheme2","header::map::Link","header::map::ValueIter","header::map::Bucket","uri::port::Port","method::InvalidMethod","header::map::Keys","header::name::HdrName","header::map::Drain","header::map::Cursor","uri::builder::Builder","header::map::ValueIterMut","method::Method","header::name::HeaderName","header::name::MaybeLower","extensions::Extensions","response::Response","uri::InvalidUriBytes"]},"header::map::Iter":{"T":["header::map::Iter","header::map::ValueIterMut","<*mut T as std::fmt::Debug>","header::map::Drain","header::map::ValueDrain","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::ValueIterMut","header::map::IterMut","header::map::Iter","<*const T as std::fmt::Debug>","header::map::Drain","header::map::ValueDrain"]},"header::map::Keys":{"T":["header::map::Values","header::value::HeaderValue","header::map::Entry","uri::scheme::Scheme","header::map::VacantEntry","response::Parts","header::map::OccupiedEntry","method::Method","header::map::Link","header::name::InvalidHeaderNameBytes","header::name::Repr","header::map::IterMut","uri::Uri","error::Error","byte_str::ByteStr","uri::ErrorKind","uri::port::Port","uri::InvalidUriBytes","uri::path::PathAndQuery","header::map::ValueDrain","header::name::StandardHeader","<&mut T as std::fmt::Debug>","uri::Parts","request::Request","header::map::HashValue","header::map::Drain","header::map::Keys","header::map::ValueIterMut","header::map::ExtraValue","extensions::Extensions","header::map::Cursor","header::name::HdrName","header::name::HeaderName","header::map::ValuesMut","header::map::Iter","header::map::IntoIter","status::InvalidStatusCode","header::map::Bucket","header::map::HeaderMap","status::StatusCode","uri::InvalidUri","header::name::MaybeLower","version::Version","header::map::Links","header::map::GetAll","response::Builder","uri::authority::Authority","error::Never","method::InvalidMethod","response::Response","header::map::ValueIter","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","request::Parts","uri::scheme::Scheme2","header::name::Custom","header::value::InvalidHeaderValue","request::Builder","uri::scheme::Protocol","uri::builder::Builder","header::name::InvalidHeaderName","header::value::ToStrError"]},"header::map::OccupiedEntry":{"T":["header::value::HeaderValue","header::value::ToStrError","header::name::HeaderName","header::map::ValueIter","header::name::InvalidHeaderName","header::map::IntoIter","header::map::Links","request::Parts","header::value::InvalidHeaderValueBytes","byte_str::ByteStr","uri::Uri","status::StatusCode","header::map::Keys","request::Request","response::Response","header::map::HeaderMap","header::value::InvalidHeaderValue","version::Version","uri::InvalidUriBytes","header::map::IterMut","method::Method","response::Builder","response::Parts","<&T as std::fmt::Debug>","header::map::Drain","request::Builder","header::map::GetAll","header::name::HdrName","header::name::Repr","header::name::MaybeLower","uri::port::Port","error::Never","header::map::HashValue","header::map::Entry","header::map::Bucket","header::map::Iter","header::map::VacantEntry","uri::InvalidUriParts","uri::scheme::Protocol","uri::builder::Builder","header::map::ValueIterMut","uri::ErrorKind","extensions::Extensions","uri::Parts","method::InvalidMethod","uri::authority::Authority","header::map::ExtraValue","header::map::OccupiedEntry","uri::InvalidUri","uri::scheme::Scheme","status::InvalidStatusCode","header::map::Cursor","header::map::ValueDrain","header::name::StandardHeader","header::map::Values","error::Error","uri::path::PathAndQuery","header::map::ValuesMut","header::name::InvalidHeaderNameBytes","header::map::Link","header::name::Custom","uri::scheme::Scheme2"]},"header::map::VacantEntry":{"T":["request::Request","header::value::InvalidHeaderValue","header::map::VacantEntry","status::StatusCode","header::map::Links","status::InvalidStatusCode","header::value::ToStrError","header::value::InvalidHeaderValueBytes","response::Response","header::name::StandardHeader","header::name::MaybeLower","header::map::HeaderMap","response::Parts","uri::Parts","uri::InvalidUriBytes","header::name::HdrName","request::Parts","header::map::ValueIterMut","header::map::Cursor","response::Builder","method::InvalidMethod","header::map::Values","error::Never","uri::port::Port","request::Builder","uri::authority::Authority","uri::InvalidUri","header::map::Bucket","version::Version","header::name::InvalidHeaderName","header::map::ValuesMut","header::map::ValueDrain","header::map::GetAll","header::name::HeaderName","header::map::Keys","header::name::Custom","header::map::HashValue","uri::InvalidUriParts","header::map::ValueIter","byte_str::ByteStr","header::map::Drain","header::name::InvalidHeaderNameBytes","header::name::Repr","header::map::OccupiedEntry","header::value::HeaderValue","uri::builder::Builder","header::map::ExtraValue","uri::scheme::Scheme2","header::map::Link","header::map::Entry","<*mut T as std::fmt::Debug>","header::map::IntoIter","uri::scheme::Scheme","error::Error","uri::ErrorKind","uri::scheme::Protocol","extensions::Extensions","header::map::Iter","header::map::IterMut","uri::path::PathAndQuery","uri::Uri","method::Method"]},"header::map::ValueDrain":{"T":["<*const T as std::marker::Sync>","header::map::Drain","header::map::IterMut","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["header::map::HeaderMap","error::Error","header::name::Custom","uri::Uri","header::map::Link","uri::authority::Authority","header::value::InvalidHeaderValueBytes","uri::scheme::Protocol","uri::InvalidUriParts","header::map::OccupiedEntry","header::map::VacantEntry","method::InvalidMethod","uri::scheme::Scheme2","header::value::InvalidHeaderValue","header::map::Keys","header::map::HashValue","request::Builder","<*mut T as std::fmt::Debug>","uri::port::Port","header::name::StandardHeader","header::map::Links","header::name::InvalidHeaderNameBytes","error::Never","header::map::ValueDrain","request::Parts","header::map::GetAll","header::map::IntoIter","header::name::Repr","header::value::ToStrError","header::value::HeaderValue","response::Builder","status::StatusCode","header::map::ValueIter","header::name::HdrName","header::map::IterMut","request::Request","version::Version","extensions::Extensions","header::map::Bucket","header::map::ValuesMut","header::map::Entry","uri::InvalidUriBytes","uri::builder::Builder","header::name::InvalidHeaderName","uri::InvalidUri","uri::path::PathAndQuery","response::Parts","uri::Parts","header::map::Drain","header::name::HeaderName","uri::ErrorKind","byte_str::ByteStr","method::Method","response::Response","header::map::Values","header::map::ValueIterMut","header::name::MaybeLower","header::map::Iter","header::map::Cursor","status::InvalidStatusCode","header::map::ExtraValue","uri::scheme::Scheme"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","<*mut T as std::marker::Send>","header::map::ValueDrain","header::map::Iter","header::map::Drain","header::map::IterMut"]},"header::map::Values":{"T":["request::Parts","header::name::InvalidHeaderName","header::map::HeaderMap","header::map::Bucket","error::Never","header::map::ValueIter","uri::scheme::Scheme2","header::map::OccupiedEntry","header::map::Values","header::value::ToStrError","header::name::Repr","header::name::MaybeLower","status::StatusCode","header::map::IntoIter","byte_str::ByteStr","header::map::Keys","uri::scheme::Protocol","response::Builder","response::Response","uri::path::PathAndQuery","header::name::HdrName","header::map::ValuesMut","header::map::ExtraValue","header::map::IterMut","header::map::HashValue","header::map::Links","header::value::HeaderValue","header::map::Link","extensions::Extensions","header::value::InvalidHeaderValue","header::map::GetAll","uri::Parts","header::map::Cursor","method::Method","header::name::Custom","uri::InvalidUri","request::Builder","uri::port::Port","version::Version","request::Request","header::map::Iter","status::InvalidStatusCode","uri::scheme::Scheme","header::map::ValueDrain","header::map::Drain","header::name::HeaderName","header::map::VacantEntry","response::Parts","uri::builder::Builder","error::Error","header::name::StandardHeader","method::InvalidMethod","uri::authority::Authority","uri::InvalidUriBytes","uri::ErrorKind","header::map::Entry","header::value::InvalidHeaderValueBytes","uri::Uri","<*const T as std::fmt::Debug>","header::name::InvalidHeaderNameBytes","uri::InvalidUriParts","header::map::ValueIterMut"]},"header::map::ValuesMut":{"T":["response::Parts","uri::InvalidUriParts","header::map::ExtraValue","uri::Uri","uri::scheme::Scheme2","header::map::Entry","<&T as std::fmt::Debug>","header::map::Link","header::map::ValueIterMut","uri::InvalidUri","uri::ErrorKind","header::map::Iter","status::InvalidStatusCode","header::value::HeaderValue","header::map::GetAll","header::map::Keys","byte_str::ByteStr","response::Builder","uri::builder::Builder","header::map::Bucket","uri::scheme::Scheme","response::Response","uri::scheme::Protocol","extensions::Extensions","header::map::Cursor","header::value::InvalidHeaderValue","header::name::StandardHeader","header::map::Values","error::Never","header::map::OccupiedEntry","uri::path::PathAndQuery","request::Builder","header::value::ToStrError","version::Version","status::StatusCode","request::Request","header::map::IterMut","header::name::HdrName","header::map::HashValue","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","header::map::HeaderMap","header::map::ValueDrain","uri::port::Port","method::InvalidMethod","header::map::Drain","header::name::Repr","header::name::InvalidHeaderName","request::Parts","header::map::ValueIter","header::map::IntoIter","method::Method","header::name::HeaderName","header::map::ValuesMut","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","uri::Parts","error::Error","header::name::Custom","uri::authority::Authority","header::map::Links","header::name::MaybeLower"]},"header::name::Repr":{"T":["header::name::Repr","std::clone::impls::<impl std::clone::Clone for *const T>","header::name::StandardHeader","byte_str::ByteStr","version::Version","header::name::Custom"]},"request::Request":{"T":["request::Builder","status::StatusCode","response::Builder","method::Method","response::Response","uri::Parts","extensions::Extensions","uri::Uri","header::map::HeaderMap","uri::builder::Builder","request::Request","version::Version"]},"response::Response":{"T":["response::Response","extensions::Extensions","header::map::HeaderMap","request::Builder","uri::Uri","uri::builder::Builder","status::StatusCode","version::Version","response::Builder","uri::Parts","request::Request","method::Method"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["method::Method","uri::port::Port","header::value::HeaderValue","uri::scheme::Scheme","<&T as std::fmt::Debug>","uri::authority::Authority"]},"uri::scheme::Scheme2":{"T":["uri::path::PathAndQuery","uri::Uri","uri::scheme::Scheme","header::name::HeaderName","header::map::HashValue","header::name::Repr","header::map::ExtraValue","uri::scheme::Scheme2","header::map::Bucket","header::map::Cursor","header::name::Custom","header::map::HeaderMap","std::clone::impls::<impl std::clone::Clone for *mut T>","header::name::MaybeLower","uri::scheme::Protocol","version::Version","status::StatusCode","uri::authority::Authority","std::boxed::Box<byte_str::ByteStr>","header::map::Links","method::Method","header::map::Link","header::name::StandardHeader","byte_str::ByteStr","header::value::HeaderValue"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Keys<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Keys<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Keys<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Keys<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Values<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Values<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","convert::HttpTryFrom"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Send","std::fmt::Debug","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::clone::Clone"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Values<'a, T> as std::fmt::Debug>::fmt":{"T":["uri::Parts","byte_str::ByteStr","header::name::InvalidHeaderName","request::Builder","uri::path::PathAndQuery","header::map::ValueIterMut","uri::scheme::Protocol","header::map::Bucket","header::name::HdrName","extensions::Extensions","uri::InvalidUri","header::name::MaybeLower","header::map::OccupiedEntry","header::name::InvalidHeaderNameBytes","header::map::Entry","header::value::ToStrError","header::value::InvalidHeaderValueBytes","header::map::Iter","header::map::ValueDrain","header::map::GetAll","header::map::Keys","uri::Uri","header::map::Links","method::InvalidMethod","header::map::Drain","method::Method","uri::port::Port","response::Builder","uri::authority::Authority","error::Never","header::value::InvalidHeaderValue","header::map::Values","uri::InvalidUriParts","request::Request","request::Parts","<&T as std::fmt::Debug>","header::name::Repr","header::map::Cursor","header::name::Custom","header::map::Link","uri::InvalidUriBytes","header::value::HeaderValue","header::map::ExtraValue","header::map::HashValue","response::Parts","header::map::HeaderMap","error::Error","header::map::IterMut","uri::builder::Builder","header::map::ValuesMut","header::name::StandardHeader","version::Version","uri::scheme::Scheme","uri::scheme::Scheme2","uri::ErrorKind","response::Response","header::map::IntoIter","header::name::HeaderName","status::StatusCode","header::map::VacantEntry","header::map::ValueIter","status::InvalidStatusCode"]},"header::map::Bucket":{"T":["header::name::StandardHeader","header::map::Links","uri::Uri","uri::path::PathAndQuery","status::StatusCode","std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::HeaderMap","uri::scheme::Protocol","header::map::Cursor","header::map::ExtraValue","version::Version","uri::scheme::Scheme","header::map::Link","header::map::HashValue","header::map::Bucket","header::name::HeaderName","uri::scheme::Scheme2","method::Method","header::name::Custom","uri::authority::Authority","header::value::HeaderValue","byte_str::ByteStr","header::name::Repr","header::name::MaybeLower"]},"header::map::Drain":{"T":["header::map::Iter","header::map::ValueIterMut","header::map::Drain","header::map::IterMut","<*const T as std::fmt::Debug>","header::map::ValueDrain"]},"header::map::Entry":{"T":["response::Response","header::map::Keys","uri::authority::Authority","request::Builder","extensions::Extensions","header::value::HeaderValue","uri::builder::Builder","<&mut T as std::fmt::Debug>","uri::scheme::Protocol","method::InvalidMethod","header::map::ValueDrain","uri::InvalidUriParts","header::map::ValueIterMut","header::name::Repr","header::map::Values","error::Never","response::Builder","header::map::Iter","header::name::HdrName","uri::InvalidUriBytes","header::value::ToStrError","header::map::Drain","header::map::HashValue","uri::scheme::Scheme","header::map::ValueIter","uri::port::Port","response::Parts","header::map::Cursor","uri::InvalidUri","header::map::Bucket","header::map::IterMut","header::name::MaybeLower","header::name::InvalidHeaderName","status::StatusCode","header::name::Custom","header::map::OccupiedEntry","header::map::ExtraValue","version::Version","header::map::Links","header::map::IntoIter","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderNameBytes","header::map::GetAll","header::name::StandardHeader","header::value::InvalidHeaderValue","error::Error","header::map::Link","uri::path::PathAndQuery","header::map::VacantEntry","uri::Parts","header::map::HeaderMap","request::Parts","header::map::Entry","method::Method","uri::ErrorKind","status::InvalidStatusCode","header::map::ValuesMut","header::name::HeaderName","byte_str::ByteStr","request::Request","uri::scheme::Scheme2","uri::Uri"]},"header::map::ExtraValue":{"T":["uri::Uri","header::name::MaybeLower","method::Method","header::map::Links","header::name::Custom","header::map::Link","uri::scheme::Scheme","uri::authority::Authority","header::map::Cursor","uri::path::PathAndQuery","uri::scheme::Scheme2","byte_str::ByteStr","header::name::Repr","header::map::HashValue","header::name::StandardHeader","uri::scheme::Protocol","header::map::Bucket","version::Version","header::map::ExtraValue","std::clone::impls::<impl std::clone::Clone for *mut T>","header::value::HeaderValue","header::name::HeaderName","header::map::HeaderMap","status::StatusCode"]},"header::map::GetAll":{"T":["byte_str::ByteStr","header::name::Repr","header::name::Custom","header::map::HeaderMap","header::map::GetAll","uri::ErrorKind","header::name::StandardHeader","header::map::HashValue","header::map::Link","header::map::Cursor","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>","version::Version"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["extensions::Extensions","header::map::Entry","method::InvalidMethod","header::value::InvalidHeaderValue","header::map::IterMut","header::name::StandardHeader","header::map::Bucket","header::map::ValueIter","header::map::VacantEntry","header::map::Link","header::map::HashValue","response::Builder","uri::authority::Authority","header::map::Keys","header::map::Links","uri::path::PathAndQuery","request::Builder","uri::ErrorKind","error::Error","method::Method","header::map::ValueIterMut","uri::Uri","uri::scheme::Protocol","response::Response","header::name::Repr","uri::InvalidUriParts","header::name::HeaderName","status::InvalidStatusCode","header::map::Iter","error::Never","header::map::ValueDrain","version::Version","header::map::Cursor","uri::InvalidUri","header::name::InvalidHeaderNameBytes","header::name::Custom","uri::port::Port","uri::builder::Builder","header::map::Values","header::map::ExtraValue","header::value::ToStrError","header::name::HdrName","response::Parts","header::value::HeaderValue","header::map::Drain","header::map::OccupiedEntry","header::map::IntoIter","uri::InvalidUriBytes","header::map::GetAll","uri::scheme::Scheme","byte_str::ByteStr","header::map::ValuesMut","request::Parts","request::Request","header::name::InvalidHeaderName","status::StatusCode","uri::scheme::Scheme2","header::map::HeaderMap","header::name::MaybeLower","<*mut T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","uri::Parts"]},"header::map::Iter":{"T":["header::map::Drain","<*const T as std::fmt::Debug>","header::map::Iter","header::map::ValueIterMut","header::map::IterMut","header::map::ValueDrain"]},"header::map::IterMut":{"T":["header::map::IterMut","<*mut T as std::marker::Send>","header::map::Iter","header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::Keys":{"T":["error::Error","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme","uri::InvalidUriParts","method::Method","header::value::HeaderValue","header::map::Values","header::map::Keys","byte_str::ByteStr","uri::builder::Builder","header::map::ValueIterMut","version::Version","header::map::IntoIter","error::Never","<&T as std::fmt::Debug>","header::map::Links","header::map::GetAll","request::Parts","response::Response","header::map::ValueIter","header::name::MaybeLower","response::Builder","uri::ErrorKind","header::map::Link","uri::scheme::Scheme2","header::map::HashValue","header::value::ToStrError","extensions::Extensions","header::name::HdrName","header::map::Iter","header::value::InvalidHeaderValue","header::map::Cursor","header::map::IterMut","header::map::Bucket","status::StatusCode","uri::scheme::Protocol","method::InvalidMethod","header::name::Repr","header::name::Custom","header::map::HeaderMap","uri::path::PathAndQuery","header::map::ValueDrain","header::name::InvalidHeaderName","uri::authority::Authority","uri::InvalidUri","uri::Uri","header::map::ExtraValue","header::map::Drain","header::map::ValuesMut","uri::InvalidUriBytes","request::Request","header::map::VacantEntry","response::Parts","header::name::StandardHeader","uri::port::Port","header::map::OccupiedEntry","status::InvalidStatusCode","header::map::Entry","header::name::HeaderName","request::Builder","uri::Parts","header::name::InvalidHeaderNameBytes"]},"header::map::OccupiedEntry":{"T":["header::name::InvalidHeaderName","header::map::Link","request::Builder","header::map::HeaderMap","request::Parts","uri::scheme::Protocol","header::map::Keys","header::map::Values","uri::Parts","uri::path::PathAndQuery","uri::port::Port","uri::InvalidUriBytes","header::map::ValueDrain","version::Version","uri::authority::Authority","header::name::Custom","response::Response","error::Never","byte_str::ByteStr","header::map::Links","header::map::HashValue","header::map::Bucket","header::map::ValueIter","header::map::GetAll","uri::Uri","header::map::IterMut","header::map::ExtraValue","header::map::Drain","header::name::InvalidHeaderNameBytes","status::StatusCode","status::InvalidStatusCode","uri::ErrorKind","uri::scheme::Scheme2","header::name::HdrName","header::map::ValueIterMut","<*mut T as std::fmt::Debug>","header::map::OccupiedEntry","header::map::IntoIter","header::value::InvalidHeaderValueBytes","method::Method","uri::InvalidUriParts","uri::builder::Builder","extensions::Extensions","header::map::Cursor","uri::InvalidUri","method::InvalidMethod","header::value::InvalidHeaderValue","header::value::ToStrError","response::Parts","request::Request","header::map::Iter","header::name::MaybeLower","uri::scheme::Scheme","header::map::ValuesMut","header::name::Repr","header::map::VacantEntry","response::Builder","header::name::StandardHeader","error::Error","header::map::Entry","header::name::HeaderName","header::value::HeaderValue"]},"header::map::VacantEntry":{"T":["header::map::GetAll","uri::Uri","uri::path::PathAndQuery","uri::port::Port","header::name::HdrName","header::map::Drain","error::Error","header::value::InvalidHeaderValue","version::Version","method::Method","request::Request","header::map::ValueIterMut","uri::ErrorKind","header::name::StandardHeader","header::map::HashValue","response::Builder","header::value::HeaderValue","header::name::Custom","response::Response","header::name::HeaderName","header::value::InvalidHeaderValueBytes","uri::InvalidUriParts","header::map::ExtraValue","request::Builder","header::name::MaybeLower","header::map::ValuesMut","header::map::VacantEntry","header::map::IntoIter","uri::InvalidUri","header::name::InvalidHeaderName","status::InvalidStatusCode","header::map::Bucket","<*mut T as std::fmt::Debug>","header::map::Entry","uri::builder::Builder","header::map::ValueDrain","uri::authority::Authority","extensions::Extensions","header::map::Values","uri::Parts","uri::InvalidUriBytes","byte_str::ByteStr","header::value::ToStrError","header::map::IterMut","header::map::Cursor","header::map::Links","header::map::Iter","header::name::InvalidHeaderNameBytes","header::name::Repr","header::map::Keys","header::map::HeaderMap","header::map::OccupiedEntry","status::StatusCode","request::Parts","uri::scheme::Scheme2","header::map::Link","response::Parts","uri::scheme::Scheme","method::InvalidMethod","uri::scheme::Protocol","header::map::ValueIter","error::Never"]},"header::map::ValueDrain":{"T":["<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Drain","header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain"]},"header::map::ValueIter":{"T":["uri::InvalidUriBytes","header::map::VacantEntry","header::map::OccupiedEntry","uri::scheme::Scheme","uri::path::PathAndQuery","header::map::Entry","header::map::HashValue","status::InvalidStatusCode","response::Parts","uri::InvalidUriParts","header::value::InvalidHeaderValue","header::name::HdrName","header::map::IntoIter","uri::ErrorKind","header::name::Repr","header::name::StandardHeader","header::name::Custom","header::name::MaybeLower","uri::Uri","extensions::Extensions","header::name::InvalidHeaderName","header::map::Links","uri::port::Port","error::Error","header::value::ToStrError","header::map::GetAll","header::map::Values","header::name::HeaderName","uri::scheme::Protocol","uri::authority::Authority","header::map::Link","request::Builder","byte_str::ByteStr","header::map::HeaderMap","response::Builder","request::Request","<*const T as std::fmt::Debug>","header::map::ValueIterMut","header::map::Iter","version::Version","header::map::Keys","header::map::Drain","header::map::ExtraValue","header::map::ValueIter","header::value::InvalidHeaderValueBytes","request::Parts","header::map::ValuesMut","header::map::ValueDrain","uri::InvalidUri","header::name::InvalidHeaderNameBytes","method::InvalidMethod","header::value::HeaderValue","uri::scheme::Scheme2","method::Method","uri::builder::Builder","status::StatusCode","response::Response","header::map::IterMut","uri::Parts","header::map::Bucket","error::Never","header::map::Cursor"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","<*mut T as std::fmt::Debug>","header::map::Iter","header::map::ValueDrain","header::map::Drain","header::map::ValueIterMut"]},"header::map::Values":{"T":["request::Parts","header::map::Links","header::value::InvalidHeaderValue","header::map::Values","uri::scheme::Scheme","header::map::IterMut","response::Parts","header::map::Drain","header::map::Bucket","header::value::ToStrError","uri::InvalidUri","header::map::HashValue","uri::scheme::Protocol","uri::builder::Builder","header::name::HeaderName","header::map::ValueIterMut","header::map::ValueDrain","uri::path::PathAndQuery","uri::Parts","header::value::HeaderValue","uri::InvalidUriParts","header::name::HdrName","uri::scheme::Scheme2","header::map::Keys","header::name::StandardHeader","header::map::Link","error::Error","header::map::Iter","header::name::InvalidHeaderName","header::map::IntoIter","response::Response","header::map::ValueIter","status::InvalidStatusCode","header::name::InvalidHeaderNameBytes","byte_str::ByteStr","header::map::Entry","method::Method","uri::ErrorKind","header::map::Cursor","header::name::Custom","method::InvalidMethod","header::map::HeaderMap","header::name::MaybeLower","request::Builder","response::Builder","error::Never","header::name::Repr","header::map::ValuesMut","uri::authority::Authority","uri::Uri","uri::port::Port","status::StatusCode","header::map::ExtraValue","header::value::InvalidHeaderValueBytes","<&T as std::fmt::Debug>","uri::InvalidUriBytes","header::map::GetAll","version::Version","header::map::VacantEntry","request::Request","header::map::OccupiedEntry","extensions::Extensions"]},"header::map::ValuesMut":{"T":["response::Parts","header::map::ValueIter","header::map::GetAll","<*mut T as std::fmt::Debug>","header::name::MaybeLower","uri::scheme::Scheme2","uri::Parts","uri::builder::Builder","header::map::ValueDrain","header::map::IterMut","header::map::VacantEntry","header::map::Keys","uri::authority::Authority","version::Version","header::value::ToStrError","method::InvalidMethod","uri::InvalidUriParts","uri::port::Port","error::Never","extensions::Extensions","header::map::HeaderMap","request::Builder","request::Request","header::value::InvalidHeaderValueBytes","header::map::ExtraValue","status::InvalidStatusCode","header::map::ValuesMut","header::name::InvalidHeaderName","uri::InvalidUriBytes","header::map::HashValue","header::name::Custom","header::name::StandardHeader","header::map::IntoIter","uri::ErrorKind","request::Parts","byte_str::ByteStr","header::map::Iter","header::map::Link","uri::path::PathAndQuery","header::map::Bucket","response::Response","uri::Uri","header::name::HeaderName","header::name::HdrName","uri::scheme::Protocol","response::Builder","header::name::Repr","uri::scheme::Scheme","header::map::Values","uri::InvalidUri","header::map::Entry","error::Error","header::value::InvalidHeaderValue","header::map::Cursor","header::map::Links","header::map::Drain","header::map::OccupiedEntry","header::map::ValueIterMut","header::value::HeaderValue","header::name::InvalidHeaderNameBytes","method::Method","status::StatusCode"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::Repr","header::name::StandardHeader","header::name::Custom","version::Version","std::hash::impls::<impl std::hash::Hash for *mut T>"]},"request::Request":{"T":["status::StatusCode","version::Version","request::Request","uri::Parts","response::Response","method::Method","extensions::Extensions","request::Builder","uri::Uri","uri::builder::Builder","response::Builder","header::map::HeaderMap"]},"response::Response":{"T":["request::Request","version::Version","extensions::Extensions","method::Method","response::Builder","uri::Uri","uri::builder::Builder","header::map::HeaderMap","uri::Parts","request::Builder","response::Response","status::StatusCode"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["header::value::HeaderValue","method::Method","uri::scheme::Scheme","uri::port::Port","<&T as std::convert::AsRef<U>>","uri::authority::Authority"]},"uri::scheme::Scheme2":{"T":["method::Method","byte_str::ByteStr","header::name::StandardHeader","uri::scheme::Scheme","header::name::Custom","header::map::Bucket","version::Version","uri::path::PathAndQuery","uri::scheme::Scheme2","header::map::HashValue","header::map::Cursor","status::StatusCode","uri::Uri","header::name::MaybeLower","header::name::Repr","uri::authority::Authority","header::map::Links","header::name::HeaderName","header::map::ExtraValue","header::map::Link","uri::scheme::Protocol","std::boxed::Box<byte_str::ByteStr>","<&mut T as std::fmt::Debug>","header::map::HeaderMap","header::value::HeaderValue"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Values<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Values<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Values<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Values<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::ValuesMut<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValuesMut<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::clone::Clone","convert::HttpTryFrom","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sized","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"request::Request":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValuesMut<'a, T> as std::fmt::Debug>::fmt":{"T":["response::Response","header::map::Keys","header::map::Entry","header::map::Values","byte_str::ByteStr","uri::InvalidUriBytes","error::Error","header::map::VacantEntry","header::map::Cursor","uri::path::PathAndQuery","header::map::HashValue","status::StatusCode","header::map::HeaderMap","header::name::Custom","header::value::ToStrError","header::map::ValueIter","response::Parts","uri::InvalidUriParts","header::value::HeaderValue","header::map::ValueIterMut","response::Builder","method::InvalidMethod","header::name::InvalidHeaderName","header::name::StandardHeader","uri::authority::Authority","header::map::IterMut","header::map::Iter","uri::InvalidUri","version::Version","header::map::Drain","header::map::GetAll","header::map::OccupiedEntry","header::name::HdrName","header::value::InvalidHeaderValueBytes","request::Parts","extensions::Extensions","uri::Uri","<&mut T as std::fmt::Debug>","header::map::Links","uri::ErrorKind","header::name::Repr","uri::scheme::Scheme2","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","header::value::InvalidHeaderValue","uri::scheme::Protocol","header::map::Bucket","header::map::ValuesMut","error::Never","uri::Parts","header::name::HeaderName","header::map::IntoIter","method::Method","status::InvalidStatusCode","header::map::Link","header::name::MaybeLower","uri::scheme::Scheme","header::map::ValueDrain","request::Request","uri::builder::Builder","<*const T as std::fmt::Debug>","uri::port::Port","request::Builder"]},"header::map::Bucket":{"T":["uri::scheme::Protocol","header::map::ExtraValue","header::name::HeaderName","header::map::HashValue","header::map::HeaderMap","header::value::HeaderValue","header::name::MaybeLower","header::map::Links","status::StatusCode","uri::Uri","uri::authority::Authority","uri::path::PathAndQuery","uri::scheme::Scheme","header::map::Bucket","header::name::Custom","header::map::Cursor","byte_str::ByteStr","version::Version","header::map::Link","header::name::StandardHeader","method::Method","header::name::Repr","std::clone::impls::<impl std::clone::Clone for &mut T>","uri::scheme::Scheme2"]},"header::map::Drain":{"T":["header::map::Iter","header::map::IterMut","header::map::Drain","header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::ValueIterMut"]},"header::map::Entry":{"T":["method::InvalidMethod","uri::scheme::Scheme2","header::map::ValueIterMut","header::map::Links","uri::ErrorKind","header::name::MaybeLower","uri::scheme::Protocol","header::map::Link","error::Error","uri::scheme::Scheme","header::value::InvalidHeaderValue","header::map::Bucket","request::Request","uri::InvalidUriParts","byte_str::ByteStr","<&T as std::fmt::Debug>","uri::builder::Builder","request::Builder","header::value::InvalidHeaderValueBytes","header::name::Custom","header::map::HeaderMap","header::map::ValueIter","uri::InvalidUri","header::name::InvalidHeaderNameBytes","header::map::GetAll","response::Parts","uri::authority::Authority","error::Never","header::map::VacantEntry","uri::port::Port","header::map::OccupiedEntry","header::name::Repr","uri::path::PathAndQuery","request::Parts","header::value::ToStrError","status::InvalidStatusCode","header::map::HashValue","header::map::ExtraValue","uri::InvalidUriBytes","version::Version","response::Builder","header::map::Drain","header::name::StandardHeader","status::StatusCode","header::name::HeaderName","method::Method","header::name::HdrName","header::map::IntoIter","response::Response","header::map::Iter","uri::Uri","header::value::HeaderValue","header::map::Values","header::map::Keys","header::map::ValuesMut","header::map::Cursor","header::map::Entry","header::map::ValueDrain","header::map::IterMut","uri::Parts","extensions::Extensions","header::name::InvalidHeaderName"]},"header::map::ExtraValue":{"T":["status::StatusCode","byte_str::ByteStr","header::value::HeaderValue","header::map::Links","header::map::ExtraValue","header::map::HashValue","uri::scheme::Scheme2","header::name::MaybeLower","header::map::HeaderMap","uri::scheme::Protocol","version::Version","header::name::Repr","header::name::Custom","uri::Uri","uri::scheme::Scheme","header::map::Link","uri::path::PathAndQuery","header::map::Cursor","header::map::Bucket","uri::authority::Authority","method::Method","header::name::StandardHeader","header::name::HeaderName","<*const T as std::fmt::Debug>"]},"header::map::GetAll":{"T":["uri::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","version::Version","header::map::HeaderMap","header::name::Repr","header::name::Custom","header::map::GetAll","header::map::Cursor","header::map::HashValue","byte_str::ByteStr","header::map::Link","header::name::StandardHeader"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["header::map::HeaderMap","header::map::Drain","header::name::InvalidHeaderNameBytes","uri::Parts","response::Builder","uri::Uri","header::name::InvalidHeaderName","header::name::HeaderName","request::Request","header::map::ExtraValue","status::StatusCode","header::map::ValueIter","header::map::Link","version::Version","header::map::Values","header::map::Links","header::value::InvalidHeaderValueBytes","error::Error","status::InvalidStatusCode","uri::scheme::Scheme","header::name::StandardHeader","method::Method","header::map::GetAll","uri::scheme::Scheme2","header::name::Custom","header::map::Entry","uri::scheme::Protocol","request::Parts","header::map::ValueDrain","header::map::HashValue","header::name::MaybeLower","uri::authority::Authority","uri::builder::Builder","uri::InvalidUri","<*const T as std::fmt::Debug>","header::map::ValueIterMut","header::map::OccupiedEntry","extensions::Extensions","header::map::IntoIter","header::value::InvalidHeaderValue","response::Response","method::InvalidMethod","byte_str::ByteStr","header::name::HdrName","header::name::Repr","uri::ErrorKind","header::map::Iter","uri::InvalidUriBytes","header::map::Cursor","header::value::ToStrError","uri::path::PathAndQuery","header::map::ValuesMut","uri::port::Port","uri::InvalidUriParts","header::map::Keys","header::map::VacantEntry","response::Parts","error::Never","header::value::HeaderValue","request::Builder","header::map::Bucket","header::map::IterMut"]},"header::map::Iter":{"T":["<*const T as std::fmt::Debug>","header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::Iter","header::map::IterMut","header::map::ValueIterMut","header::map::Drain"]},"header::map::Keys":{"T":["uri::InvalidUriParts","header::map::Drain","uri::ErrorKind","header::name::Custom","header::map::HeaderMap","uri::Parts","header::name::StandardHeader","header::map::GetAll","method::Method","header::map::Links","request::Builder","header::map::HashValue","<&mut T as std::fmt::Debug>","header::name::HdrName","uri::authority::Authority","response::Builder","status::StatusCode","header::map::ValueDrain","uri::builder::Builder","header::map::ValueIterMut","header::map::Values","uri::path::PathAndQuery","request::Parts","header::map::ExtraValue","header::value::ToStrError","uri::Uri","header::map::ValueIter","error::Error","uri::scheme::Protocol","response::Parts","header::map::OccupiedEntry","header::value::InvalidHeaderValueBytes","extensions::Extensions","header::map::Entry","header::map::Cursor","uri::port::Port","uri::scheme::Scheme","response::Response","header::map::IntoIter","header::value::InvalidHeaderValue","error::Never","header::map::VacantEntry","header::name::InvalidHeaderName","header::map::Bucket","header::name::Repr","request::Request","header::map::Iter","header::map::ValuesMut","header::name::MaybeLower","header::map::Keys","header::map::IterMut","header::value::HeaderValue","status::InvalidStatusCode","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","byte_str::ByteStr","version::Version","header::name::HeaderName","method::InvalidMethod","uri::scheme::Scheme2","header::map::Link","uri::InvalidUri"]},"header::map::OccupiedEntry":{"T":["header::map::GetAll","response::Builder","header::map::ValueIter","header::map::ValuesMut","header::map::Drain","header::name::InvalidHeaderNameBytes","header::map::IterMut","header::map::Values","header::map::OccupiedEntry","header::map::Bucket","uri::authority::Authority","uri::scheme::Scheme2","status::InvalidStatusCode","header::name::Repr","method::InvalidMethod","request::Builder","header::map::IntoIter","request::Request","header::name::HdrName","error::Never","header::value::ToStrError","version::Version","uri::InvalidUriBytes","header::map::ExtraValue","header::map::HeaderMap","header::name::Custom","response::Parts","header::map::Keys","uri::builder::Builder","status::StatusCode","header::map::Entry","uri::InvalidUriParts","header::map::Iter","header::map::ValueIterMut","header::value::HeaderValue","response::Response","request::Parts","byte_str::ByteStr","header::name::InvalidHeaderName","uri::Uri","header::map::VacantEntry","extensions::Extensions","uri::port::Port","uri::scheme::Scheme","<&mut T as std::fmt::Debug>","header::map::Link","header::value::InvalidHeaderValueBytes","error::Error","header::name::HeaderName","header::map::ValueDrain","uri::Parts","method::Method","header::name::MaybeLower","uri::ErrorKind","uri::InvalidUri","header::map::Cursor","uri::scheme::Protocol","header::name::StandardHeader","uri::path::PathAndQuery","header::map::Links","header::map::HashValue","header::value::InvalidHeaderValue"]},"header::map::VacantEntry":{"T":["header::name::MaybeLower","uri::InvalidUri","response::Response","uri::authority::Authority","error::Never","header::map::ValuesMut","header::map::Values","status::InvalidStatusCode","header::name::InvalidHeaderName","header::map::Drain","header::map::HeaderMap","version::Version","byte_str::ByteStr","header::map::ValueDrain","header::map::Link","header::map::ValueIterMut","method::InvalidMethod","header::map::Links","header::map::IntoIter","header::name::Custom","response::Parts","uri::ErrorKind","header::name::HeaderName","uri::scheme::Scheme2","<&mut T as std::fmt::Debug>","header::name::Repr","header::map::GetAll","uri::InvalidUriParts","request::Builder","header::map::HashValue","request::Parts","extensions::Extensions","request::Request","header::map::Bucket","header::map::Cursor","header::name::StandardHeader","status::StatusCode","header::name::HdrName","header::map::VacantEntry","header::map::Keys","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","uri::builder::Builder","response::Builder","uri::Uri","header::map::Iter","header::value::InvalidHeaderValue","uri::scheme::Scheme","header::map::ExtraValue","uri::InvalidUriBytes","uri::path::PathAndQuery","header::map::IterMut","header::map::OccupiedEntry","uri::scheme::Protocol","header::value::ToStrError","header::name::InvalidHeaderNameBytes","error::Error","header::map::ValueIter","method::Method","uri::port::Port","header::map::Entry","uri::Parts"]},"header::map::ValueDrain":{"T":["header::map::Drain","header::map::Iter","header::map::IterMut","<*const T as std::fmt::Debug>","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["header::map::Cursor","response::Response","uri::Parts","<&mut T as std::fmt::Debug>","uri::builder::Builder","uri::scheme::Protocol","header::name::HeaderName","header::name::StandardHeader","request::Parts","uri::ErrorKind","header::map::Drain","uri::authority::Authority","uri::scheme::Scheme","header::map::Entry","header::value::HeaderValue","uri::path::PathAndQuery","extensions::Extensions","header::name::MaybeLower","header::map::IntoIter","status::InvalidStatusCode","header::value::ToStrError","header::map::VacantEntry","header::map::ValueIter","header::name::Custom","header::map::HashValue","byte_str::ByteStr","header::name::HdrName","header::name::Repr","header::map::HeaderMap","header::map::GetAll","uri::InvalidUriBytes","status::StatusCode","uri::Uri","header::map::Links","header::map::ValueDrain","header::value::InvalidHeaderValue","error::Never","header::map::ExtraValue","header::map::Bucket","error::Error","uri::port::Port","request::Builder","header::value::InvalidHeaderValueBytes","header::map::Iter","uri::InvalidUriParts","header::map::Link","header::name::InvalidHeaderNameBytes","header::map::Values","method::Method","header::map::ValuesMut","request::Request","header::map::OccupiedEntry","header::map::Keys","header::map::ValueIterMut","uri::scheme::Scheme2","method::InvalidMethod","response::Parts","uri::InvalidUri","header::name::InvalidHeaderName","header::map::IterMut","version::Version","response::Builder"]},"header::map::ValueIterMut":{"T":["<*const T as std::marker::Send>","header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut","header::map::IterMut","header::map::Drain"]},"header::map::Values":{"T":["header::map::OccupiedEntry","header::value::InvalidHeaderValueBytes","header::map::Drain","header::map::Links","error::Error","header::value::HeaderValue","uri::Parts","uri::scheme::Scheme2","uri::scheme::Protocol","header::name::Custom","uri::InvalidUriParts","request::Request","uri::scheme::Scheme","header::map::Link","method::InvalidMethod","header::map::GetAll","header::map::Keys","request::Parts","uri::ErrorKind","response::Response","header::name::StandardHeader","uri::Uri","header::map::ValueIterMut","header::map::ValueIter","header::map::ExtraValue","status::InvalidStatusCode","header::map::ValueDrain","uri::authority::Authority","uri::port::Port","response::Builder","error::Never","header::value::InvalidHeaderValue","header::map::Bucket","header::map::IterMut","header::map::VacantEntry","header::map::IntoIter","header::map::ValuesMut","header::name::InvalidHeaderName","extensions::Extensions","header::name::Repr","byte_str::ByteStr","header::map::Values","request::Builder","header::map::Iter","header::map::Entry","uri::path::PathAndQuery","uri::InvalidUriBytes","header::name::MaybeLower","uri::builder::Builder","version::Version","header::map::Cursor","header::value::ToStrError","method::Method","status::StatusCode","header::name::HeaderName","header::map::HeaderMap","header::name::HdrName","header::name::InvalidHeaderNameBytes","uri::InvalidUri","response::Parts","<*mut T as std::fmt::Debug>","header::map::HashValue"]},"header::map::ValuesMut":{"T":["header::name::StandardHeader","header::value::HeaderValue","uri::Uri","response::Parts","header::map::Drain","uri::InvalidUri","uri::InvalidUriParts","header::map::Iter","header::name::Custom","header::name::HeaderName","uri::authority::Authority","header::map::OccupiedEntry","request::Request","header::value::InvalidHeaderValueBytes","header::map::IntoIter","header::map::Entry","version::Version","request::Parts","error::Error","uri::scheme::Scheme2","uri::ErrorKind","request::Builder","header::map::HashValue","header::map::Bucket","byte_str::ByteStr","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","header::map::IterMut","header::map::Cursor","uri::path::PathAndQuery","header::map::ValueDrain","header::value::ToStrError","header::map::Values","header::map::ValuesMut","uri::scheme::Scheme","status::StatusCode","uri::InvalidUriBytes","header::name::MaybeLower","<&T as std::fmt::Debug>","header::name::Repr","error::Never","response::Builder","header::value::InvalidHeaderValue","method::InvalidMethod","header::map::ValueIter","uri::Parts","header::map::VacantEntry","header::map::HeaderMap","uri::builder::Builder","header::map::ExtraValue","uri::port::Port","header::map::ValueIterMut","header::map::Links","response::Response","header::map::Link","extensions::Extensions","header::map::GetAll","status::InvalidStatusCode","method::Method","header::name::InvalidHeaderName","header::map::Keys","header::name::HdrName"]},"header::name::Repr":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::StandardHeader","header::name::Custom","header::name::Repr","version::Version","byte_str::ByteStr"]},"request::Request":{"T":["extensions::Extensions","response::Response","header::map::HeaderMap","uri::Parts","method::Method","request::Request","status::StatusCode","response::Builder","version::Version","request::Builder","uri::Uri","uri::builder::Builder"]},"response::Response":{"T":["status::StatusCode","response::Response","header::map::HeaderMap","uri::Uri","uri::Parts","request::Builder","method::Method","uri::builder::Builder","extensions::Extensions","response::Builder","version::Version","request::Request"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::scheme::Scheme","uri::authority::Authority","header::value::HeaderValue","uri::port::Port","<&mut T as std::fmt::Debug>","method::Method"]},"uri::scheme::Scheme2":{"T":["uri::scheme::Protocol","std::boxed::Box<byte_str::ByteStr>","header::name::Custom","uri::scheme::Scheme","byte_str::ByteStr","header::map::HashValue","header::name::Repr","status::StatusCode","header::map::Cursor","uri::Uri","header::map::ExtraValue","uri::path::PathAndQuery","header::name::HeaderName","uri::authority::Authority","header::map::HeaderMap","header::value::HeaderValue","uri::scheme::Scheme2","header::name::MaybeLower","version::Version","<&T as std::fmt::Debug>","header::name::StandardHeader","header::map::Bucket","header::map::Link","header::map::Links","method::Method"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValuesMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::ValuesMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::ValuesMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::ValuesMut<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Drain<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Drain<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","convert::HttpTryFrom","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Send","std::fmt::Debug","std::marker::Sync"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Drain<'a, T> as std::fmt::Debug>::fmt":{"T":["uri::InvalidUri","<&mut T as std::fmt::Debug>","header::map::VacantEntry","response::Response","header::name::InvalidHeaderName","header::map::Link","uri::InvalidUriParts","header::name::InvalidHeaderNameBytes","uri::scheme::Protocol","uri::scheme::Scheme2","header::name::HeaderName","header::map::ExtraValue","header::value::InvalidHeaderValue","status::InvalidStatusCode","uri::builder::Builder","error::Never","header::map::Bucket","uri::Uri","byte_str::ByteStr","status::StatusCode","<*const T as std::fmt::Debug>","header::map::GetAll","header::name::Repr","header::map::Drain","header::name::StandardHeader","header::value::ToStrError","response::Parts","method::Method","uri::port::Port","header::map::IntoIter","uri::Parts","response::Builder","header::map::ValuesMut","header::map::ValueDrain","header::value::InvalidHeaderValueBytes","header::map::Iter","header::map::HashValue","header::map::Keys","request::Request","header::map::ValueIter","header::map::Values","uri::scheme::Scheme","uri::InvalidUriBytes","header::map::OccupiedEntry","header::map::Links","request::Builder","method::InvalidMethod","header::map::Entry","version::Version","header::name::MaybeLower","uri::ErrorKind","header::map::HeaderMap","header::name::HdrName","uri::path::PathAndQuery","extensions::Extensions","uri::authority::Authority","header::value::HeaderValue","request::Parts","header::map::ValueIterMut","header::map::Cursor","error::Error","header::name::Custom","header::map::IterMut"]},"header::map::Bucket":{"T":["method::Method","version::Version","header::name::Custom","header::value::HeaderValue","header::map::Link","uri::scheme::Scheme","status::StatusCode","header::map::Cursor","uri::Uri","uri::scheme::Scheme2","header::name::HeaderName","uri::authority::Authority","byte_str::ByteStr","header::name::StandardHeader","header::map::Links","header::name::MaybeLower","uri::path::PathAndQuery","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::ExtraValue","header::map::HashValue","header::name::Repr","uri::scheme::Protocol","header::map::Bucket","header::map::HeaderMap"]},"header::map::Drain":{"T":["<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain","header::map::IterMut","header::map::Drain"]},"header::map::Entry":{"T":["uri::scheme::Scheme","header::map::ValuesMut","header::map::Keys","header::map::Iter","uri::ErrorKind","response::Parts","header::name::Custom","header::name::HeaderName","header::map::HashValue","header::name::InvalidHeaderNameBytes","<*mut T as std::fmt::Debug>","header::map::Entry","method::InvalidMethod","uri::InvalidUri","uri::InvalidUriBytes","status::StatusCode","header::map::OccupiedEntry","header::name::Repr","uri::authority::Authority","byte_str::ByteStr","uri::path::PathAndQuery","header::map::IntoIter","error::Error","header::name::MaybeLower","version::Version","header::value::InvalidHeaderValueBytes","extensions::Extensions","request::Parts","header::value::ToStrError","status::InvalidStatusCode","uri::scheme::Protocol","header::map::Cursor","response::Builder","uri::Parts","header::map::HeaderMap","header::map::Link","header::map::Links","header::name::InvalidHeaderName","method::Method","response::Response","error::Never","header::map::GetAll","uri::Uri","header::value::HeaderValue","header::map::Bucket","header::name::HdrName","header::map::ValueDrain","header::map::IterMut","uri::InvalidUriParts","request::Request","header::map::VacantEntry","header::name::StandardHeader","header::map::Values","header::map::ValueIter","header::map::Drain","uri::scheme::Scheme2","request::Builder","header::map::ValueIterMut","uri::port::Port","header::map::ExtraValue","header::value::InvalidHeaderValue","uri::builder::Builder"]},"header::map::ExtraValue":{"T":["uri::scheme::Protocol","header::name::MaybeLower","header::map::Cursor","header::name::Custom","uri::path::PathAndQuery","header::name::HeaderName","header::map::HeaderMap","byte_str::ByteStr","std::clone::impls::<impl std::clone::Clone for &T>","method::Method","status::StatusCode","header::name::StandardHeader","version::Version","header::name::Repr","uri::authority::Authority","header::map::Link","uri::scheme::Scheme","header::value::HeaderValue","header::map::Bucket","header::map::ExtraValue","header::map::HashValue","header::map::Links","uri::Uri","uri::scheme::Scheme2"]},"header::map::GetAll":{"T":["header::name::Custom","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>","header::name::Repr","uri::ErrorKind","header::map::HashValue","version::Version","header::name::StandardHeader","byte_str::ByteStr","header::map::HeaderMap","header::map::Link","header::map::GetAll","header::map::Cursor"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["header::map::VacantEntry","header::value::ToStrError","header::map::OccupiedEntry","uri::ErrorKind","header::map::Drain","header::map::IntoIter","response::Response","header::value::InvalidHeaderValue","version::Version","header::map::Iter","response::Parts","uri::path::PathAndQuery","header::name::Custom","<*mut T as std::fmt::Debug>","header::name::StandardHeader","header::map::ValueIter","header::name::MaybeLower","header::value::InvalidHeaderValueBytes","header::map::ExtraValue","header::map::Values","header::map::ValueDrain","extensions::Extensions","uri::port::Port","method::InvalidMethod","header::map::HashValue","status::StatusCode","uri::scheme::Protocol","header::map::ValuesMut","uri::builder::Builder","uri::scheme::Scheme","header::map::Bucket","uri::Parts","header::name::HdrName","response::Builder","method::Method","uri::InvalidUri","header::map::IterMut","header::map::ValueIterMut","uri::InvalidUriBytes","uri::InvalidUriParts","header::value::HeaderValue","uri::Uri","header::map::Cursor","header::name::InvalidHeaderNameBytes","status::InvalidStatusCode","header::name::HeaderName","error::Never","header::map::Links","request::Parts","header::map::Link","header::name::InvalidHeaderName","header::map::GetAll","header::name::Repr","uri::scheme::Scheme2","byte_str::ByteStr","request::Request","request::Builder","header::map::Entry","error::Error","header::map::Keys","uri::authority::Authority","header::map::HeaderMap"]},"header::map::Iter":{"T":["<*mut T as std::fmt::Debug>","header::map::IterMut","header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter"]},"header::map::IterMut":{"T":["header::map::ValueIterMut","header::map::Drain","header::map::Iter","header::map::IterMut","<*mut T as std::marker::Send>","header::map::ValueDrain"]},"header::map::Keys":{"T":["header::value::HeaderValue","header::name::HeaderName","header::map::Links","request::Builder","request::Parts","method::Method","header::map::Bucket","header::map::Iter","uri::ErrorKind","header::map::Link","uri::scheme::Scheme2","header::map::ExtraValue","header::name::Repr","header::map::ValuesMut","uri::authority::Authority","uri::InvalidUriBytes","header::map::ValueDrain","header::value::InvalidHeaderValueBytes","status::StatusCode","header::map::IntoIter","header::value::InvalidHeaderValue","header::name::InvalidHeaderNameBytes","header::map::IterMut","extensions::Extensions","header::map::Entry","uri::Uri","header::map::Drain","error::Error","uri::Parts","header::name::HdrName","uri::scheme::Protocol","byte_str::ByteStr","header::map::GetAll","header::map::Keys","header::map::ValueIterMut","uri::InvalidUri","uri::InvalidUriParts","header::map::OccupiedEntry","header::name::StandardHeader","header::name::InvalidHeaderName","header::map::HashValue","uri::port::Port","version::Version","header::map::Cursor","response::Parts","uri::path::PathAndQuery","uri::builder::Builder","header::name::MaybeLower","response::Builder","status::InvalidStatusCode","header::name::Custom","uri::scheme::Scheme","header::map::ValueIter","header::map::VacantEntry","<*mut T as std::fmt::Debug>","header::value::ToStrError","header::map::HeaderMap","error::Never","response::Response","method::InvalidMethod","header::map::Values","request::Request"]},"header::map::OccupiedEntry":{"T":["request::Parts","header::name::HeaderName","status::InvalidStatusCode","<&mut T as std::fmt::Debug>","header::name::InvalidHeaderName","header::map::HeaderMap","request::Request","header::name::HdrName","header::value::ToStrError","response::Response","header::map::IntoIter","header::map::ValueIterMut","response::Parts","header::map::Bucket","uri::ErrorKind","header::map::ValueIter","method::InvalidMethod","uri::scheme::Scheme","version::Version","header::map::Drain","uri::authority::Authority","header::map::ExtraValue","header::map::Values","extensions::Extensions","header::map::Entry","header::map::Keys","header::map::Cursor","header::map::Iter","header::name::InvalidHeaderNameBytes","header::value::InvalidHeaderValueBytes","header::name::Custom","header::value::InvalidHeaderValue","error::Error","header::map::IterMut","header::map::ValueDrain","uri::scheme::Scheme2","request::Builder","uri::builder::Builder","uri::port::Port","header::name::Repr","header::name::MaybeLower","uri::Parts","method::Method","header::map::ValuesMut","header::map::Links","error::Never","uri::path::PathAndQuery","uri::InvalidUriParts","header::map::VacantEntry","byte_str::ByteStr","response::Builder","header::value::HeaderValue","uri::scheme::Protocol","header::map::OccupiedEntry","header::map::Link","uri::Uri","header::name::StandardHeader","header::map::HashValue","header::map::GetAll","uri::InvalidUri","uri::InvalidUriBytes","status::StatusCode"]},"header::map::VacantEntry":{"T":["uri::InvalidUri","uri::port::Port","uri::scheme::Protocol","header::value::InvalidHeaderValueBytes","header::map::HashValue","method::Method","header::name::Repr","header::map::Bucket","uri::Uri","header::value::HeaderValue","request::Parts","header::value::ToStrError","request::Builder","header::map::Entry","response::Response","status::StatusCode","header::map::Keys","version::Version","header::map::Link","header::name::MaybeLower","uri::scheme::Scheme2","uri::builder::Builder","response::Builder","uri::Parts","byte_str::ByteStr","error::Never","response::Parts","header::map::IntoIter","header::map::ValuesMut","header::map::OccupiedEntry","header::map::ExtraValue","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::GetAll","header::map::IterMut","header::name::InvalidHeaderNameBytes","header::map::Links","header::name::HdrName","header::map::HeaderMap","header::name::HeaderName","status::InvalidStatusCode","uri::scheme::Scheme","header::name::StandardHeader","error::Error","header::map::ValueIterMut","uri::ErrorKind","method::InvalidMethod","header::name::Custom","header::map::VacantEntry","header::map::Iter","uri::InvalidUriParts","header::name::InvalidHeaderName","uri::path::PathAndQuery","extensions::Extensions","uri::InvalidUriBytes","header::map::Cursor","header::map::Values","header::map::ValueIter","header::value::InvalidHeaderValue","uri::authority::Authority","header::map::Drain","request::Request"]},"header::map::ValueDrain":{"T":["header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain","header::map::IterMut","<*mut T as std::fmt::Debug>"]},"header::map::ValueIter":{"T":["header::map::ValuesMut","byte_str::ByteStr","header::name::StandardHeader","error::Never","uri::scheme::Scheme","header::map::Links","header::map::ValueIter","extensions::Extensions","uri::port::Port","header::map::ExtraValue","uri::Parts","header::name::Repr","header::map::Values","uri::ErrorKind","header::map::HeaderMap","header::name::HdrName","method::Method","header::value::InvalidHeaderValue","method::InvalidMethod","uri::scheme::Protocol","header::map::IntoIter","error::Error","header::map::Drain","uri::InvalidUri","header::name::InvalidHeaderNameBytes","response::Response","header::map::Link","uri::path::PathAndQuery","header::value::ToStrError","header::map::ValueDrain","response::Parts","uri::scheme::Scheme2","uri::InvalidUriBytes","header::map::Cursor","header::map::VacantEntry","status::StatusCode","<&mut T as std::fmt::Debug>","uri::authority::Authority","response::Builder","version::Version","uri::builder::Builder","header::map::Bucket","header::value::InvalidHeaderValueBytes","header::map::OccupiedEntry","header::map::IterMut","header::value::HeaderValue","header::map::ValueIterMut","header::name::Custom","header::name::MaybeLower","request::Parts","uri::Uri","request::Builder","header::map::Entry","uri::InvalidUriParts","request::Request","header::map::Keys","header::name::HeaderName","status::InvalidStatusCode","header::map::Iter","header::map::HashValue","header::map::GetAll","header::name::InvalidHeaderName"]},"header::map::ValueIterMut":{"T":["header::map::Iter","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Drain","header::map::ValueIterMut"]},"header::map::Values":{"T":["header::map::Keys","request::Builder","header::map::Link","method::Method","header::value::HeaderValue","uri::ErrorKind","uri::InvalidUri","header::map::Values","response::Parts","request::Request","header::map::Links","header::name::HeaderName","header::map::HeaderMap","uri::builder::Builder","uri::scheme::Scheme2","method::InvalidMethod","request::Parts","header::map::GetAll","header::value::ToStrError","uri::authority::Authority","uri::InvalidUriParts","header::name::InvalidHeaderName","uri::scheme::Scheme","header::map::Iter","extensions::Extensions","header::name::MaybeLower","uri::path::PathAndQuery","response::Response","header::value::InvalidHeaderValueBytes","header::map::ValuesMut","status::InvalidStatusCode","response::Builder","header::name::Repr","header::value::InvalidHeaderValue","byte_str::ByteStr","<&mut T as std::fmt::Debug>","header::map::ValueDrain","error::Error","header::map::OccupiedEntry","header::name::StandardHeader","header::map::Drain","header::map::Cursor","uri::Parts","header::name::Custom","header::map::ValueIter","header::map::HashValue","version::Version","header::map::ValueIterMut","header::map::IterMut","header::map::Bucket","header::name::HdrName","status::StatusCode","uri::InvalidUriBytes","error::Never","uri::port::Port","header::map::VacantEntry","header::name::InvalidHeaderNameBytes","uri::Uri","uri::scheme::Protocol","header::map::IntoIter","header::map::Entry","header::map::ExtraValue"]},"header::map::ValuesMut":{"T":["request::Builder","header::name::HdrName","header::name::MaybeLower","header::map::Link","header::map::Bucket","header::map::Values","method::InvalidMethod","uri::InvalidUriBytes","uri::InvalidUriParts","error::Error","header::map::ValueIter","<*const T as std::fmt::Debug>","response::Parts","version::Version","header::value::InvalidHeaderValue","header::map::IterMut","header::map::GetAll","header::name::InvalidHeaderName","header::map::ExtraValue","header::map::ValuesMut","response::Builder","header::map::HashValue","header::name::InvalidHeaderNameBytes","uri::Uri","request::Parts","header::map::VacantEntry","request::Request","header::map::ValueIterMut","uri::InvalidUri","byte_str::ByteStr","header::name::HeaderName","uri::port::Port","header::map::Entry","header::map::Keys","error::Never","uri::authority::Authority","uri::path::PathAndQuery","header::map::HeaderMap","method::Method","status::StatusCode","header::name::Repr","header::map::OccupiedEntry","uri::scheme::Protocol","status::InvalidStatusCode","header::value::HeaderValue","header::map::ValueDrain","header::map::Cursor","uri::ErrorKind","header::value::InvalidHeaderValueBytes","uri::builder::Builder","header::map::Drain","header::map::Iter","header::name::Custom","header::name::StandardHeader","extensions::Extensions","response::Response","uri::Parts","uri::scheme::Scheme","uri::scheme::Scheme2","header::map::IntoIter","header::value::ToStrError","header::map::Links"]},"header::name::Repr":{"T":["header::name::StandardHeader","byte_str::ByteStr","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","header::name::Custom","version::Version","header::name::Repr"]},"request::Request":{"T":["uri::Uri","version::Version","extensions::Extensions","header::map::HeaderMap","method::Method","response::Response","request::Builder","status::StatusCode","uri::Parts","request::Request","uri::builder::Builder","response::Builder"]},"response::Response":{"T":["version::Version","uri::Uri","request::Request","response::Builder","method::Method","uri::builder::Builder","uri::Parts","header::map::HeaderMap","response::Response","request::Builder","status::StatusCode","extensions::Extensions"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","<&mut T as std::fmt::Debug>","header::value::HeaderValue","uri::scheme::Scheme","uri::port::Port","method::Method"]},"uri::scheme::Scheme2":{"T":["header::map::Links","header::map::Link","uri::authority::Authority","header::value::HeaderValue","header::name::Custom","uri::scheme::Scheme2","uri::scheme::Scheme","header::name::StandardHeader","header::map::HashValue","std::boxed::Box<byte_str::ByteStr>","header::map::Bucket","method::Method","status::StatusCode","uri::Uri","header::name::HeaderName","header::map::ExtraValue","version::Version","header::map::HeaderMap","uri::path::PathAndQuery","header::name::MaybeLower","header::name::Repr","header::map::Cursor","uri::scheme::Protocol","std::clone::impls::<impl std::clone::Clone for *const T>","byte_str::ByteStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Drain<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Drain<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Drain<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Drain<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::GetAll<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::GetAll<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::fmt::Debug"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::GetAll<'a, T> as std::fmt::Debug>::fmt":{"T":["request::Request","header::map::ValueDrain","header::map::Values","uri::Parts","uri::scheme::Scheme","<&T as std::fmt::Debug>","uri::authority::Authority","uri::InvalidUriBytes","version::Version","method::InvalidMethod","header::name::InvalidHeaderName","uri::scheme::Protocol","header::map::HashValue","header::map::Entry","header::name::MaybeLower","<*mut T as std::fmt::Debug>","header::map::OccupiedEntry","header::map::GetAll","header::map::Iter","header::name::InvalidHeaderNameBytes","uri::builder::Builder","error::Error","byte_str::ByteStr","header::map::Bucket","header::map::Links","header::map::ExtraValue","header::map::IntoIter","header::map::ValueIter","header::map::ValueIterMut","header::name::HdrName","header::map::HeaderMap","header::value::HeaderValue","request::Parts","header::value::ToStrError","header::name::StandardHeader","header::name::HeaderName","header::map::Cursor","uri::path::PathAndQuery","response::Builder","extensions::Extensions","status::InvalidStatusCode","uri::Uri","header::map::IterMut","header::name::Custom","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","header::map::Link","error::Never","request::Builder","method::Method","status::StatusCode","header::map::Drain","header::value::InvalidHeaderValue","header::map::VacantEntry","uri::port::Port","response::Parts","response::Response","header::map::ValuesMut","header::name::Repr","uri::ErrorKind","uri::scheme::Scheme2","uri::InvalidUri","header::map::Keys"]},"header::map::Bucket":{"T":["status::StatusCode","header::map::Bucket","header::name::MaybeLower","method::Method","version::Version","header::map::HashValue","header::name::StandardHeader","uri::authority::Authority","uri::scheme::Scheme2","uri::Uri","uri::path::PathAndQuery","uri::scheme::Protocol","header::name::Custom","<*mut T as std::fmt::Debug>","header::name::Repr","header::map::Link","header::map::Cursor","uri::scheme::Scheme","header::map::Links","header::value::HeaderValue","header::name::HeaderName","header::map::HeaderMap","header::map::ExtraValue","byte_str::ByteStr"]},"header::map::Drain":{"T":["header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain","header::map::IterMut","header::map::Drain","<*mut T as std::fmt::Debug>"]},"header::map::Entry":{"T":["header::name::MaybeLower","method::Method","header::map::Cursor","header::value::InvalidHeaderValueBytes","uri::InvalidUriParts","header::map::Iter","header::map::OccupiedEntry","header::map::Links","uri::authority::Authority","header::map::Entry","uri::Uri","header::map::HashValue","header::map::VacantEntry","header::map::ExtraValue","version::Version","header::name::HdrName","byte_str::ByteStr","header::value::HeaderValue","header::map::ValuesMut","status::StatusCode","status::InvalidStatusCode","header::value::InvalidHeaderValue","request::Builder","header::map::GetAll","uri::scheme::Scheme2","response::Response","request::Parts","header::map::Link","uri::path::PathAndQuery","uri::scheme::Protocol","uri::InvalidUri","header::map::Drain","uri::builder::Builder","header::map::Bucket","header::name::StandardHeader","extensions::Extensions","uri::InvalidUriBytes","header::map::Values","method::InvalidMethod","error::Error","uri::Parts","header::map::ValueIter","header::name::InvalidHeaderNameBytes","header::map::ValueDrain","uri::port::Port","response::Builder","header::map::Keys","<*const T as std::fmt::Debug>","header::map::ValueIterMut","header::map::IterMut","uri::scheme::Scheme","header::name::Custom","header::name::Repr","error::Never","header::name::InvalidHeaderName","header::name::HeaderName","response::Parts","request::Request","uri::ErrorKind","header::map::IntoIter","header::value::ToStrError","header::map::HeaderMap"]},"header::map::ExtraValue":{"T":["header::value::HeaderValue","uri::Uri","header::map::Bucket","header::name::StandardHeader","header::name::Custom","uri::scheme::Scheme","header::name::Repr","uri::path::PathAndQuery","header::name::MaybeLower","byte_str::ByteStr","status::StatusCode","header::map::Link","header::map::HashValue","uri::scheme::Scheme2","header::map::ExtraValue","header::name::HeaderName","header::map::Links","method::Method","header::map::Cursor","version::Version","uri::authority::Authority","<&T as std::fmt::Debug>","uri::scheme::Protocol","header::map::HeaderMap"]},"header::map::GetAll":{"T":["header::map::HashValue","byte_str::ByteStr","header::name::Repr","header::map::Link","header::name::StandardHeader","uri::ErrorKind","version::Version","<*const T as std::fmt::Debug>","header::map::HeaderMap","header::name::Custom","header::map::Cursor","header::map::GetAll"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["uri::Parts","header::map::HeaderMap","uri::scheme::Scheme","<*const T as std::fmt::Debug>","header::map::Entry","response::Response","uri::ErrorKind","header::value::ToStrError","byte_str::ByteStr","header::map::Drain","request::Parts","request::Builder","header::value::HeaderValue","header::name::HeaderName","header::map::Bucket","error::Never","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","header::map::OccupiedEntry","header::name::StandardHeader","uri::scheme::Protocol","header::map::Link","header::map::HashValue","header::map::Cursor","response::Parts","uri::Uri","extensions::Extensions","status::InvalidStatusCode","status::StatusCode","header::name::Repr","method::InvalidMethod","uri::InvalidUriBytes","header::map::Keys","method::Method","error::Error","version::Version","header::name::MaybeLower","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","uri::InvalidUri","uri::builder::Builder","header::map::GetAll","header::name::Custom","header::map::ValueDrain","header::map::ValuesMut","uri::authority::Authority","header::map::IntoIter","header::map::Iter","header::map::Values","header::map::VacantEntry","header::map::IterMut","uri::path::PathAndQuery","header::value::InvalidHeaderValue","response::Builder","header::name::HdrName","uri::scheme::Scheme2","uri::InvalidUriParts","request::Request","header::map::ValueIterMut","uri::port::Port","header::map::Links","header::map::ValueIter"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::Drain","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter"]},"header::map::IterMut":{"T":["<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::ValueDrain","header::map::IterMut","header::map::Iter","header::map::Drain"]},"header::map::Keys":{"T":["header::name::MaybeLower","header::map::Links","header::map::GetAll","header::map::Values","header::name::InvalidHeaderName","uri::Uri","uri::port::Port","error::Never","header::name::StandardHeader","uri::InvalidUri","header::value::ToStrError","response::Parts","uri::scheme::Scheme2","request::Request","uri::scheme::Scheme","response::Builder","error::Error","header::name::HdrName","header::map::OccupiedEntry","header::map::IntoIter","header::map::ValueIter","extensions::Extensions","response::Response","uri::path::PathAndQuery","request::Parts","header::map::Bucket","status::InvalidStatusCode","status::StatusCode","header::value::InvalidHeaderValueBytes","method::Method","header::name::Repr","uri::scheme::Protocol","uri::ErrorKind","version::Version","header::map::Drain","header::map::Iter","uri::builder::Builder","uri::authority::Authority","header::name::InvalidHeaderNameBytes","uri::InvalidUriBytes","uri::Parts","<&T as std::fmt::Debug>","header::map::Link","header::map::HashValue","header::map::ExtraValue","header::map::Entry","header::map::Keys","header::map::IterMut","header::map::ValuesMut","uri::InvalidUriParts","header::map::ValueIterMut","byte_str::ByteStr","header::value::HeaderValue","method::InvalidMethod","header::value::InvalidHeaderValue","header::map::VacantEntry","header::name::HeaderName","header::map::ValueDrain","header::map::Cursor","request::Builder","header::name::Custom","header::map::HeaderMap"]},"header::map::OccupiedEntry":{"T":["header::map::GetAll","header::map::ValueDrain","header::name::InvalidHeaderNameBytes","uri::path::PathAndQuery","uri::Uri","uri::scheme::Scheme","request::Request","uri::builder::Builder","header::name::HdrName","header::map::Entry","extensions::Extensions","header::value::HeaderValue","header::map::HeaderMap","header::map::HashValue","status::StatusCode","method::InvalidMethod","uri::ErrorKind","uri::port::Port","header::name::MaybeLower","header::map::IterMut","method::Method","error::Never","header::map::ValueIter","<&T as std::fmt::Debug>","response::Builder","header::map::ValuesMut","header::map::ValueIterMut","header::name::Custom","header::map::ExtraValue","header::map::Drain","header::name::HeaderName","request::Parts","uri::scheme::Protocol","error::Error","header::map::Values","status::InvalidStatusCode","header::value::InvalidHeaderValueBytes","header::name::Repr","uri::scheme::Scheme2","header::map::Links","header::map::Keys","byte_str::ByteStr","uri::InvalidUri","uri::InvalidUriParts","header::name::StandardHeader","header::name::InvalidHeaderName","header::map::OccupiedEntry","version::Version","header::map::VacantEntry","header::map::Link","header::value::ToStrError","response::Parts","header::value::InvalidHeaderValue","response::Response","header::map::IntoIter","request::Builder","uri::authority::Authority","header::map::Iter","header::map::Bucket","uri::InvalidUriBytes","uri::Parts","header::map::Cursor"]},"header::map::VacantEntry":{"T":["error::Error","byte_str::ByteStr","uri::scheme::Protocol","header::name::HeaderName","header::map::IntoIter","uri::InvalidUri","request::Parts","uri::scheme::Scheme2","header::map::Link","header::value::InvalidHeaderValue","header::map::HashValue","header::value::HeaderValue","uri::scheme::Scheme","uri::authority::Authority","version::Version","extensions::Extensions","header::map::OccupiedEntry","header::map::Keys","header::map::Entry","header::map::Cursor","response::Builder","method::InvalidMethod","header::map::ValueIter","header::map::ValuesMut","uri::InvalidUriParts","header::name::StandardHeader","uri::Uri","request::Builder","error::Never","header::name::HdrName","uri::Parts","header::map::Drain","header::map::Iter","header::name::Repr","header::value::InvalidHeaderValueBytes","header::map::HeaderMap","header::map::ValueIterMut","header::map::Links","header::map::GetAll","request::Request","uri::InvalidUriBytes","header::map::Values","uri::path::PathAndQuery","<*const T as std::fmt::Debug>","uri::builder::Builder","header::name::InvalidHeaderName","header::map::Bucket","method::Method","status::StatusCode","response::Response","header::map::VacantEntry","header::map::ValueDrain","uri::ErrorKind","header::name::InvalidHeaderNameBytes","header::value::ToStrError","header::map::ExtraValue","status::InvalidStatusCode","response::Parts","uri::port::Port","header::name::Custom","header::map::IterMut","header::name::MaybeLower"]},"header::map::ValueDrain":{"T":["header::map::ValueDrain","<*const T as std::marker::Sync>","header::map::IterMut","header::map::Drain","header::map::ValueIterMut","header::map::Iter"]},"header::map::ValueIter":{"T":["response::Response","uri::builder::Builder","uri::scheme::Protocol","uri::Uri","header::name::HeaderName","header::map::HeaderMap","error::Never","request::Parts","status::StatusCode","header::map::VacantEntry","uri::path::PathAndQuery","header::value::InvalidHeaderValue","header::map::Entry","header::map::HashValue","header::map::IterMut","header::name::InvalidHeaderName","header::name::Custom","header::map::Links","header::map::Link","method::InvalidMethod","uri::scheme::Scheme","uri::InvalidUriBytes","header::map::Bucket","header::map::Drain","uri::Parts","header::map::ValuesMut","header::map::Cursor","header::name::StandardHeader","header::name::InvalidHeaderNameBytes","response::Parts","uri::authority::Authority","header::value::HeaderValue","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","header::map::GetAll","header::name::HdrName","header::map::ExtraValue","header::map::IntoIter","header::map::Iter","method::Method","response::Builder","version::Version","uri::port::Port","uri::ErrorKind","header::value::ToStrError","header::map::OccupiedEntry","request::Builder","<*const T as std::fmt::Debug>","status::InvalidStatusCode","header::map::ValueIter","extensions::Extensions","header::map::ValueIterMut","uri::InvalidUri","header::name::MaybeLower","request::Request","header::map::Values","uri::scheme::Scheme2","header::map::Keys","header::map::ValueDrain","byte_str::ByteStr","header::name::Repr","error::Error"]},"header::map::ValueIterMut":{"T":["header::map::Drain","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::ValueDrain"]},"header::map::Values":{"T":["header::name::HeaderName","header::map::Links","header::map::ValueDrain","header::map::ExtraValue","header::map::IntoIter","header::map::ValueIterMut","response::Response","header::map::HeaderMap","response::Parts","header::name::MaybeLower","uri::InvalidUri","request::Request","header::name::StandardHeader","uri::InvalidUriParts","uri::authority::Authority","header::name::Repr","header::map::Cursor","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme2","header::map::Link","extensions::Extensions","uri::Parts","header::map::Values","method::InvalidMethod","uri::scheme::Protocol","request::Builder","header::value::InvalidHeaderValue","header::map::Entry","error::Never","uri::path::PathAndQuery","header::map::Bucket","header::name::Custom","uri::Uri","header::map::IterMut","version::Version","header::map::ValueIter","byte_str::ByteStr","header::map::Keys","uri::builder::Builder","header::name::InvalidHeaderName","request::Parts","header::map::ValuesMut","status::StatusCode","header::name::HdrName","header::name::InvalidHeaderNameBytes","<&T as std::fmt::Debug>","header::map::OccupiedEntry","header::map::Iter","uri::ErrorKind","method::Method","header::value::ToStrError","header::map::Drain","header::map::GetAll","header::map::VacantEntry","header::value::HeaderValue","response::Builder","uri::port::Port","uri::InvalidUriBytes","header::map::HashValue","error::Error","uri::scheme::Scheme","status::InvalidStatusCode"]},"header::map::ValuesMut":{"T":["request::Builder","method::InvalidMethod","header::map::ValueIterMut","header::map::Values","header::map::HashValue","uri::authority::Authority","error::Error","header::name::MaybeLower","header::name::HdrName","header::name::Repr","header::map::VacantEntry","uri::ErrorKind","response::Response","uri::scheme::Scheme2","header::name::HeaderName","header::map::ExtraValue","uri::InvalidUri","header::map::Links","error::Never","header::map::OccupiedEntry","byte_str::ByteStr","header::map::Entry","uri::path::PathAndQuery","version::Version","status::StatusCode","response::Parts","uri::scheme::Scheme","header::name::StandardHeader","request::Parts","header::map::Drain","header::value::HeaderValue","header::map::Keys","header::map::IterMut","header::map::GetAll","<*const T as std::fmt::Debug>","method::Method","header::value::ToStrError","request::Request","uri::scheme::Protocol","header::map::ValueIter","header::name::InvalidHeaderName","header::map::Cursor","header::name::Custom","header::map::ValueDrain","uri::port::Port","uri::builder::Builder","header::map::HeaderMap","header::name::InvalidHeaderNameBytes","header::map::Link","uri::InvalidUriParts","status::InvalidStatusCode","uri::InvalidUriBytes","uri::Uri","header::value::InvalidHeaderValue","uri::Parts","extensions::Extensions","header::map::ValuesMut","response::Builder","header::value::InvalidHeaderValueBytes","header::map::Iter","header::map::IntoIter","header::map::Bucket"]},"header::name::Repr":{"T":["header::name::Repr","header::name::StandardHeader","byte_str::ByteStr","header::name::Custom","version::Version","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"request::Request":{"T":["uri::Parts","uri::Uri","method::Method","status::StatusCode","header::map::HeaderMap","version::Version","request::Builder","response::Builder","extensions::Extensions","response::Response","uri::builder::Builder","request::Request"]},"response::Response":{"T":["uri::Parts","uri::Uri","method::Method","status::StatusCode","request::Builder","header::map::HeaderMap","uri::builder::Builder","request::Request","response::Builder","version::Version","extensions::Extensions","response::Response"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","header::value::HeaderValue","uri::scheme::Scheme","<&T as std::convert::AsRef<U>>","uri::port::Port","method::Method"]},"uri::scheme::Scheme2":{"T":["header::map::Cursor","std::clone::impls::<impl std::clone::Clone for *const T>","header::map::HashValue","header::map::ExtraValue","uri::scheme::Scheme","header::map::Link","header::map::Links","header::map::Bucket","version::Version","header::value::HeaderValue","header::map::HeaderMap","method::Method","std::boxed::Box<byte_str::ByteStr>","header::name::StandardHeader","uri::scheme::Scheme2","header::name::HeaderName","header::name::MaybeLower","header::name::Repr","uri::scheme::Protocol","uri::Uri","status::StatusCode","uri::authority::Authority","uri::path::PathAndQuery","header::name::Custom","byte_str::ByteStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::GetAll<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::GetAll<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::GetAll<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Entry<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Entry<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::fmt::Debug","convert::HttpTryFrom","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::marker::Sized"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Entry<'a, T> as std::fmt::Debug>::fmt":{"T":["header::map::Links","header::value::InvalidHeaderValue","header::map::HashValue","header::map::Bucket","request::Request","uri::authority::Authority","method::Method","header::name::InvalidHeaderName","header::map::ValueIterMut","header::value::ToStrError","header::map::Drain","header::map::Link","uri::path::PathAndQuery","header::map::OccupiedEntry","header::name::HdrName","extensions::Extensions","request::Parts","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","uri::builder::Builder","method::InvalidMethod","header::name::StandardHeader","uri::port::Port","uri::InvalidUriBytes","<*mut T as std::fmt::Debug>","uri::Uri","header::map::Cursor","header::map::Keys","uri::InvalidUriParts","header::map::GetAll","error::Never","<*const T as std::fmt::Debug>","header::map::IterMut","uri::scheme::Scheme","status::InvalidStatusCode","header::name::MaybeLower","uri::Parts","header::value::InvalidHeaderValueBytes","header::name::HeaderName","header::map::ValuesMut","header::map::Entry","uri::ErrorKind","header::map::HeaderMap","error::Error","header::map::VacantEntry","header::name::Custom","header::map::IntoIter","header::map::Iter","uri::scheme::Scheme2","header::name::Repr","request::Builder","header::map::ValueIter","status::StatusCode","header::map::Values","response::Builder","uri::scheme::Protocol","header::value::HeaderValue","byte_str::ByteStr","header::map::ValueDrain","uri::InvalidUri","version::Version","response::Response","response::Parts"]},"header::map::Bucket":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::HashValue","status::StatusCode","header::name::MaybeLower","method::Method","uri::path::PathAndQuery","header::map::ExtraValue","uri::scheme::Scheme","byte_str::ByteStr","header::name::Custom","version::Version","header::map::Cursor","header::map::Links","header::map::HeaderMap","uri::scheme::Protocol","header::name::StandardHeader","header::name::HeaderName","header::value::HeaderValue","uri::Uri","uri::scheme::Scheme2","header::name::Repr","header::map::Bucket","header::map::Link","uri::authority::Authority"]},"header::map::Drain":{"T":["header::map::ValueIterMut","header::map::Iter","header::map::Drain","<*mut T as std::marker::Send>","header::map::IterMut","header::map::ValueDrain"]},"header::map::Entry":{"T":["header::name::MaybeLower","status::StatusCode","header::map::IterMut","uri::scheme::Protocol","error::Never","header::name::HeaderName","header::name::Custom","request::Builder","header::name::InvalidHeaderName","header::map::Links","response::Response","byte_str::ByteStr","header::map::Cursor","header::name::StandardHeader","header::map::Entry","response::Builder","version::Version","header::map::HashValue","header::map::Drain","method::Method","header::value::InvalidHeaderValue","uri::scheme::Scheme","header::value::InvalidHeaderValueBytes","uri::authority::Authority","header::map::HeaderMap","header::map::IntoIter","uri::ErrorKind","<&T as std::fmt::Debug>","header::map::Values","header::value::HeaderValue","header::map::Link","request::Parts","header::map::ExtraValue","header::map::Iter","uri::path::PathAndQuery","header::map::ValueIterMut","header::map::VacantEntry","uri::builder::Builder","uri::Parts","header::map::ValueIter","header::map::ValuesMut","header::map::GetAll","response::Parts","uri::InvalidUri","header::map::ValueDrain","status::InvalidStatusCode","header::value::ToStrError","header::map::OccupiedEntry","uri::port::Port","header::map::Keys","header::name::Repr","uri::scheme::Scheme2","error::Error","uri::InvalidUriBytes","header::name::HdrName","extensions::Extensions","uri::Uri","uri::InvalidUriParts","method::InvalidMethod","request::Request","header::name::InvalidHeaderNameBytes","header::map::Bucket"]},"header::map::ExtraValue":{"T":["uri::authority::Authority","header::map::Link","header::name::MaybeLower","uri::scheme::Protocol","header::map::HashValue","header::name::HeaderName","byte_str::ByteStr","header::map::Cursor","header::map::Bucket","header::name::Custom","uri::scheme::Scheme2","method::Method","header::name::StandardHeader","header::value::HeaderValue","header::name::Repr","<&T as std::fmt::Debug>","header::map::ExtraValue","version::Version","uri::path::PathAndQuery","header::map::HeaderMap","uri::Uri","status::StatusCode","uri::scheme::Scheme","header::map::Links"]},"header::map::GetAll":{"T":["byte_str::ByteStr","header::name::Repr","header::map::HeaderMap","version::Version","header::map::Link","header::map::Cursor","header::map::HashValue","uri::ErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::name::StandardHeader","header::map::GetAll","header::name::Custom"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","header::value::HeaderValue","std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["header::map::ValueIterMut","header::map::IntoIter","header::name::Repr","uri::scheme::Scheme","header::map::Values","response::Response","header::value::ToStrError","status::InvalidStatusCode","header::name::HdrName","header::value::InvalidHeaderValueBytes","header::map::Drain","header::name::StandardHeader","header::name::InvalidHeaderName","header::map::Iter","header::map::Links","header::map::VacantEntry","header::value::HeaderValue","status::StatusCode","header::map::ValuesMut","header::name::HeaderName","uri::scheme::Scheme2","header::map::Bucket","request::Parts","header::map::HeaderMap","header::map::HashValue","header::map::Keys","response::Parts","header::value::InvalidHeaderValue","header::map::ValueDrain","uri::InvalidUriBytes","header::map::Link","request::Builder","header::name::MaybeLower","uri::Parts","uri::builder::Builder","uri::authority::Authority","uri::InvalidUri","uri::port::Port","header::map::ValueIter","version::Version","header::map::ExtraValue","uri::path::PathAndQuery","header::map::IterMut","header::map::OccupiedEntry","response::Builder","method::Method","header::map::Entry","header::name::Custom","header::name::InvalidHeaderNameBytes","method::InvalidMethod","uri::ErrorKind","extensions::Extensions","header::map::GetAll","uri::InvalidUriParts","request::Request","header::map::Cursor","error::Error","uri::Uri","uri::scheme::Protocol","<*mut T as std::fmt::Debug>","byte_str::ByteStr","error::Never"]},"header::map::Iter":{"T":["header::map::Drain","header::map::IterMut","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","<*const T as std::fmt::Debug>"]},"header::map::IterMut":{"T":["header::map::Iter","header::map::ValueIterMut","<*mut T as std::marker::Sync>","header::map::IterMut","header::map::ValueDrain","header::map::Drain"]},"header::map::Keys":{"T":["uri::scheme::Protocol","response::Response","uri::Uri","uri::ErrorKind","extensions::Extensions","header::map::IterMut","header::map::Bucket","request::Request","header::map::IntoIter","uri::scheme::Scheme","header::name::Repr","method::Method","header::map::GetAll","uri::InvalidUriBytes","version::Version","header::map::ValueIter","header::name::InvalidHeaderName","byte_str::ByteStr","header::map::Cursor","header::value::ToStrError","header::map::OccupiedEntry","header::map::HashValue","header::name::StandardHeader","request::Parts","error::Error","header::name::Custom","uri::InvalidUri","header::map::ValueIterMut","<&T as std::fmt::Debug>","header::map::ValueDrain","status::StatusCode","header::map::HeaderMap","header::name::HdrName","uri::port::Port","uri::path::PathAndQuery","error::Never","header::map::Links","header::value::InvalidHeaderValue","method::InvalidMethod","header::name::HeaderName","status::InvalidStatusCode","response::Parts","header::name::MaybeLower","header::map::Iter","uri::Parts","header::map::Keys","request::Builder","header::map::ValuesMut","uri::builder::Builder","header::map::VacantEntry","response::Builder","header::map::Link","header::map::Values","header::map::Drain","header::value::HeaderValue","uri::authority::Authority","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","header::map::Entry","uri::scheme::Scheme2"]},"header::map::OccupiedEntry":{"T":["header::map::Bucket","header::name::StandardHeader","<&T as std::fmt::Debug>","header::value::InvalidHeaderValue","header::name::HdrName","header::map::HashValue","header::map::Values","error::Error","header::name::HeaderName","header::name::InvalidHeaderNameBytes","header::map::Iter","uri::scheme::Protocol","header::map::OccupiedEntry","method::InvalidMethod","uri::authority::Authority","header::map::ValueDrain","header::map::Entry","header::map::ValueIterMut","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","header::map::ExtraValue","uri::port::Port","header::map::Keys","response::Response","header::map::Link","uri::path::PathAndQuery","header::map::IterMut","header::map::HeaderMap","uri::scheme::Scheme","uri::scheme::Scheme2","header::name::InvalidHeaderName","header::value::HeaderValue","request::Builder","request::Request","header::map::Links","uri::ErrorKind","uri::builder::Builder","header::map::ValuesMut","header::map::Cursor","request::Parts","byte_str::ByteStr","header::map::VacantEntry","version::Version","header::value::ToStrError","header::map::Drain","header::name::Custom","header::map::IntoIter","response::Parts","uri::Parts","header::name::MaybeLower","uri::InvalidUri","extensions::Extensions","method::Method","status::StatusCode","status::InvalidStatusCode","uri::Uri","response::Builder","header::map::ValueIter","uri::InvalidUriBytes","header::name::Repr","error::Never","header::map::GetAll"]},"header::map::VacantEntry":{"T":["header::name::HdrName","header::map::Keys","header::map::ExtraValue","uri::path::PathAndQuery","header::map::OccupiedEntry","uri::authority::Authority","status::StatusCode","header::map::Links","header::map::IntoIter","header::name::InvalidHeaderName","header::map::IterMut","response::Parts","uri::Uri","header::map::ValuesMut","header::map::HeaderMap","header::value::InvalidHeaderValue","header::map::VacantEntry","version::Version","header::value::InvalidHeaderValueBytes","method::InvalidMethod","header::map::GetAll","byte_str::ByteStr","header::map::Link","header::map::ValueIterMut","header::map::ValueIter","header::map::Bucket","header::map::ValueDrain","response::Builder","uri::InvalidUriParts","header::value::HeaderValue","method::Method","header::map::Entry","uri::InvalidUri","uri::scheme::Protocol","header::map::Cursor","header::name::Repr","header::name::MaybeLower","header::name::HeaderName","header::map::Values","request::Request","uri::InvalidUriBytes","<*mut T as std::fmt::Debug>","uri::scheme::Scheme","uri::scheme::Scheme2","header::value::ToStrError","header::map::Iter","request::Parts","header::name::InvalidHeaderNameBytes","extensions::Extensions","response::Response","error::Never","uri::builder::Builder","uri::ErrorKind","header::map::HashValue","request::Builder","status::InvalidStatusCode","header::name::Custom","uri::Parts","header::map::Drain","header::name::StandardHeader","uri::port::Port","error::Error"]},"header::map::ValueDrain":{"T":["header::map::IterMut","<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::Iter","header::map::Drain","header::map::ValueDrain"]},"header::map::ValueIter":{"T":["request::Builder","header::map::OccupiedEntry","header::map::Links","header::map::Bucket","uri::InvalidUriParts","version::Version","header::name::InvalidHeaderName","header::value::ToStrError","uri::scheme::Scheme2","header::map::Keys","header::map::VacantEntry","header::value::HeaderValue","header::map::GetAll","response::Parts","header::name::StandardHeader","uri::ErrorKind","header::name::HeaderName","header::name::InvalidHeaderNameBytes","header::map::ValueIter","uri::InvalidUri","uri::path::PathAndQuery","<&T as std::fmt::Debug>","header::name::Repr","header::name::MaybeLower","status::StatusCode","header::map::IntoIter","uri::authority::Authority","header::map::IterMut","uri::scheme::Scheme","byte_str::ByteStr","response::Response","uri::Parts","request::Request","error::Error","header::map::HashValue","error::Never","uri::port::Port","header::map::Drain","header::map::Values","uri::builder::Builder","method::InvalidMethod","header::value::InvalidHeaderValue","header::name::Custom","header::map::ValueDrain","header::map::ExtraValue","header::value::InvalidHeaderValueBytes","uri::InvalidUriBytes","method::Method","header::map::ValuesMut","header::map::ValueIterMut","header::map::HeaderMap","status::InvalidStatusCode","header::map::Cursor","header::name::HdrName","header::map::Link","header::map::Iter","extensions::Extensions","response::Builder","header::map::Entry","uri::scheme::Protocol","uri::Uri","request::Parts"]},"header::map::ValueIterMut":{"T":["header::map::Drain","header::map::Iter","header::map::IterMut","<*mut T as std::fmt::Debug>","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::Values":{"T":["response::Parts","header::value::HeaderValue","header::map::Iter","uri::scheme::Scheme","header::map::OccupiedEntry","error::Error","version::Version","header::name::Custom","header::map::HashValue","header::map::Link","header::map::Cursor","header::map::ValueDrain","response::Response","header::map::GetAll","header::name::Repr","method::InvalidMethod","response::Builder","byte_str::ByteStr","header::map::Links","header::map::Keys","uri::InvalidUriBytes","status::InvalidStatusCode","header::map::Values","uri::Parts","uri::InvalidUriParts","error::Never","request::Request","header::map::Drain","header::name::HdrName","uri::InvalidUri","<*const T as std::fmt::Debug>","uri::Uri","uri::builder::Builder","uri::authority::Authority","uri::port::Port","method::Method","header::map::Bucket","request::Builder","header::map::HeaderMap","header::value::InvalidHeaderValue","header::map::IterMut","header::map::ExtraValue","uri::scheme::Protocol","uri::scheme::Scheme2","header::name::StandardHeader","header::map::IntoIter","header::name::MaybeLower","header::name::InvalidHeaderName","header::map::VacantEntry","status::StatusCode","header::map::Entry","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::name::HeaderName","header::map::ValueIterMut","header::name::InvalidHeaderNameBytes","header::value::ToStrError","header::map::ValueIter","request::Parts","extensions::Extensions","uri::ErrorKind","header::map::ValuesMut"]},"header::map::ValuesMut":{"T":["header::map::ValueIter","header::map::Values","uri::InvalidUri","<&T as std::fmt::Debug>","header::map::OccupiedEntry","request::Builder","header::map::Drain","header::value::HeaderValue","header::map::Keys","uri::scheme::Scheme","header::map::IntoIter","method::Method","header::map::ValueIterMut","method::InvalidMethod","uri::InvalidUriBytes","header::name::Repr","response::Parts","header::name::InvalidHeaderName","uri::authority::Authority","header::map::Entry","header::map::HashValue","version::Version","header::name::Custom","header::name::MaybeLower","header::map::ValuesMut","header::map::IterMut","uri::port::Port","header::name::HdrName","header::name::StandardHeader","header::map::HeaderMap","header::map::Iter","uri::InvalidUriParts","header::map::Links","header::map::GetAll","request::Request","header::value::InvalidHeaderValue","uri::builder::Builder","extensions::Extensions","response::Builder","header::value::InvalidHeaderValueBytes","header::value::ToStrError","uri::Parts","uri::path::PathAndQuery","header::map::Bucket","uri::scheme::Protocol","byte_str::ByteStr","uri::ErrorKind","header::name::InvalidHeaderNameBytes","request::Parts","header::name::HeaderName","header::map::ValueDrain","header::map::ExtraValue","response::Response","header::map::VacantEntry","error::Never","header::map::Link","error::Error","header::map::Cursor","uri::Uri","uri::scheme::Scheme2","status::StatusCode","status::InvalidStatusCode"]},"header::name::Repr":{"T":["version::Version","byte_str::ByteStr","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","header::name::Repr","header::name::Custom","header::name::StandardHeader"]},"request::Request":{"T":["method::Method","extensions::Extensions","uri::Parts","header::map::HeaderMap","status::StatusCode","request::Builder","request::Request","version::Version","uri::builder::Builder","uri::Uri","response::Response","response::Builder"]},"response::Response":{"T":["response::Response","response::Builder","version::Version","request::Builder","uri::builder::Builder","uri::Uri","status::StatusCode","header::map::HeaderMap","uri::Parts","request::Request","method::Method","extensions::Extensions"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","<&T as std::convert::AsRef<U>>","uri::port::Port","uri::scheme::Scheme","header::value::HeaderValue","method::Method"]},"uri::scheme::Scheme2":{"T":["uri::scheme::Protocol","method::Method","header::map::Bucket","status::StatusCode","header::map::Link","version::Version","header::map::HashValue","header::name::MaybeLower","header::name::HeaderName","header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::HeaderMap","header::value::HeaderValue","byte_str::ByteStr","header::name::Repr","std::boxed::Box<byte_str::ByteStr>","header::map::Links","uri::Uri","header::map::Cursor","header::map::ExtraValue","uri::scheme::Scheme2","uri::authority::Authority","uri::scheme::Scheme","header::name::Custom","uri::path::PathAndQuery"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Entry<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Entry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Entry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Entry<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::VacantEntry<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::VacantEntry<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::clone::Clone","convert::HttpTryFrom","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::VacantEntry<'a, T> as std::fmt::Debug>::fmt":{"T":["header::map::Keys","status::InvalidStatusCode","uri::path::PathAndQuery","status::StatusCode","uri::InvalidUriBytes","header::map::Iter","header::map::VacantEntry","version::Version","header::value::InvalidHeaderValue","uri::scheme::Scheme2","uri::builder::Builder","uri::scheme::Scheme","header::map::OccupiedEntry","header::value::HeaderValue","error::Error","header::map::HashValue","header::map::ValueDrain","uri::InvalidUriParts","header::map::ValueIterMut","response::Response","uri::ErrorKind","header::value::InvalidHeaderValueBytes","header::map::Entry","uri::Parts","header::name::HdrName","header::map::ExtraValue","header::map::Link","request::Request","header::name::Custom","uri::authority::Authority","header::name::StandardHeader","header::name::MaybeLower","header::name::InvalidHeaderNameBytes","header::map::ValuesMut","header::map::Bucket","request::Parts","uri::Uri","header::map::ValueIter","header::map::IterMut","method::Method","method::InvalidMethod","extensions::Extensions","<*mut T as std::fmt::Debug>","header::map::Cursor","uri::scheme::Protocol","header::map::Drain","uri::InvalidUri","header::name::InvalidHeaderName","header::map::GetAll","error::Never","header::map::Links","uri::port::Port","header::value::ToStrError","request::Builder","response::Builder","header::name::HeaderName","header::map::HeaderMap","header::map::IntoIter","byte_str::ByteStr","header::map::Values","header::name::Repr","response::Parts"]},"header::map::Bucket":{"T":["uri::authority::Authority","uri::scheme::Scheme2","header::name::MaybeLower","uri::scheme::Protocol","header::name::Custom","status::StatusCode","uri::scheme::Scheme","header::map::Links","byte_str::ByteStr","version::Version","header::map::HashValue","header::map::Link","header::name::Repr","uri::Uri","header::map::ExtraValue","uri::path::PathAndQuery","method::Method","header::name::StandardHeader","header::map::Bucket","header::map::Cursor","header::value::HeaderValue","header::name::HeaderName","<*const T as std::fmt::Debug>","header::map::HeaderMap"]},"header::map::Drain":{"T":["header::map::Iter","header::map::ValueDrain","header::map::Drain","header::map::ValueIterMut","<*mut T as std::marker::Send>","header::map::IterMut"]},"header::map::Entry":{"T":["request::Builder","header::name::HdrName","header::map::Iter","header::map::IterMut","<&mut T as std::fmt::Debug>","status::StatusCode","header::map::HashValue","header::map::Bucket","extensions::Extensions","uri::Uri","uri::builder::Builder","method::InvalidMethod","version::Version","header::map::ValueDrain","uri::scheme::Scheme2","header::value::InvalidHeaderValueBytes","header::map::Cursor","header::value::InvalidHeaderValue","header::name::HeaderName","uri::path::PathAndQuery","uri::authority::Authority","header::map::Values","request::Request","response::Builder","status::InvalidStatusCode","header::name::Repr","response::Parts","header::name::InvalidHeaderNameBytes","header::map::Links","request::Parts","uri::InvalidUriParts","header::map::VacantEntry","uri::scheme::Protocol","header::name::Custom","header::map::ValuesMut","header::name::InvalidHeaderName","uri::Parts","uri::InvalidUri","uri::port::Port","method::Method","header::value::HeaderValue","header::name::StandardHeader","error::Never","header::map::Drain","header::map::ValueIter","header::map::HeaderMap","header::map::ExtraValue","header::map::ValueIterMut","header::map::GetAll","header::name::MaybeLower","header::map::IntoIter","response::Response","error::Error","header::value::ToStrError","byte_str::ByteStr","header::map::Keys","uri::InvalidUriBytes","header::map::OccupiedEntry","uri::ErrorKind","header::map::Entry","header::map::Link","uri::scheme::Scheme"]},"header::map::ExtraValue":{"T":["status::StatusCode","header::map::HeaderMap","header::name::Custom","header::name::StandardHeader","method::Method","header::map::ExtraValue","header::value::HeaderValue","header::map::HashValue","version::Version","uri::scheme::Protocol","uri::path::PathAndQuery","uri::Uri","header::name::HeaderName","<&T as std::fmt::Debug>","header::name::Repr","uri::scheme::Scheme","header::map::Cursor","header::map::Links","header::name::MaybeLower","byte_str::ByteStr","uri::authority::Authority","header::map::Link","header::map::Bucket","uri::scheme::Scheme2"]},"header::map::GetAll":{"T":["<*mut T as std::fmt::Debug>","header::name::Repr","header::map::Cursor","version::Version","byte_str::ByteStr","header::name::StandardHeader","header::map::GetAll","header::name::Custom","header::map::Link","uri::ErrorKind","header::map::HashValue","header::map::HeaderMap"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["header::value::HeaderValue","status::InvalidStatusCode","uri::ErrorKind","status::StatusCode","uri::scheme::Protocol","byte_str::ByteStr","header::map::Link","version::Version","header::name::HdrName","header::map::OccupiedEntry","uri::Uri","header::map::Links","<*mut T as std::fmt::Debug>","header::name::MaybeLower","header::map::HashValue","response::Response","uri::InvalidUriParts","header::name::Repr","header::map::ValuesMut","request::Request","error::Never","header::map::ValueDrain","uri::InvalidUri","header::value::ToStrError","header::map::Cursor","header::map::Drain","header::map::HeaderMap","header::value::InvalidHeaderValue","uri::Parts","uri::port::Port","uri::scheme::Scheme","header::map::IterMut","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::name::HeaderName","header::map::Values","header::map::Bucket","header::map::VacantEntry","header::map::ValueIterMut","extensions::Extensions","uri::authority::Authority","error::Error","header::map::IntoIter","response::Builder","method::InvalidMethod","request::Builder","method::Method","header::map::ExtraValue","header::name::InvalidHeaderName","header::map::Keys","uri::builder::Builder","uri::path::PathAndQuery","uri::InvalidUriBytes","request::Parts","header::map::GetAll","response::Parts","uri::scheme::Scheme2","header::map::Iter","header::name::InvalidHeaderNameBytes","header::name::Custom","header::map::Entry","header::name::StandardHeader"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueDrain","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::Iter","header::map::Drain","<*const T as std::marker::Send>","header::map::ValueIterMut","header::map::ValueDrain"]},"header::map::Keys":{"T":["uri::Uri","header::map::VacantEntry","uri::authority::Authority","extensions::Extensions","header::name::Custom","request::Request","header::name::HeaderName","uri::InvalidUri","uri::builder::Builder","header::map::ValueDrain","header::map::HashValue","header::name::InvalidHeaderName","response::Parts","error::Error","header::map::GetAll","header::map::Iter","request::Builder","header::value::HeaderValue","header::map::ValueIterMut","header::map::ValueIter","header::map::Cursor","header::name::StandardHeader","byte_str::ByteStr","version::Version","method::InvalidMethod","uri::scheme::Protocol","header::name::MaybeLower","header::name::HdrName","header::map::Entry","header::map::IterMut","header::map::ValuesMut","header::name::InvalidHeaderNameBytes","header::name::Repr","header::map::IntoIter","method::Method","uri::port::Port","uri::scheme::Scheme","header::map::Drain","header::value::ToStrError","header::map::Links","header::map::Link","header::value::InvalidHeaderValue","status::InvalidStatusCode","response::Builder","status::StatusCode","uri::InvalidUriParts","header::map::OccupiedEntry","uri::ErrorKind","header::map::Bucket","<&mut T as std::fmt::Debug>","uri::scheme::Scheme2","request::Parts","header::map::ExtraValue","header::map::Values","error::Never","uri::Parts","header::map::HeaderMap","response::Response","uri::InvalidUriBytes","uri::path::PathAndQuery","header::value::InvalidHeaderValueBytes","header::map::Keys"]},"header::map::OccupiedEntry":{"T":["extensions::Extensions","header::value::HeaderValue","header::map::Cursor","<*mut T as std::fmt::Debug>","header::map::HashValue","header::name::Custom","method::InvalidMethod","header::name::StandardHeader","header::map::Link","header::map::Keys","header::map::OccupiedEntry","header::value::InvalidHeaderValue","header::value::ToStrError","header::name::HeaderName","header::map::Entry","method::Method","header::name::Repr","header::map::IntoIter","header::map::GetAll","uri::InvalidUri","header::name::HdrName","error::Never","uri::Parts","header::name::InvalidHeaderName","uri::scheme::Scheme","uri::Uri","request::Builder","header::map::Drain","uri::InvalidUriBytes","uri::scheme::Protocol","header::map::ValueDrain","uri::port::Port","response::Parts","response::Builder","header::map::ValueIterMut","header::map::IterMut","header::map::VacantEntry","uri::authority::Authority","version::Version","status::InvalidStatusCode","response::Response","uri::builder::Builder","request::Request","uri::path::PathAndQuery","status::StatusCode","header::name::MaybeLower","byte_str::ByteStr","uri::scheme::Scheme2","request::Parts","uri::ErrorKind","header::map::Values","header::name::InvalidHeaderNameBytes","header::map::ValueIter","header::map::Bucket","header::map::HeaderMap","uri::InvalidUriParts","header::map::Iter","header::map::ExtraValue","header::map::Links","header::value::InvalidHeaderValueBytes","header::map::ValuesMut","error::Error"]},"header::map::VacantEntry":{"T":["header::name::HdrName","header::map::Iter","header::value::InvalidHeaderValue","request::Builder","header::map::ExtraValue","extensions::Extensions","header::name::InvalidHeaderName","header::map::ValueIterMut","response::Response","header::name::HeaderName","status::StatusCode","header::value::HeaderValue","request::Parts","uri::InvalidUriBytes","uri::scheme::Protocol","header::map::Cursor","method::InvalidMethod","header::map::GetAll","header::map::VacantEntry","uri::scheme::Scheme","header::map::ValueDrain","header::map::Bucket","uri::InvalidUriParts","uri::Uri","header::map::ValuesMut","header::map::ValueIter","response::Parts","header::map::Drain","error::Never","header::name::MaybeLower","uri::ErrorKind","header::name::InvalidHeaderNameBytes","uri::path::PathAndQuery","header::value::ToStrError","uri::authority::Authority","header::name::Repr","byte_str::ByteStr","header::map::IterMut","response::Builder","request::Request","uri::builder::Builder","header::name::Custom","uri::InvalidUri","method::Method","status::InvalidStatusCode","header::map::Values","uri::Parts","header::map::HashValue","<&mut T as std::fmt::Debug>","uri::scheme::Scheme2","header::name::StandardHeader","header::map::Links","header::map::OccupiedEntry","uri::port::Port","header::value::InvalidHeaderValueBytes","header::map::HeaderMap","header::map::Keys","header::map::Entry","header::map::IntoIter","header::map::Link","version::Version","error::Error"]},"header::map::ValueDrain":{"T":["header::map::Iter","header::map::Drain","<*const T as std::marker::Send>","header::map::ValueDrain","header::map::ValueIterMut","header::map::IterMut"]},"header::map::ValueIter":{"T":["uri::port::Port","header::name::MaybeLower","response::Builder","uri::path::PathAndQuery","uri::authority::Authority","byte_str::ByteStr","header::map::ValueIter","header::map::Values","header::map::IntoIter","header::name::Repr","header::map::ValueIterMut","error::Never","request::Builder","uri::ErrorKind","request::Request","error::Error","request::Parts","header::value::InvalidHeaderValueBytes","method::Method","header::map::HashValue","header::name::StandardHeader","header::name::InvalidHeaderNameBytes","header::value::InvalidHeaderValue","header::map::Cursor","header::map::Bucket","version::Version","header::value::HeaderValue","header::map::VacantEntry","header::map::Link","header::map::Keys","header::map::IterMut","header::map::ExtraValue","header::map::Links","header::map::Drain","status::StatusCode","uri::InvalidUriParts","header::value::ToStrError","header::map::OccupiedEntry","header::name::InvalidHeaderName","uri::Parts","header::map::ValueDrain","header::map::ValuesMut","<&T as std::fmt::Debug>","response::Parts","header::map::Entry","extensions::Extensions","uri::InvalidUriBytes","status::InvalidStatusCode","header::name::HeaderName","method::InvalidMethod","uri::builder::Builder","uri::scheme::Scheme","uri::scheme::Protocol","header::name::HdrName","uri::InvalidUri","uri::scheme::Scheme2","header::map::GetAll","header::name::Custom","header::map::Iter","response::Response","header::map::HeaderMap","uri::Uri"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter","header::map::Drain","<*mut T as std::marker::Sync>","header::map::IterMut"]},"header::map::Values":{"T":["request::Request","header::map::Links","header::map::VacantEntry","header::value::InvalidHeaderValueBytes","response::Response","uri::InvalidUri","<&mut T as std::fmt::Debug>","header::value::ToStrError","header::name::InvalidHeaderNameBytes","header::map::HashValue","header::name::Repr","error::Never","uri::authority::Authority","header::name::MaybeLower","header::name::InvalidHeaderName","uri::Uri","version::Version","response::Builder","header::map::Link","uri::port::Port","uri::scheme::Scheme","uri::scheme::Scheme2","header::name::HdrName","header::map::Drain","header::map::ValueIterMut","header::name::HeaderName","request::Parts","header::map::Bucket","header::map::ExtraValue","uri::path::PathAndQuery","header::value::HeaderValue","header::map::Entry","header::map::Cursor","header::map::OccupiedEntry","status::InvalidStatusCode","header::value::InvalidHeaderValue","uri::InvalidUriParts","header::map::IterMut","header::name::StandardHeader","uri::Parts","header::map::IntoIter","header::map::ValuesMut","response::Parts","header::map::GetAll","uri::scheme::Protocol","uri::ErrorKind","extensions::Extensions","method::InvalidMethod","header::map::Keys","header::name::Custom","method::Method","byte_str::ByteStr","header::map::Iter","uri::builder::Builder","status::StatusCode","error::Error","uri::InvalidUriBytes","header::map::ValueIter","header::map::Values","header::map::HeaderMap","request::Builder","header::map::ValueDrain"]},"header::map::ValuesMut":{"T":["header::map::ValueDrain","header::name::MaybeLower","header::map::OccupiedEntry","uri::path::PathAndQuery","method::InvalidMethod","uri::authority::Authority","header::map::ValueIterMut","header::map::ValuesMut","header::map::Iter","header::map::GetAll","error::Error","header::value::HeaderValue","header::map::Links","request::Request","request::Parts","header::value::ToStrError","response::Parts","header::value::InvalidHeaderValue","response::Response","uri::Parts","uri::scheme::Scheme2","header::map::Drain","header::map::Keys","header::name::InvalidHeaderNameBytes","uri::Uri","uri::ErrorKind","header::name::HdrName","header::map::IterMut","error::Never","header::map::HeaderMap","header::name::Custom","response::Builder","uri::scheme::Protocol","header::map::IntoIter","uri::InvalidUriBytes","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","header::map::ValueIter","version::Version","uri::scheme::Scheme","header::map::Link","byte_str::ByteStr","header::name::Repr","uri::InvalidUri","header::name::InvalidHeaderName","uri::builder::Builder","header::name::HeaderName","header::map::ExtraValue","<*mut T as std::fmt::Debug>","header::map::HashValue","header::map::Cursor","header::name::StandardHeader","header::map::Entry","header::map::Bucket","status::StatusCode","uri::InvalidUriParts","method::Method","request::Builder","status::InvalidStatusCode","uri::port::Port","header::map::Values","extensions::Extensions"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::Repr","std::hash::impls::<impl std::hash::Hash for *const T>","header::name::Custom","header::name::StandardHeader","version::Version"]},"request::Request":{"T":["request::Builder","uri::Parts","request::Request","version::Version","uri::Uri","response::Builder","uri::builder::Builder","status::StatusCode","method::Method","extensions::Extensions","header::map::HeaderMap","response::Response"]},"response::Response":{"T":["request::Request","request::Builder","header::map::HeaderMap","method::Method","uri::builder::Builder","uri::Parts","status::StatusCode","uri::Uri","response::Response","version::Version","response::Builder","extensions::Extensions"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","uri::scheme::Scheme","<&T as std::fmt::Debug>","method::Method","uri::port::Port","header::value::HeaderValue"]},"uri::scheme::Scheme2":{"T":["uri::scheme::Protocol","header::value::HeaderValue","std::boxed::Box<byte_str::ByteStr>","header::map::Cursor","header::name::MaybeLower","uri::path::PathAndQuery","header::map::HashValue","header::name::Repr","header::name::HeaderName","method::Method","header::map::ExtraValue","uri::scheme::Scheme2","byte_str::ByteStr","header::map::Link","status::StatusCode","header::map::Links","<&mut T as std::fmt::Debug>","header::map::HeaderMap","uri::Uri","header::map::Bucket","header::name::StandardHeader","header::name::Custom","version::Version","uri::authority::Authority","uri::scheme::Scheme"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::VacantEntry<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::VacantEntry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::VacantEntry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::VacantEntry<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::OccupiedEntry<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::OccupiedEntry<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::cmp::PartialEq","convert::HttpTryFrom","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Send","std::marker::Sized"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Send","std::marker::Sync","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::OccupiedEntry<'a, T> as std::fmt::Debug>::fmt":{"T":["header::value::HeaderValue","<*const T as std::fmt::Debug>","error::Never","header::map::ValuesMut","request::Parts","header::value::ToStrError","request::Builder","uri::scheme::Protocol","header::name::StandardHeader","header::name::HeaderName","header::name::InvalidHeaderName","header::map::Cursor","uri::Parts","response::Response","uri::Uri","status::InvalidStatusCode","status::StatusCode","uri::scheme::Scheme2","header::map::HashValue","uri::ErrorKind","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","header::map::ValueIterMut","uri::authority::Authority","uri::InvalidUri","header::map::ValueDrain","header::map::HeaderMap","uri::port::Port","request::Request","header::map::Drain","header::map::Values","header::map::Iter","header::map::OccupiedEntry","header::map::IntoIter","header::map::ValueIter","header::map::GetAll","method::Method","version::Version","uri::builder::Builder","header::name::HdrName","<&T as std::fmt::Debug>","byte_str::ByteStr","header::name::MaybeLower","header::map::ExtraValue","header::map::VacantEntry","uri::path::PathAndQuery","header::map::IterMut","header::value::InvalidHeaderValueBytes","error::Error","header::map::Links","header::map::Entry","header::map::Keys","response::Parts","header::value::InvalidHeaderValue","response::Builder","header::map::Link","uri::scheme::Scheme","method::InvalidMethod","header::name::Repr","extensions::Extensions","header::map::Bucket","header::name::Custom","uri::InvalidUriParts"]},"header::map::Bucket":{"T":["header::map::Links","header::name::Custom","uri::scheme::Scheme2","header::name::HeaderName","header::value::HeaderValue","uri::path::PathAndQuery","header::map::HeaderMap","header::name::StandardHeader","uri::Uri","header::name::MaybeLower","byte_str::ByteStr","header::map::Bucket","header::name::Repr","uri::authority::Authority","status::StatusCode","uri::scheme::Protocol","header::map::HashValue","header::map::Cursor","version::Version","header::map::ExtraValue","std::clone::impls::<impl std::clone::Clone for &mut T>","uri::scheme::Scheme","method::Method","header::map::Link"]},"header::map::Drain":{"T":["header::map::Drain","<*mut T as std::marker::Send>","header::map::IterMut","header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut"]},"header::map::Entry":{"T":["uri::InvalidUriBytes","response::Builder","method::Method","error::Never","uri::Uri","header::name::MaybeLower","byte_str::ByteStr","status::InvalidStatusCode","header::map::Bucket","header::map::HeaderMap","header::map::GetAll","response::Response","uri::builder::Builder","status::StatusCode","version::Version","header::map::IntoIter","header::name::Custom","header::name::StandardHeader","header::map::Keys","header::map::Link","header::map::ValuesMut","uri::port::Port","header::name::InvalidHeaderNameBytes","header::map::OccupiedEntry","response::Parts","uri::ErrorKind","extensions::Extensions","header::map::Links","header::map::VacantEntry","uri::path::PathAndQuery","<&T as std::fmt::Debug>","error::Error","header::map::ExtraValue","header::map::Values","header::value::ToStrError","header::name::Repr","method::InvalidMethod","header::map::Entry","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","uri::Parts","request::Request","header::map::IterMut","header::map::ValueIter","header::map::Iter","header::name::HeaderName","header::name::InvalidHeaderName","request::Builder","header::map::Drain","uri::authority::Authority","uri::scheme::Scheme","uri::scheme::Scheme2","request::Parts","header::map::ValueIterMut","header::map::ValueDrain","header::value::InvalidHeaderValue","uri::InvalidUri","header::name::HdrName","uri::InvalidUriParts","header::map::Cursor","header::map::HashValue","uri::scheme::Protocol"]},"header::map::ExtraValue":{"T":["header::name::Repr","header::value::HeaderValue","uri::scheme::Scheme2","header::map::HeaderMap","header::name::HeaderName","header::name::StandardHeader","status::StatusCode","header::map::Bucket","version::Version","header::map::Cursor","uri::Uri","uri::path::PathAndQuery","header::map::HashValue","header::map::ExtraValue","<&T as std::fmt::Debug>","header::map::Link","byte_str::ByteStr","header::name::Custom","uri::scheme::Protocol","uri::scheme::Scheme","header::name::MaybeLower","uri::authority::Authority","header::map::Links","method::Method"]},"header::map::GetAll":{"T":["std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>","header::map::HeaderMap","header::name::StandardHeader","header::name::Custom","header::name::Repr","version::Version","uri::ErrorKind","header::map::Cursor","header::map::HashValue","header::map::Link","header::map::GetAll","byte_str::ByteStr"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["header::name::StandardHeader","uri::Uri","header::map::VacantEntry","uri::InvalidUriBytes","<&mut T as std::fmt::Debug>","header::map::ValueIter","header::map::Entry","request::Parts","header::name::InvalidHeaderNameBytes","header::name::Custom","status::InvalidStatusCode","header::map::Bucket","header::map::HashValue","header::value::HeaderValue","uri::builder::Builder","header::map::OccupiedEntry","uri::InvalidUriParts","uri::authority::Authority","header::map::Values","header::map::Keys","request::Request","header::map::HeaderMap","header::map::ValueIterMut","request::Builder","header::map::Drain","method::Method","header::map::ValueDrain","header::name::Repr","header::value::ToStrError","uri::port::Port","header::value::InvalidHeaderValueBytes","method::InvalidMethod","uri::scheme::Scheme2","header::map::Iter","uri::ErrorKind","version::Version","header::map::ExtraValue","status::StatusCode","header::value::InvalidHeaderValue","response::Parts","extensions::Extensions","header::name::InvalidHeaderName","response::Builder","header::map::ValuesMut","header::map::IntoIter","header::name::HeaderName","response::Response","uri::scheme::Scheme","header::map::Link","byte_str::ByteStr","header::map::IterMut","uri::path::PathAndQuery","uri::InvalidUri","header::map::Links","uri::scheme::Protocol","header::name::HdrName","header::name::MaybeLower","header::map::Cursor","error::Error","header::map::GetAll","error::Never","uri::Parts"]},"header::map::Iter":{"T":["header::map::Iter","<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::ValueDrain"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::ValueIterMut","<*const T as std::fmt::Debug>","header::map::Iter","header::map::ValueDrain","header::map::Drain"]},"header::map::Keys":{"T":["header::name::HdrName","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","header::map::HeaderMap","header::map::Links","header::map::ExtraValue","header::map::HashValue","header::map::Link","uri::builder::Builder","header::map::ValuesMut","uri::scheme::Scheme","method::InvalidMethod","header::map::IntoIter","header::map::Cursor","header::map::Drain","header::value::ToStrError","header::map::GetAll","header::name::StandardHeader","header::map::ValueDrain","header::map::IterMut","byte_str::ByteStr","method::Method","header::map::Keys","header::map::Bucket","header::map::ValueIterMut","header::name::Custom","response::Parts","request::Parts","request::Builder","uri::InvalidUriParts","error::Never","header::value::InvalidHeaderValueBytes","header::name::MaybeLower","header::value::HeaderValue","error::Error","uri::authority::Authority","uri::port::Port","header::map::ValueIter","header::map::Values","uri::Uri","header::map::Iter","header::map::Entry","header::name::HeaderName","version::Version","status::InvalidStatusCode","header::name::Repr","header::map::VacantEntry","header::name::InvalidHeaderName","<&mut T as std::fmt::Debug>","response::Builder","response::Response","extensions::Extensions","uri::scheme::Scheme2","header::map::OccupiedEntry","uri::InvalidUri","request::Request","header::value::InvalidHeaderValue","status::StatusCode","uri::path::PathAndQuery","uri::ErrorKind","uri::InvalidUriBytes","uri::Parts"]},"header::map::OccupiedEntry":{"T":["uri::InvalidUriParts","uri::InvalidUriBytes","uri::authority::Authority","header::value::ToStrError","header::name::MaybeLower","error::Error","header::map::Cursor","header::map::ValueIter","header::map::Values","header::map::GetAll","uri::port::Port","request::Request","header::map::Link","header::map::Entry","response::Parts","uri::InvalidUri","response::Builder","uri::scheme::Scheme","header::name::InvalidHeaderNameBytes","request::Parts","extensions::Extensions","header::name::Custom","header::name::HdrName","header::map::ValueDrain","byte_str::ByteStr","request::Builder","uri::ErrorKind","uri::builder::Builder","header::map::IterMut","header::map::OccupiedEntry","header::value::HeaderValue","header::map::Keys","uri::scheme::Protocol","error::Never","header::value::InvalidHeaderValue","status::InvalidStatusCode","method::Method","header::map::Iter","header::map::HeaderMap","version::Version","header::name::InvalidHeaderName","header::map::ValueIterMut","header::name::HeaderName","uri::scheme::Scheme2","uri::Parts","header::map::VacantEntry","header::name::Repr","header::map::IntoIter","uri::Uri","header::map::ValuesMut","header::map::ExtraValue","header::map::Drain","<*const T as std::fmt::Debug>","status::StatusCode","method::InvalidMethod","header::value::InvalidHeaderValueBytes","header::name::StandardHeader","response::Response","header::map::HashValue","header::map::Bucket","header::map::Links","uri::path::PathAndQuery"]},"header::map::VacantEntry":{"T":["header::name::StandardHeader","uri::InvalidUri","header::map::Links","header::map::ValueIter","uri::Uri","header::map::HeaderMap","header::name::HeaderName","request::Request","header::name::InvalidHeaderName","uri::scheme::Scheme2","header::map::OccupiedEntry","request::Parts","header::map::ValuesMut","uri::path::PathAndQuery","status::InvalidStatusCode","uri::builder::Builder","header::map::ValueDrain","header::name::MaybeLower","error::Never","header::map::Keys","header::value::ToStrError","byte_str::ByteStr","version::Version","uri::ErrorKind","header::map::IntoIter","header::name::InvalidHeaderNameBytes","response::Builder","header::map::Values","header::map::GetAll","header::map::VacantEntry","extensions::Extensions","header::map::IterMut","header::name::HdrName","response::Parts","method::Method","header::value::InvalidHeaderValue","header::map::Cursor","uri::InvalidUriBytes","header::value::InvalidHeaderValueBytes","method::InvalidMethod","header::map::Drain","uri::Parts","error::Error","header::map::HashValue","uri::port::Port","header::map::Entry","uri::InvalidUriParts","request::Builder","header::map::Iter","header::map::ValueIterMut","uri::scheme::Scheme","uri::authority::Authority","header::map::Link","response::Response","header::map::ExtraValue","uri::scheme::Protocol","<&T as std::fmt::Debug>","header::map::Bucket","header::name::Repr","header::name::Custom","header::value::HeaderValue","status::StatusCode"]},"header::map::ValueDrain":{"T":["header::map::IterMut","header::map::ValueDrain","header::map::Iter","<*mut T as std::marker::Sync>","header::map::Drain","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["response::Builder","uri::scheme::Scheme2","header::map::IntoIter","version::Version","header::map::Link","header::map::Iter","error::Error","uri::builder::Builder","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","response::Response","header::map::GetAll","header::map::ValueDrain","header::value::InvalidHeaderValue","header::name::Repr","request::Builder","uri::scheme::Scheme","header::map::HashValue","header::map::OccupiedEntry","header::map::Entry","uri::authority::Authority","request::Request","uri::InvalidUri","header::map::Links","uri::ErrorKind","error::Never","header::map::ValueIter","uri::Parts","request::Parts","header::map::IterMut","method::Method","header::map::ValueIterMut","byte_str::ByteStr","header::map::HeaderMap","header::name::InvalidHeaderName","header::value::HeaderValue","header::map::Values","uri::Uri","header::map::Cursor","header::map::ValuesMut","status::StatusCode","header::value::InvalidHeaderValueBytes","status::InvalidStatusCode","uri::InvalidUriBytes","header::name::HdrName","header::name::Custom","uri::port::Port","uri::path::PathAndQuery","uri::scheme::Protocol","header::name::HeaderName","header::map::Bucket","header::name::MaybeLower","header::name::StandardHeader","header::map::Keys","<*mut T as std::fmt::Debug>","response::Parts","header::map::Drain","extensions::Extensions","header::value::ToStrError","uri::InvalidUriParts","method::InvalidMethod","header::map::VacantEntry"]},"header::map::ValueIterMut":{"T":["<*mut T as std::marker::Send>","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::Iter","header::map::ValueDrain"]},"header::map::Values":{"T":["header::map::Bucket","header::value::ToStrError","header::name::InvalidHeaderNameBytes","header::map::Links","header::map::OccupiedEntry","header::map::Values","response::Builder","uri::builder::Builder","header::map::ValueIter","header::value::InvalidHeaderValue","header::name::StandardHeader","header::map::HeaderMap","header::name::HdrName","uri::authority::Authority","error::Never","header::name::Repr","header::value::InvalidHeaderValueBytes","response::Parts","header::map::Iter","status::InvalidStatusCode","header::map::IntoIter","status::StatusCode","uri::InvalidUri","uri::scheme::Scheme","header::map::ValuesMut","uri::ErrorKind","header::map::GetAll","header::map::ValueDrain","header::map::ValueIterMut","header::map::HashValue","header::name::Custom","uri::path::PathAndQuery","<&T as std::fmt::Debug>","header::map::Link","extensions::Extensions","response::Response","header::map::ExtraValue","header::map::Cursor","uri::Parts","header::map::IterMut","header::map::VacantEntry","byte_str::ByteStr","header::map::Keys","request::Request","uri::scheme::Protocol","request::Builder","uri::port::Port","header::name::InvalidHeaderName","uri::Uri","header::map::Drain","error::Error","header::name::MaybeLower","uri::InvalidUriParts","method::InvalidMethod","version::Version","header::name::HeaderName","header::map::Entry","header::value::HeaderValue","method::Method","uri::scheme::Scheme2","request::Parts","uri::InvalidUriBytes"]},"header::map::ValuesMut":{"T":["request::Parts","header::map::GetAll","header::name::MaybeLower","uri::port::Port","header::value::InvalidHeaderValue","header::map::OccupiedEntry","header::map::ValueDrain","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","header::map::IterMut","header::name::Repr","uri::ErrorKind","header::map::Iter","<*const T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::Cursor","uri::InvalidUriParts","header::map::Link","response::Builder","header::value::HeaderValue","header::name::StandardHeader","header::map::ValueIterMut","uri::builder::Builder","header::map::Drain","header::map::Entry","request::Request","header::map::Links","status::StatusCode","header::map::IntoIter","method::InvalidMethod","response::Parts","header::value::InvalidHeaderValueBytes","header::map::Bucket","method::Method","uri::scheme::Protocol","header::map::HeaderMap","header::map::ValuesMut","byte_str::ByteStr","request::Builder","version::Version","header::name::HdrName","uri::InvalidUriBytes","uri::scheme::Scheme2","uri::authority::Authority","status::InvalidStatusCode","error::Never","response::Response","uri::Parts","header::map::HashValue","header::name::InvalidHeaderName","header::map::ValueIter","header::value::ToStrError","error::Error","extensions::Extensions","uri::Uri","header::map::Keys","header::name::Custom","uri::InvalidUri","uri::scheme::Scheme","header::name::HeaderName","header::map::VacantEntry","header::map::Values"]},"header::name::Repr":{"T":["header::name::Custom","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","version::Version","header::name::Repr","header::name::StandardHeader","byte_str::ByteStr"]},"request::Request":{"T":["status::StatusCode","header::map::HeaderMap","request::Request","uri::Parts","request::Builder","response::Builder","version::Version","extensions::Extensions","uri::Uri","method::Method","response::Response","uri::builder::Builder"]},"response::Response":{"T":["uri::Uri","method::Method","request::Builder","header::map::HeaderMap","version::Version","response::Response","status::StatusCode","request::Request","response::Builder","extensions::Extensions","uri::builder::Builder","uri::Parts"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","<&T as std::fmt::Debug>","header::value::HeaderValue","method::Method","uri::port::Port","uri::scheme::Scheme"]},"uri::scheme::Scheme2":{"T":["header::map::ExtraValue","uri::path::PathAndQuery","header::name::MaybeLower","header::name::Repr","header::name::Custom","uri::scheme::Scheme","header::value::HeaderValue","uri::Uri","header::map::Bucket","byte_str::ByteStr","header::map::HeaderMap","header::name::HeaderName","uri::scheme::Scheme2","status::StatusCode","header::map::Links","header::map::Link","method::Method","uri::scheme::Protocol","header::map::HashValue","header::map::Cursor","std::boxed::Box<byte_str::ByteStr>","<&T as std::fmt::Debug>","uri::authority::Authority","header::name::StandardHeader","version::Version"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::OccupiedEntry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::OccupiedEntry<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::OccupiedEntry<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::ValueIter<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueIter<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","convert::HttpTryFrom","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::marker::Sync","std::marker::Send","std::marker::Sized","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::Eq","std::clone::Clone","std::hash::Hash","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::fmt::Debug","std::default::Default","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueIter<'a, T> as std::fmt::Debug>::fmt":{"T":["header::name::MaybeLower","header::map::IntoIter","request::Builder","header::map::ValuesMut","header::map::Link","header::map::VacantEntry","response::Builder","header::map::Bucket","byte_str::ByteStr","header::map::Cursor","header::map::ValueIterMut","header::name::HeaderName","request::Request","header::value::InvalidHeaderValueBytes","header::name::StandardHeader","uri::scheme::Protocol","response::Parts","uri::Parts","status::StatusCode","header::value::InvalidHeaderValue","header::map::Iter","header::name::Custom","header::map::Values","status::InvalidStatusCode","header::map::HeaderMap","method::InvalidMethod","header::map::Entry","header::name::Repr","uri::Uri","uri::InvalidUriParts","method::Method","header::map::OccupiedEntry","header::map::ValueIter","uri::port::Port","uri::path::PathAndQuery","header::map::IterMut","uri::ErrorKind","extensions::Extensions","header::map::ExtraValue","header::map::Keys","error::Error","request::Parts","header::map::Drain","header::map::ValueDrain","uri::scheme::Scheme2","uri::InvalidUriBytes","uri::InvalidUri","header::name::InvalidHeaderName","header::name::InvalidHeaderNameBytes","uri::builder::Builder","version::Version","uri::authority::Authority","uri::scheme::Scheme","header::map::Links","header::map::HashValue","header::name::HdrName","header::value::ToStrError","header::map::GetAll","error::Never","<&mut T as std::fmt::Debug>","response::Response","header::value::HeaderValue"]},"header::map::Bucket":{"T":["uri::Uri","uri::scheme::Scheme","header::map::Link","header::map::Links","std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::HeaderMap","version::Version","header::map::Cursor","uri::path::PathAndQuery","uri::authority::Authority","header::name::Custom","method::Method","header::value::HeaderValue","uri::scheme::Protocol","status::StatusCode","header::name::HeaderName","uri::scheme::Scheme2","header::map::HashValue","header::name::StandardHeader","header::name::Repr","header::name::MaybeLower","header::map::Bucket","byte_str::ByteStr","header::map::ExtraValue"]},"header::map::Drain":{"T":["header::map::ValueIterMut","header::map::IterMut","header::map::Iter","header::map::Drain","header::map::ValueDrain","<*mut T as std::fmt::Debug>"]},"header::map::Entry":{"T":["header::value::InvalidHeaderValueBytes","header::name::Repr","header::map::Values","header::map::Keys","header::name::HdrName","header::name::HeaderName","header::name::InvalidHeaderNameBytes","response::Parts","header::map::GetAll","error::Error","header::map::Link","header::map::Links","header::value::HeaderValue","uri::InvalidUriBytes","uri::Parts","byte_str::ByteStr","header::map::IterMut","uri::InvalidUriParts","uri::InvalidUri","header::map::Bucket","header::value::ToStrError","header::map::ValuesMut","header::map::Entry","header::name::MaybeLower","uri::scheme::Scheme2","header::name::InvalidHeaderName","header::map::OccupiedEntry","uri::path::PathAndQuery","method::InvalidMethod","method::Method","error::Never","header::map::Drain","header::name::Custom","<*const T as std::fmt::Debug>","request::Builder","header::map::Cursor","uri::scheme::Protocol","uri::builder::Builder","header::map::ExtraValue","request::Request","header::map::HashValue","uri::scheme::Scheme","header::map::IntoIter","header::map::ValueIterMut","header::map::HeaderMap","header::map::Iter","response::Response","header::value::InvalidHeaderValue","status::StatusCode","request::Parts","header::map::VacantEntry","uri::Uri","version::Version","header::map::ValueIter","status::InvalidStatusCode","response::Builder","header::map::ValueDrain","uri::authority::Authority","uri::port::Port","header::name::StandardHeader","extensions::Extensions","uri::ErrorKind"]},"header::map::ExtraValue":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","header::name::StandardHeader","header::name::Repr","uri::scheme::Scheme","uri::path::PathAndQuery","header::map::Cursor","version::Version","header::map::Links","uri::authority::Authority","header::map::HeaderMap","header::name::MaybeLower","header::map::Link","header::value::HeaderValue","header::name::Custom","uri::scheme::Protocol","header::map::ExtraValue","header::map::HashValue","uri::scheme::Scheme2","header::name::HeaderName","uri::Uri","header::map::Bucket","status::StatusCode","method::Method","byte_str::ByteStr"]},"header::map::GetAll":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::Custom","header::map::Cursor","version::Version","header::name::StandardHeader","header::map::HashValue","uri::ErrorKind","header::name::Repr","header::map::Link","header::map::HeaderMap","header::map::GetAll","byte_str::ByteStr"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr"]},"header::map::IntoIter":{"T":["header::map::Entry","header::value::InvalidHeaderValueBytes","header::map::HashValue","request::Request","status::InvalidStatusCode","extensions::Extensions","request::Parts","header::map::Keys","uri::authority::Authority","header::map::Values","response::Builder","header::map::Link","request::Builder","header::value::ToStrError","<&mut T as std::fmt::Debug>","header::name::MaybeLower","uri::Uri","header::value::InvalidHeaderValue","header::map::ValueIterMut","uri::Parts","uri::scheme::Scheme","uri::path::PathAndQuery","uri::port::Port","uri::ErrorKind","header::map::Cursor","header::map::ValueDrain","header::name::InvalidHeaderName","uri::InvalidUri","header::map::IntoIter","method::Method","header::name::Custom","header::map::Drain","header::name::HeaderName","header::value::HeaderValue","uri::scheme::Protocol","uri::InvalidUriParts","uri::InvalidUriBytes","header::map::Links","header::map::IterMut","header::map::VacantEntry","error::Error","header::name::InvalidHeaderNameBytes","response::Response","header::map::GetAll","version::Version","header::map::ExtraValue","method::InvalidMethod","response::Parts","error::Never","uri::builder::Builder","header::map::ValuesMut","byte_str::ByteStr","header::map::Bucket","header::map::HeaderMap","header::name::HdrName","header::map::ValueIter","header::map::OccupiedEntry","header::map::Iter","header::name::StandardHeader","uri::scheme::Scheme2","status::StatusCode","header::name::Repr"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::ValueDrain","<*const T as std::marker::Sync>","header::map::Drain","header::map::ValueIterMut","header::map::Iter"]},"header::map::IterMut":{"T":["header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::IterMut","<*const T as std::marker::Sync>","header::map::Drain"]},"header::map::Keys":{"T":["response::Builder","header::map::Links","uri::ErrorKind","header::map::ExtraValue","header::name::Repr","uri::path::PathAndQuery","header::map::HeaderMap","uri::port::Port","header::name::HeaderName","header::name::Custom","header::map::Bucket","uri::scheme::Scheme","header::name::MaybeLower","header::value::HeaderValue","header::map::ValuesMut","uri::scheme::Protocol","uri::authority::Authority","header::map::Values","uri::InvalidUri","request::Parts","uri::Parts","header::name::HdrName","version::Version","header::map::VacantEntry","header::map::Cursor","<*const T as std::fmt::Debug>","header::map::ValueIter","header::value::ToStrError","header::map::ValueIterMut","status::StatusCode","header::name::InvalidHeaderNameBytes","uri::Uri","header::name::StandardHeader","extensions::Extensions","header::map::ValueDrain","uri::builder::Builder","byte_str::ByteStr","method::InvalidMethod","error::Never","request::Request","request::Builder","header::map::IterMut","header::name::InvalidHeaderName","status::InvalidStatusCode","header::map::Keys","method::Method","header::map::Iter","error::Error","header::map::Entry","header::map::HashValue","response::Parts","header::map::Link","uri::InvalidUriParts","uri::scheme::Scheme2","header::map::GetAll","header::value::InvalidHeaderValue","uri::InvalidUriBytes","header::map::IntoIter","header::map::OccupiedEntry","header::map::Drain","header::value::InvalidHeaderValueBytes","response::Response"]},"header::map::OccupiedEntry":{"T":["header::map::Iter","uri::authority::Authority","version::Version","header::map::IterMut","uri::Uri","header::map::GetAll","header::value::ToStrError","request::Parts","response::Response","uri::InvalidUriBytes","response::Builder","byte_str::ByteStr","request::Request","response::Parts","header::map::VacantEntry","header::name::HdrName","header::value::InvalidHeaderValue","request::Builder","header::map::Bucket","header::map::Link","header::map::Drain","status::StatusCode","header::map::Cursor","header::name::StandardHeader","header::name::Custom","uri::ErrorKind","header::map::Values","uri::path::PathAndQuery","error::Never","uri::scheme::Scheme2","header::map::HeaderMap","error::Error","header::map::ValuesMut","header::name::Repr","header::map::ValueIter","<*mut T as std::fmt::Debug>","header::map::ValueIterMut","uri::port::Port","header::value::HeaderValue","header::map::ValueDrain","uri::InvalidUriParts","header::map::HashValue","uri::scheme::Scheme","uri::builder::Builder","header::map::IntoIter","header::map::ExtraValue","uri::scheme::Protocol","header::map::Entry","header::name::InvalidHeaderName","header::value::InvalidHeaderValueBytes","uri::Parts","status::InvalidStatusCode","method::Method","header::name::MaybeLower","extensions::Extensions","uri::InvalidUri","header::name::HeaderName","header::map::Links","method::InvalidMethod","header::map::OccupiedEntry","header::name::InvalidHeaderNameBytes","header::map::Keys"]},"header::map::VacantEntry":{"T":["uri::builder::Builder","header::name::MaybeLower","uri::scheme::Scheme","header::map::HashValue","header::value::HeaderValue","header::map::Bucket","request::Request","header::value::InvalidHeaderValue","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme2","uri::InvalidUriParts","header::map::Link","extensions::Extensions","header::name::Custom","header::map::Links","method::InvalidMethod","uri::authority::Authority","uri::InvalidUri","error::Never","header::map::ValueIter","uri::Uri","header::map::GetAll","header::map::ValueDrain","uri::InvalidUriBytes","header::map::Values","header::map::OccupiedEntry","response::Builder","header::name::StandardHeader","header::name::HeaderName","header::map::Entry","method::Method","header::name::InvalidHeaderName","request::Builder","header::map::Cursor","header::map::Keys","status::StatusCode","header::map::ValuesMut","header::map::IntoIter","header::value::ToStrError","header::map::ValueIterMut","header::map::ExtraValue","header::map::Iter","uri::Parts","response::Parts","version::Version","response::Response","error::Error","header::name::HdrName","uri::scheme::Protocol","header::map::Drain","header::map::HeaderMap","header::map::IterMut","request::Parts","status::InvalidStatusCode","<&mut T as std::fmt::Debug>","header::name::Repr","byte_str::ByteStr","uri::ErrorKind","uri::port::Port","header::map::VacantEntry","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery"]},"header::map::ValueDrain":{"T":["header::map::ValueDrain","header::map::IterMut","<*const T as std::fmt::Debug>","header::map::Drain","header::map::Iter","header::map::ValueIterMut"]},"header::map::ValueIter":{"T":["header::map::ValueIter","header::map::Entry","request::Request","header::map::Drain","uri::authority::Authority","header::map::HashValue","status::StatusCode","uri::InvalidUri","status::InvalidStatusCode","header::map::Links","header::map::Iter","response::Builder","request::Parts","error::Error","uri::scheme::Scheme2","header::name::Repr","header::map::Keys","header::name::InvalidHeaderName","header::value::InvalidHeaderValueBytes","extensions::Extensions","header::map::ExtraValue","response::Response","header::name::Custom","method::Method","header::map::ValueIterMut","response::Parts","header::map::GetAll","error::Never","header::map::OccupiedEntry","uri::InvalidUriBytes","uri::scheme::Protocol","byte_str::ByteStr","uri::path::PathAndQuery","header::map::Link","header::map::ValuesMut","header::map::HeaderMap","header::name::HeaderName","uri::ErrorKind","header::name::StandardHeader","uri::Uri","header::name::HdrName","uri::builder::Builder","<&T as std::fmt::Debug>","header::map::Values","header::value::HeaderValue","header::map::IntoIter","header::map::IterMut","version::Version","request::Builder","header::value::ToStrError","uri::InvalidUriParts","header::map::VacantEntry","header::map::Cursor","method::InvalidMethod","header::name::MaybeLower","uri::Parts","header::name::InvalidHeaderNameBytes","uri::port::Port","header::map::Bucket","header::map::ValueDrain","header::value::InvalidHeaderValue","uri::scheme::Scheme"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::Drain","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Iter","header::map::ValueDrain"]},"header::map::Values":{"T":["header::name::StandardHeader","header::map::Link","header::map::Iter","header::value::HeaderValue","header::name::MaybeLower","request::Request","uri::InvalidUriBytes","uri::port::Port","extensions::Extensions","response::Response","status::InvalidStatusCode","byte_str::ByteStr","error::Never","header::map::Links","request::Builder","status::StatusCode","version::Version","header::map::OccupiedEntry","uri::Parts","header::map::GetAll","uri::scheme::Scheme","uri::authority::Authority","header::name::InvalidHeaderName","header::map::HeaderMap","method::InvalidMethod","header::value::InvalidHeaderValue","header::map::Drain","response::Parts","header::name::HdrName","request::Parts","header::map::IterMut","uri::Uri","header::map::IntoIter","header::map::ExtraValue","header::map::Cursor","method::Method","header::map::ValuesMut","header::map::Keys","header::name::HeaderName","header::map::Bucket","uri::builder::Builder","header::map::VacantEntry","uri::scheme::Protocol","uri::InvalidUriParts","header::map::Values","header::map::ValueDrain","header::name::InvalidHeaderNameBytes","uri::ErrorKind","header::name::Custom","uri::path::PathAndQuery","header::map::ValueIterMut","response::Builder","header::map::HashValue","uri::InvalidUri","header::map::Entry","uri::scheme::Scheme2","header::value::InvalidHeaderValueBytes","header::name::Repr","header::map::ValueIter","<&T as std::fmt::Debug>","header::value::ToStrError","error::Error"]},"header::map::ValuesMut":{"T":["method::Method","uri::port::Port","header::value::InvalidHeaderValue","response::Builder","header::map::ValueDrain","uri::authority::Authority","uri::scheme::Scheme2","header::name::InvalidHeaderName","uri::InvalidUriParts","error::Error","header::map::ValueIter","uri::path::PathAndQuery","header::map::IntoIter","header::map::Values","version::Version","request::Parts","uri::builder::Builder","header::name::Custom","header::map::IterMut","header::value::ToStrError","response::Response","header::map::Keys","header::map::Link","header::name::Repr","header::map::Drain","uri::Parts","header::map::Links","header::map::GetAll","extensions::Extensions","header::name::HeaderName","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderNameBytes","header::map::Cursor","header::map::ValuesMut","status::StatusCode","header::map::HeaderMap","header::name::MaybeLower","header::map::ValueIterMut","byte_str::ByteStr","uri::Uri","uri::ErrorKind","header::map::OccupiedEntry","header::map::HashValue","uri::scheme::Scheme","uri::InvalidUri","response::Parts","header::map::Iter","<*const T as std::fmt::Debug>","header::map::ExtraValue","header::name::HdrName","uri::InvalidUriBytes","uri::scheme::Protocol","header::map::VacantEntry","request::Request","header::value::HeaderValue","request::Builder","header::map::Entry","error::Never","method::InvalidMethod","header::name::StandardHeader","header::map::Bucket","status::InvalidStatusCode"]},"header::name::Repr":{"T":["version::Version","std::clone::impls::<impl std::clone::Clone for *const T>","header::name::Custom","byte_str::ByteStr","header::name::StandardHeader","header::name::Repr"]},"request::Request":{"T":["request::Builder","request::Request","uri::builder::Builder","uri::Parts","uri::Uri","version::Version","extensions::Extensions","status::StatusCode","header::map::HeaderMap","method::Method","response::Builder","response::Response"]},"response::Response":{"T":["request::Builder","version::Version","response::Response","response::Builder","method::Method","uri::Uri","header::map::HeaderMap","extensions::Extensions","status::StatusCode","request::Request","uri::Parts","uri::builder::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["<&mut T as std::convert::AsRef<U>>","method::Method","header::value::HeaderValue","uri::scheme::Scheme","uri::authority::Authority","uri::port::Port"]},"uri::scheme::Scheme2":{"T":["method::Method","header::name::StandardHeader","uri::scheme::Scheme","header::map::Link","header::map::Links","header::map::Cursor","header::map::HeaderMap","header::value::HeaderValue","header::map::HashValue","std::boxed::Box<byte_str::ByteStr>","uri::scheme::Protocol","version::Version","uri::scheme::Scheme2","header::name::Custom","uri::path::PathAndQuery","header::map::ExtraValue","uri::Uri","header::name::HeaderName","uri::authority::Authority","status::StatusCode","header::name::Repr","header::name::MaybeLower","byte_str::ByteStr","header::map::Bucket","std::clone::impls::<impl std::clone::Clone for *const T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValueIter<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::ValueIter<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::ValueIter<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::ValueIter<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::ValueIterMut<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueIterMut<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","convert::HttpTryFrom","std::clone::Clone"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueIterMut<'a, T> as std::fmt::Debug>::fmt":{"T":["request::Parts","header::map::Link","header::map::HashValue","uri::scheme::Scheme","header::map::Keys","header::map::Cursor","header::map::GetAll","uri::scheme::Protocol","header::map::ValueIterMut","uri::authority::Authority","uri::InvalidUriParts","response::Parts","header::name::HdrName","byte_str::ByteStr","request::Builder","header::name::HeaderName","header::map::Entry","header::map::ValuesMut","header::value::InvalidHeaderValueBytes","method::Method","header::name::Repr","uri::Parts","uri::path::PathAndQuery","header::map::ExtraValue","header::value::HeaderValue","header::map::ValueDrain","error::Never","uri::InvalidUri","uri::Uri","header::map::Values","request::Request","header::name::InvalidHeaderName","header::value::ToStrError","header::map::HeaderMap","status::StatusCode","<*mut T as std::fmt::Debug>","header::map::Drain","header::map::OccupiedEntry","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","header::map::IterMut","uri::ErrorKind","error::Error","header::map::ValueIter","header::map::Bucket","header::map::VacantEntry","extensions::Extensions","header::map::Links","header::map::Iter","header::name::MaybeLower","header::value::InvalidHeaderValue","response::Builder","header::map::IntoIter","response::Response","header::name::StandardHeader","uri::scheme::Scheme2","uri::port::Port","uri::builder::Builder","status::InvalidStatusCode","method::InvalidMethod","version::Version","header::name::Custom"]},"header::map::Bucket":{"T":["header::name::Repr","<&mut T as std::fmt::Debug>","method::Method","uri::path::PathAndQuery","header::value::HeaderValue","header::map::Bucket","header::map::Link","header::map::Cursor","byte_str::ByteStr","uri::Uri","header::name::StandardHeader","uri::scheme::Protocol","header::name::Custom","uri::scheme::Scheme","version::Version","uri::scheme::Scheme2","uri::authority::Authority","header::name::HeaderName","header::map::HeaderMap","status::StatusCode","header::map::HashValue","header::map::Links","header::name::MaybeLower","header::map::ExtraValue"]},"header::map::Drain":{"T":["<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain","header::map::Drain","header::map::IterMut"]},"header::map::Entry":{"T":["request::Request","header::map::Drain","header::name::StandardHeader","version::Version","header::value::InvalidHeaderValueBytes","uri::InvalidUriParts","header::map::HeaderMap","header::map::ValueDrain","header::map::ValuesMut","header::name::HdrName","response::Response","header::map::Values","header::map::IterMut","header::name::HeaderName","header::value::ToStrError","error::Error","request::Builder","<&mut T as std::fmt::Debug>","header::map::Iter","header::map::ValueIterMut","uri::scheme::Scheme2","header::name::Repr","uri::scheme::Scheme","uri::Uri","header::map::Links","status::InvalidStatusCode","header::map::HashValue","uri::scheme::Protocol","uri::InvalidUri","uri::port::Port","header::map::OccupiedEntry","header::value::InvalidHeaderValue","header::map::ExtraValue","request::Parts","header::name::MaybeLower","uri::builder::Builder","header::map::Cursor","method::InvalidMethod","uri::Parts","uri::InvalidUriBytes","byte_str::ByteStr","header::map::IntoIter","header::map::GetAll","extensions::Extensions","method::Method","uri::path::PathAndQuery","status::StatusCode","header::map::Link","header::name::Custom","response::Builder","response::Parts","header::name::InvalidHeaderNameBytes","header::map::VacantEntry","header::map::Keys","header::map::Entry","uri::authority::Authority","header::name::InvalidHeaderName","uri::ErrorKind","header::map::Bucket","header::value::HeaderValue","header::map::ValueIter","error::Never"]},"header::map::ExtraValue":{"T":["header::map::Link","header::name::StandardHeader","header::name::Custom","header::map::ExtraValue","version::Version","byte_str::ByteStr","uri::scheme::Protocol","status::StatusCode","method::Method","uri::path::PathAndQuery","header::map::Cursor","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::Links","header::name::HeaderName","uri::scheme::Scheme2","header::name::MaybeLower","header::map::HeaderMap","header::value::HeaderValue","header::map::Bucket","header::name::Repr","header::map::HashValue","uri::Uri","uri::authority::Authority","uri::scheme::Scheme"]},"header::map::GetAll":{"T":["byte_str::ByteStr","header::map::HashValue","header::map::Cursor","header::name::StandardHeader","header::map::GetAll","header::map::HeaderMap","header::name::Custom","uri::ErrorKind","header::map::Link","header::name::Repr","std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>","version::Version"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::net::Ipv6Addr","std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["response::Response","header::map::HeaderMap","header::name::StandardHeader","response::Builder","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","status::StatusCode","header::value::InvalidHeaderValue","header::map::Entry","header::map::Link","header::map::Drain","header::name::MaybeLower","request::Builder","uri::port::Port","uri::Uri","header::name::InvalidHeaderName","uri::scheme::Scheme","uri::scheme::Protocol","status::InvalidStatusCode","header::map::HashValue","header::value::HeaderValue","header::map::Bucket","request::Parts","byte_str::ByteStr","header::map::ExtraValue","uri::ErrorKind","header::name::InvalidHeaderNameBytes","header::name::Repr","uri::scheme::Scheme2","response::Parts","header::map::ValueIter","uri::builder::Builder","version::Version","uri::path::PathAndQuery","header::map::ValueDrain","uri::InvalidUriBytes","header::map::ValuesMut","error::Error","header::map::VacantEntry","header::value::ToStrError","uri::authority::Authority","<&mut T as std::fmt::Debug>","uri::InvalidUri","header::name::Custom","header::value::InvalidHeaderValueBytes","header::map::GetAll","header::map::IntoIter","method::InvalidMethod","header::map::Cursor","header::map::Values","method::Method","header::name::HeaderName","header::map::Links","header::map::Keys","uri::InvalidUriParts","header::name::HdrName","request::Request","extensions::Extensions","header::map::OccupiedEntry","error::Never","uri::Parts"]},"header::map::Iter":{"T":["header::map::Iter","header::map::ValueIterMut","<*mut T as std::marker::Sync>","header::map::Drain","header::map::ValueDrain","header::map::IterMut"]},"header::map::IterMut":{"T":["<*mut T as std::fmt::Debug>","header::map::IterMut","header::map::Iter","header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::Keys":{"T":["header::map::Values","header::map::IterMut","header::map::VacantEntry","<*const T as std::fmt::Debug>","header::map::Keys","status::StatusCode","header::map::ExtraValue","response::Parts","header::map::IntoIter","header::name::Custom","request::Builder","header::map::HeaderMap","header::value::ToStrError","version::Version","header::map::Drain","header::map::ValueDrain","header::map::GetAll","method::Method","uri::Parts","uri::scheme::Protocol","header::map::ValueIterMut","method::InvalidMethod","status::InvalidStatusCode","uri::InvalidUriParts","header::map::OccupiedEntry","request::Parts","uri::InvalidUri","header::map::ValueIter","header::name::Repr","uri::scheme::Scheme","uri::scheme::Scheme2","header::map::Iter","byte_str::ByteStr","error::Error","header::map::ValuesMut","header::name::HeaderName","uri::Uri","header::name::InvalidHeaderName","header::name::InvalidHeaderNameBytes","header::map::Entry","response::Builder","uri::path::PathAndQuery","uri::port::Port","uri::InvalidUriBytes","header::map::Bucket","header::value::HeaderValue","header::value::InvalidHeaderValue","uri::authority::Authority","uri::builder::Builder","header::value::InvalidHeaderValueBytes","uri::ErrorKind","header::map::Links","extensions::Extensions","header::name::HdrName","request::Request","response::Response","header::name::StandardHeader","header::name::MaybeLower","header::map::Link","header::map::HashValue","error::Never","header::map::Cursor"]},"header::map::OccupiedEntry":{"T":["response::Builder","request::Request","header::map::Links","header::map::Cursor","uri::InvalidUri","uri::InvalidUriBytes","status::StatusCode","header::name::InvalidHeaderName","header::name::Custom","header::map::IntoIter","uri::builder::Builder","header::name::InvalidHeaderNameBytes","header::map::VacantEntry","uri::scheme::Scheme2","error::Error","response::Parts","header::name::MaybeLower","header::value::HeaderValue","uri::port::Port","header::map::IterMut","method::InvalidMethod","uri::scheme::Protocol","header::map::Values","header::map::ExtraValue","error::Never","uri::ErrorKind","header::map::HashValue","extensions::Extensions","header::map::GetAll","header::map::Entry","header::map::ValueIter","uri::Parts","header::map::ValuesMut","header::map::Keys","<&T as std::fmt::Debug>","header::name::HeaderName","uri::scheme::Scheme","header::value::ToStrError","header::map::ValueIterMut","header::name::Repr","header::name::HdrName","method::Method","header::map::OccupiedEntry","uri::InvalidUriParts","uri::path::PathAndQuery","uri::Uri","request::Parts","header::map::Link","uri::authority::Authority","header::map::ValueDrain","response::Response","status::InvalidStatusCode","header::map::Drain","header::name::StandardHeader","header::map::Bucket","header::value::InvalidHeaderValue","header::map::Iter","version::Version","header::map::HeaderMap","header::value::InvalidHeaderValueBytes","request::Builder","byte_str::ByteStr"]},"header::map::VacantEntry":{"T":["uri::Parts","request::Builder","header::value::InvalidHeaderValue","header::map::Link","uri::port::Port","header::map::Keys","header::map::Bucket","header::map::ValueDrain","header::value::InvalidHeaderValueBytes","header::map::IterMut","uri::Uri","header::value::HeaderValue","header::map::Links","header::map::HeaderMap","response::Response","header::name::HdrName","header::name::Repr","uri::InvalidUriParts","header::value::ToStrError","status::StatusCode","extensions::Extensions","header::name::MaybeLower","header::map::Cursor","response::Builder","header::map::Iter","header::map::Values","header::map::VacantEntry","header::map::Entry","header::name::StandardHeader","response::Parts","header::map::OccupiedEntry","request::Request","uri::ErrorKind","uri::path::PathAndQuery","version::Version","uri::authority::Authority","error::Never","header::name::HeaderName","uri::InvalidUri","header::map::ValueIterMut","header::map::Drain","byte_str::ByteStr","method::InvalidMethod","request::Parts","method::Method","error::Error","header::map::ValueIter","uri::scheme::Protocol","uri::scheme::Scheme","header::map::IntoIter","header::name::InvalidHeaderNameBytes","header::map::ValuesMut","header::name::InvalidHeaderName","status::InvalidStatusCode","header::map::ExtraValue","<*const T as std::fmt::Debug>","header::name::Custom","uri::scheme::Scheme2","header::map::HashValue","header::map::GetAll","uri::builder::Builder","uri::InvalidUriBytes"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","header::map::Drain","header::map::Iter","header::map::IterMut","header::map::ValueDrain","<*mut T as std::marker::Send>"]},"header::map::ValueIter":{"T":["header::map::IterMut","header::value::InvalidHeaderValueBytes","header::map::Values","request::Builder","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","error::Error","response::Parts","header::name::Repr","header::map::Entry","uri::InvalidUriParts","header::map::ValueIterMut","header::map::Link","header::map::ValuesMut","uri::port::Port","uri::path::PathAndQuery","uri::Uri","uri::scheme::Scheme","header::name::StandardHeader","uri::ErrorKind","header::name::InvalidHeaderName","header::map::Bucket","uri::authority::Authority","header::value::HeaderValue","method::Method","status::InvalidStatusCode","version::Version","header::value::ToStrError","uri::scheme::Scheme2","header::map::Keys","header::map::HashValue","uri::Parts","header::map::GetAll","header::map::Iter","header::map::Cursor","header::map::ValueDrain","uri::InvalidUri","request::Request","uri::InvalidUriBytes","status::StatusCode","header::map::Drain","response::Builder","header::map::OccupiedEntry","header::map::Links","byte_str::ByteStr","header::name::HdrName","error::Never","extensions::Extensions","header::map::HeaderMap","<&mut T as std::fmt::Debug>","header::map::VacantEntry","request::Parts","header::map::ValueIter","uri::builder::Builder","header::name::Custom","method::InvalidMethod","header::name::MaybeLower","header::map::IntoIter","header::value::InvalidHeaderValue","header::name::HeaderName","response::Response","header::map::ExtraValue"]},"header::map::ValueIterMut":{"T":["header::map::ValueDrain","header::map::Drain","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","<*const T as std::fmt::Debug>"]},"header::map::Values":{"T":["request::Parts","method::InvalidMethod","header::map::IntoIter","uri::InvalidUri","version::Version","uri::InvalidUriBytes","header::value::ToStrError","header::map::Cursor","status::StatusCode","status::InvalidStatusCode","header::name::Repr","response::Parts","method::Method","header::map::Iter","header::map::IterMut","header::map::Values","uri::Uri","extensions::Extensions","header::name::Custom","header::map::HashValue","error::Error","header::value::InvalidHeaderValue","header::value::HeaderValue","header::name::MaybeLower","uri::ErrorKind","response::Response","header::name::HdrName","header::name::InvalidHeaderNameBytes","header::name::StandardHeader","header::map::Bucket","uri::Parts","header::map::Drain","header::map::ValuesMut","header::name::InvalidHeaderName","header::map::ValueIter","header::map::Entry","uri::scheme::Protocol","uri::authority::Authority","request::Builder","uri::scheme::Scheme","header::map::OccupiedEntry","uri::InvalidUriParts","uri::port::Port","header::map::Links","header::value::InvalidHeaderValueBytes","request::Request","header::map::HeaderMap","uri::scheme::Scheme2","header::map::ExtraValue","header::map::Link","header::map::GetAll","header::map::ValueIterMut","header::name::HeaderName","response::Builder","header::map::VacantEntry","byte_str::ByteStr","header::map::Keys","uri::builder::Builder","error::Never","<&mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::ValueDrain"]},"header::map::ValuesMut":{"T":["header::map::Values","header::name::MaybeLower","header::map::Iter","uri::builder::Builder","uri::path::PathAndQuery","header::name::StandardHeader","byte_str::ByteStr","request::Builder","response::Response","header::map::Entry","uri::port::Port","status::StatusCode","header::value::HeaderValue","uri::authority::Authority","header::map::ValueIter","<*mut T as std::fmt::Debug>","uri::scheme::Scheme2","header::map::HeaderMap","error::Error","header::map::HashValue","method::Method","header::map::ValueIterMut","uri::InvalidUriParts","header::map::ExtraValue","header::name::InvalidHeaderName","header::name::Custom","header::value::InvalidHeaderValueBytes","header::value::InvalidHeaderValue","header::map::Cursor","header::map::ValuesMut","uri::Uri","response::Builder","header::map::IterMut","header::map::VacantEntry","header::map::GetAll","uri::Parts","response::Parts","uri::InvalidUri","header::value::ToStrError","request::Parts","header::name::HeaderName","method::InvalidMethod","uri::ErrorKind","header::map::Links","header::name::Repr","header::map::IntoIter","uri::InvalidUriBytes","header::map::Link","header::map::Drain","header::map::ValueDrain","header::map::Keys","extensions::Extensions","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","header::map::OccupiedEntry","header::name::HdrName","status::InvalidStatusCode","error::Never","uri::scheme::Scheme","request::Request","header::map::Bucket","version::Version"]},"header::name::Repr":{"T":["version::Version","header::name::Repr","byte_str::ByteStr","header::name::Custom","header::name::StandardHeader","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>"]},"request::Request":{"T":["header::map::HeaderMap","response::Response","uri::builder::Builder","uri::Uri","status::StatusCode","request::Request","method::Method","uri::Parts","response::Builder","extensions::Extensions","request::Builder","version::Version"]},"response::Response":{"T":["status::StatusCode","request::Builder","response::Builder","extensions::Extensions","method::Method","uri::Parts","header::map::HeaderMap","request::Request","version::Version","response::Response","uri::builder::Builder","uri::Uri"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["header::value::HeaderValue","method::Method","uri::port::Port","uri::authority::Authority","uri::scheme::Scheme","<&T as std::fmt::Debug>"]},"uri::scheme::Scheme2":{"T":["std::boxed::Box<byte_str::ByteStr>","header::map::HeaderMap","header::map::Cursor","header::name::MaybeLower","std::clone::impls::<impl std::clone::Clone for *mut T>","header::name::StandardHeader","header::name::Custom","method::Method","version::Version","header::name::Repr","header::map::HashValue","header::map::Bucket","uri::path::PathAndQuery","uri::scheme::Protocol","header::value::HeaderValue","uri::scheme::Scheme2","uri::authority::Authority","status::StatusCode","byte_str::ByteStr","header::map::ExtraValue","uri::scheme::Scheme","header::map::Links","header::map::Link","uri::Uri","header::name::HeaderName"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValueIterMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::ValueIterMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::ValueIterMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::ValueIterMut<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::ValueDrain<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueDrain<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","convert::HttpTryFrom","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized","std::marker::Send"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::ValueDrain<'a, T> as std::fmt::Debug>::fmt":{"T":["header::map::HeaderMap","header::name::Repr","header::map::IterMut","header::value::InvalidHeaderValueBytes","uri::port::Port","header::map::ValueIterMut","header::value::ToStrError","byte_str::ByteStr","header::map::Cursor","header::name::HdrName","response::Response","uri::InvalidUri","uri::builder::Builder","uri::Parts","header::name::InvalidHeaderName","header::map::ValueIter","header::map::Links","header::name::MaybeLower","status::InvalidStatusCode","status::StatusCode","uri::Uri","request::Builder","uri::scheme::Scheme","response::Parts","method::InvalidMethod","header::map::Iter","header::map::Drain","header::value::InvalidHeaderValue","uri::scheme::Scheme2","header::map::ValuesMut","header::map::Values","uri::InvalidUriBytes","header::map::IntoIter","header::name::StandardHeader","uri::scheme::Protocol","uri::InvalidUriParts","header::map::GetAll","<&mut T as std::fmt::Debug>","request::Parts","header::name::HeaderName","header::name::InvalidHeaderNameBytes","uri::path::PathAndQuery","header::map::Link","response::Builder","extensions::Extensions","header::name::Custom","error::Never","uri::ErrorKind","header::map::VacantEntry","header::value::HeaderValue","uri::authority::Authority","error::Error","header::map::ExtraValue","header::map::OccupiedEntry","<&T as std::fmt::Debug>","header::map::ValueDrain","method::Method","version::Version","header::map::HashValue","header::map::Entry","header::map::Bucket","header::map::Keys","request::Request"]},"header::map::Bucket":{"T":["uri::authority::Authority","header::map::Cursor","method::Method","header::map::Bucket","header::map::HashValue","uri::scheme::Scheme","status::StatusCode","header::map::ExtraValue","header::name::Repr","uri::Uri","uri::scheme::Protocol","header::map::Link","header::name::StandardHeader","header::name::MaybeLower","header::name::Custom","uri::path::PathAndQuery","header::name::HeaderName","<*const T as std::fmt::Debug>","header::map::HeaderMap","version::Version","header::value::HeaderValue","header::map::Links","byte_str::ByteStr","uri::scheme::Scheme2"]},"header::map::Drain":{"T":["<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain","header::map::IterMut","header::map::Iter"]},"header::map::Entry":{"T":["header::map::Links","uri::ErrorKind","uri::InvalidUriParts","header::name::InvalidHeaderNameBytes","version::Version","request::Request","header::name::Repr","error::Never","request::Parts","uri::path::PathAndQuery","uri::builder::Builder","header::map::GetAll","header::value::HeaderValue","method::Method","header::name::MaybeLower","uri::port::Port","uri::scheme::Protocol","method::InvalidMethod","header::name::HeaderName","header::value::ToStrError","uri::scheme::Scheme","header::value::InvalidHeaderValue","header::map::ValueDrain","header::name::StandardHeader","extensions::Extensions","<&T as std::fmt::Debug>","header::map::Keys","status::InvalidStatusCode","response::Response","header::name::Custom","uri::Uri","header::map::HashValue","header::map::Link","header::map::ValueIter","header::map::Entry","status::StatusCode","header::map::IntoIter","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","response::Parts","header::map::Values","header::map::HeaderMap","response::Builder","byte_str::ByteStr","request::Builder","header::map::Drain","header::name::HdrName","error::Error","uri::Parts","header::map::ExtraValue","header::map::Iter","header::map::VacantEntry","uri::authority::Authority","uri::InvalidUriBytes","header::map::ValueIterMut","uri::scheme::Scheme2","header::map::Bucket","header::map::IterMut","uri::InvalidUri","header::map::ValuesMut","header::map::Cursor","header::map::OccupiedEntry"]},"header::map::ExtraValue":{"T":["uri::scheme::Scheme2","header::value::HeaderValue","uri::scheme::Protocol","header::name::Custom","uri::scheme::Scheme","header::name::StandardHeader","byte_str::ByteStr","header::map::Cursor","header::map::Link","method::Method","version::Version","header::map::ExtraValue","uri::path::PathAndQuery","<*const T as std::fmt::Debug>","uri::Uri","status::StatusCode","header::name::MaybeLower","header::name::HeaderName","header::map::Bucket","header::name::Repr","header::map::HashValue","header::map::HeaderMap","uri::authority::Authority","header::map::Links"]},"header::map::GetAll":{"T":["header::map::HashValue","header::name::Repr","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","byte_str::ByteStr","uri::ErrorKind","header::name::Custom","header::map::Link","header::map::Cursor","header::name::StandardHeader","header::map::HeaderMap","version::Version","header::map::GetAll"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::net::Ipv4Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["extensions::Extensions","status::StatusCode","uri::ErrorKind","uri::builder::Builder","request::Parts","header::name::Custom","uri::Parts","response::Parts","uri::Uri","header::name::InvalidHeaderName","error::Never","header::map::Bucket","version::Version","header::map::Keys","header::map::Cursor","uri::InvalidUriParts","header::map::ValueIter","uri::authority::Authority","uri::InvalidUriBytes","error::Error","header::map::IntoIter","header::map::HeaderMap","header::map::Links","header::map::Entry","header::name::InvalidHeaderNameBytes","header::map::ValueIterMut","header::map::HashValue","request::Builder","<&T as std::fmt::Debug>","header::value::HeaderValue","uri::InvalidUri","header::map::Link","uri::scheme::Scheme2","uri::scheme::Scheme","header::map::VacantEntry","header::name::Repr","header::map::ExtraValue","response::Response","uri::port::Port","header::map::Values","method::Method","status::InvalidStatusCode","header::name::HeaderName","header::value::InvalidHeaderValueBytes","header::map::ValueDrain","header::name::HdrName","header::map::Drain","method::InvalidMethod","byte_str::ByteStr","header::name::StandardHeader","header::value::ToStrError","header::map::GetAll","request::Request","header::map::Iter","header::map::IterMut","response::Builder","header::value::InvalidHeaderValue","header::map::OccupiedEntry","header::map::ValuesMut","header::name::MaybeLower","uri::path::PathAndQuery","uri::scheme::Protocol"]},"header::map::Iter":{"T":["header::map::Iter","header::map::Drain","<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::ValueDrain","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::Drain","header::map::Iter","header::map::ValueIterMut"]},"header::map::Keys":{"T":["header::map::Iter","byte_str::ByteStr","header::map::ValueIterMut","request::Request","header::name::Repr","<&T as std::fmt::Debug>","header::name::Custom","status::StatusCode","error::Error","request::Parts","header::value::HeaderValue","error::Never","header::map::Links","uri::port::Port","header::name::InvalidHeaderName","header::map::ValuesMut","header::map::IterMut","uri::path::PathAndQuery","uri::scheme::Scheme","header::map::IntoIter","header::map::Keys","uri::Parts","extensions::Extensions","uri::builder::Builder","method::Method","header::map::VacantEntry","request::Builder","header::name::InvalidHeaderNameBytes","header::map::Drain","header::map::Link","header::name::HdrName","uri::ErrorKind","uri::InvalidUriBytes","header::map::Entry","header::map::HeaderMap","header::map::Bucket","header::map::Cursor","header::map::OccupiedEntry","response::Parts","header::value::ToStrError","header::map::ExtraValue","uri::InvalidUri","header::name::StandardHeader","uri::InvalidUriParts","header::map::ValueDrain","uri::Uri","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme2","version::Version","header::name::MaybeLower","header::map::HashValue","uri::authority::Authority","header::name::HeaderName","header::map::GetAll","response::Response","status::InvalidStatusCode","header::value::InvalidHeaderValue","method::InvalidMethod","header::map::ValueIter","uri::scheme::Protocol","response::Builder","header::map::Values"]},"header::map::OccupiedEntry":{"T":["header::map::HeaderMap","header::name::HdrName","header::value::ToStrError","header::name::InvalidHeaderName","header::map::HashValue","request::Parts","header::map::Cursor","header::value::InvalidHeaderValue","<&mut T as std::fmt::Debug>","uri::InvalidUriBytes","version::Version","uri::InvalidUri","response::Response","header::map::Bucket","method::Method","uri::ErrorKind","header::map::ValueIterMut","uri::authority::Authority","header::map::Drain","uri::builder::Builder","error::Error","header::name::InvalidHeaderNameBytes","header::map::Values","header::map::VacantEntry","header::map::Iter","header::value::HeaderValue","header::map::GetAll","uri::Parts","response::Builder","header::name::Repr","header::name::Custom","response::Parts","header::name::StandardHeader","error::Never","uri::scheme::Scheme","header::name::HeaderName","header::map::Keys","header::map::IterMut","header::map::ExtraValue","header::map::OccupiedEntry","header::map::ValueDrain","uri::scheme::Scheme2","status::StatusCode","status::InvalidStatusCode","header::map::Entry","uri::path::PathAndQuery","header::map::ValuesMut","header::name::MaybeLower","uri::InvalidUriParts","uri::Uri","header::map::ValueIter","request::Request","header::map::Link","extensions::Extensions","uri::scheme::Protocol","header::value::InvalidHeaderValueBytes","uri::port::Port","byte_str::ByteStr","method::InvalidMethod","header::map::Links","header::map::IntoIter","request::Builder"]},"header::map::VacantEntry":{"T":["uri::InvalidUriParts","header::value::ToStrError","method::Method","header::map::IterMut","header::name::InvalidHeaderName","uri::path::PathAndQuery","header::name::InvalidHeaderNameBytes","header::map::Cursor","header::name::HdrName","header::map::Entry","header::map::ValueDrain","error::Never","header::map::Link","header::map::HeaderMap","header::value::InvalidHeaderValue","header::map::IntoIter","header::name::HeaderName","header::map::Iter","uri::authority::Authority","header::name::Custom","uri::Parts","status::InvalidStatusCode","error::Error","header::name::StandardHeader","uri::port::Port","header::map::ValuesMut","extensions::Extensions","header::value::InvalidHeaderValueBytes","<*const T as std::fmt::Debug>","request::Parts","header::map::Drain","status::StatusCode","uri::builder::Builder","request::Builder","uri::InvalidUriBytes","header::map::VacantEntry","uri::scheme::Scheme2","header::map::HashValue","response::Builder","header::map::OccupiedEntry","response::Response","uri::Uri","header::name::MaybeLower","version::Version","header::map::Bucket","header::map::ValueIter","header::map::GetAll","method::InvalidMethod","uri::ErrorKind","header::value::HeaderValue","byte_str::ByteStr","header::map::ValueIterMut","uri::InvalidUri","header::map::Keys","request::Request","header::map::Values","uri::scheme::Scheme","response::Parts","header::name::Repr","header::map::Links","uri::scheme::Protocol","header::map::ExtraValue"]},"header::map::ValueDrain":{"T":["header::map::IterMut","header::map::Iter","<*mut T as std::marker::Send>","header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain"]},"header::map::ValueIter":{"T":["uri::InvalidUriBytes","byte_str::ByteStr","header::map::GetAll","header::name::InvalidHeaderName","error::Never","header::map::Bucket","request::Parts","header::map::Drain","request::Request","header::value::InvalidHeaderValueBytes","header::map::Cursor","header::map::IntoIter","uri::port::Port","response::Response","header::map::Links","header::map::ExtraValue","header::map::Keys","header::map::OccupiedEntry","response::Builder","uri::InvalidUriParts","header::map::VacantEntry","uri::InvalidUri","header::map::HeaderMap","uri::scheme::Protocol","uri::Uri","header::map::Entry","uri::scheme::Scheme","header::map::ValuesMut","header::map::ValueIter","header::map::Values","<*mut T as std::fmt::Debug>","header::value::InvalidHeaderValue","header::name::Repr","header::name::HdrName","status::InvalidStatusCode","header::map::Link","response::Parts","status::StatusCode","header::name::MaybeLower","uri::authority::Authority","header::map::HashValue","header::value::HeaderValue","method::Method","header::name::InvalidHeaderNameBytes","request::Builder","version::Version","uri::ErrorKind","header::name::Custom","extensions::Extensions","uri::path::PathAndQuery","header::map::Iter","uri::Parts","header::value::ToStrError","uri::scheme::Scheme2","header::name::StandardHeader","header::map::ValueDrain","header::name::HeaderName","header::map::ValueIterMut","method::InvalidMethod","uri::builder::Builder","error::Error","header::map::IterMut"]},"header::map::ValueIterMut":{"T":["header::map::ValueDrain","<*const T as std::marker::Sync>","header::map::IterMut","header::map::Iter","header::map::Drain","header::map::ValueIterMut"]},"header::map::Values":{"T":["request::Builder","header::map::IterMut","header::map::HashValue","uri::Parts","header::name::Custom","header::map::GetAll","header::name::HeaderName","header::map::Keys","header::map::ValueIterMut","error::Error","header::map::Entry","header::map::ValueDrain","header::map::Cursor","header::map::Iter","uri::scheme::Protocol","header::map::ValuesMut","header::map::ValueIter","response::Parts","uri::builder::Builder","request::Request","header::map::IntoIter","byte_str::ByteStr","header::value::HeaderValue","request::Parts","uri::Uri","header::name::Repr","uri::scheme::Scheme2","uri::ErrorKind","uri::InvalidUriParts","header::map::Bucket","uri::port::Port","status::InvalidStatusCode","method::InvalidMethod","uri::scheme::Scheme","status::StatusCode","response::Response","header::name::InvalidHeaderName","header::map::Links","uri::InvalidUriBytes","header::map::Link","header::name::MaybeLower","header::value::InvalidHeaderValue","error::Never","header::map::Drain","header::map::HeaderMap","header::map::Values","header::name::StandardHeader","uri::authority::Authority","header::value::ToStrError","uri::InvalidUri","uri::path::PathAndQuery","header::name::InvalidHeaderNameBytes","method::Method","header::map::OccupiedEntry","extensions::Extensions","response::Builder","version::Version","<&mut T as std::fmt::Debug>","header::map::VacantEntry","header::value::InvalidHeaderValueBytes","header::name::HdrName","header::map::ExtraValue"]},"header::map::ValuesMut":{"T":["uri::scheme::Scheme","header::map::Iter","header::map::ValueIter","header::name::HeaderName","header::value::HeaderValue","response::Builder","header::map::HashValue","header::value::ToStrError","header::name::InvalidHeaderNameBytes","header::map::GetAll","uri::scheme::Protocol","method::InvalidMethod","header::map::VacantEntry","header::map::Values","header::map::Bucket","request::Request","header::map::Cursor","header::map::OccupiedEntry","header::name::MaybeLower","header::map::Links","error::Error","header::name::HdrName","extensions::Extensions","request::Builder","uri::Parts","<&T as std::fmt::Debug>","header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain","byte_str::ByteStr","header::value::InvalidHeaderValue","header::map::ValuesMut","header::map::IntoIter","method::Method","header::map::ExtraValue","header::map::Link","header::name::InvalidHeaderName","header::name::Custom","request::Parts","uri::path::PathAndQuery","version::Version","uri::authority::Authority","uri::builder::Builder","uri::InvalidUriBytes","uri::scheme::Scheme2","header::name::Repr","uri::Uri","status::StatusCode","header::name::StandardHeader","response::Parts","header::map::Entry","response::Response","header::map::IterMut","uri::port::Port","error::Never","header::map::HeaderMap","header::map::Keys","uri::InvalidUri","uri::InvalidUriParts","status::InvalidStatusCode","header::value::InvalidHeaderValueBytes","uri::ErrorKind"]},"header::name::Repr":{"T":["header::name::StandardHeader","header::name::Custom","byte_str::ByteStr","header::name::Repr","std::hash::impls::<impl std::hash::Hash for *const T>","version::Version"]},"request::Request":{"T":["version::Version","response::Builder","request::Request","header::map::HeaderMap","method::Method","uri::Parts","uri::Uri","status::StatusCode","response::Response","request::Builder","uri::builder::Builder","extensions::Extensions"]},"response::Response":{"T":["header::map::HeaderMap","uri::Uri","method::Method","extensions::Extensions","uri::builder::Builder","response::Response","uri::Parts","request::Request","response::Builder","status::StatusCode","version::Version","request::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["header::value::HeaderValue","<&T as std::convert::AsRef<U>>","uri::authority::Authority","uri::port::Port","method::Method","uri::scheme::Scheme"]},"uri::scheme::Scheme2":{"T":["header::map::Cursor","header::name::MaybeLower","header::map::HeaderMap","header::name::Custom","status::StatusCode","byte_str::ByteStr","version::Version","header::map::Links","header::name::StandardHeader","header::map::ExtraValue","uri::scheme::Scheme","header::map::Bucket","header::map::Link","header::name::HeaderName","std::clone::impls::<impl std::clone::Clone for *const T>","header::map::HashValue","header::value::HeaderValue","header::name::Repr","uri::scheme::Scheme2","std::boxed::Box<byte_str::ByteStr>","uri::path::PathAndQuery","uri::scheme::Protocol","uri::Uri","method::Method","uri::authority::Authority"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValueDrain<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::ValueDrain<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::ValueDrain<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::ValueDrain<'a, T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Cursor as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Cursor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Cursor as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Cursor as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Cursor>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Cursor as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Cursor
+p0.clone();
+<header::map::Cursor as std::clone::Clone>::clone(p0);
+crate::<header::map::Cursor as std::clone::Clone>::clone(p0);
+<header::map::Cursor>::clone(p0);
-----------------
src/header/map.rs <header::map::Cursor as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Cursor
+p0.assert_receiver_is_total_eq();
+<header::map::Cursor as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::map::Cursor as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::map::Cursor>::assert_receiver_is_total_eq(p0);
-----------------
src/header/map.rs <header::map::Cursor as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Cursor
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::Cursor
+p0.eq(p1);
+<header::map::Cursor as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::map::Cursor as std::cmp::PartialEq>::eq(p0, p1);
+<header::map::Cursor>::eq(p0, p1);
-----------------
src/header/map.rs <header::map::Pos as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Pos
+p0.clone();
+<header::map::Pos as std::clone::Clone>::clone(p0);
+crate::<header::map::Pos as std::clone::Clone>::clone(p0);
+<header::map::Pos>::clone(p0);
-----------------
src/header/map.rs <header::map::HashValue as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HashValue
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::HashValue as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::HashValue as std::fmt::Debug>::fmt(p0, p1);
+<header::map::HashValue>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::HashValue as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HashValue
+p0.clone();
+<header::map::HashValue as std::clone::Clone>::clone(p0);
+crate::<header::map::HashValue as std::clone::Clone>::clone(p0);
+<header::map::HashValue>::clone(p0);
-----------------
src/header/map.rs <header::map::HashValue as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HashValue
+p0.assert_receiver_is_total_eq();
+<header::map::HashValue as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::map::HashValue as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::map::HashValue>::assert_receiver_is_total_eq(p0);
-----------------
src/header/map.rs <header::map::HashValue as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HashValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HashValue
+p0.eq(p1);
+<header::map::HashValue as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::map::HashValue as std::cmp::PartialEq>::eq(p0, p1);
+<header::map::HashValue>::eq(p0, p1);
-----------------
src/header/map.rs <header::map::Bucket<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Bucket<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::clone::Clone","convert::HttpTryFrom","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::hash::Hash","std::fmt::Debug"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::map::Bucket<T> as std::fmt::Debug>::fmt":{"T":["response::Parts","header::map::IntoIter","uri::path::PathAndQuery","header::map::IterMut","header::value::HeaderValue","header::name::HeaderName","uri::ErrorKind","uri::builder::Builder","uri::InvalidUriParts","header::map::Cursor","uri::port::Port","header::name::MaybeLower","header::value::InvalidHeaderValueBytes","header::map::Values","method::Method","header::name::Repr","header::map::ExtraValue","header::map::HashValue","uri::scheme::Protocol","header::map::ValueIter","header::map::ValuesMut","byte_str::ByteStr","header::value::InvalidHeaderValue","uri::authority::Authority","uri::Parts","<*const T as std::fmt::Debug>","uri::Uri","header::map::ValueDrain","header::name::HdrName","header::map::Iter","header::map::Drain","error::Error","header::map::ValueIterMut","request::Request","header::map::VacantEntry","error::Never","header::map::HeaderMap","header::name::InvalidHeaderNameBytes","extensions::Extensions","uri::InvalidUri","response::Response","uri::scheme::Scheme","response::Builder","request::Builder","method::InvalidMethod","<&T as std::fmt::Debug>","header::map::Bucket","header::map::GetAll","version::Version","header::value::ToStrError","header::map::Keys","header::name::StandardHeader","header::map::Entry","header::map::Link","header::map::Links","header::map::OccupiedEntry","header::name::InvalidHeaderName","header::name::Custom","request::Parts","status::InvalidStatusCode","status::StatusCode","uri::InvalidUriBytes","uri::scheme::Scheme2"]},"header::map::Bucket":{"T":["header::name::Custom","uri::authority::Authority","uri::scheme::Scheme2","<*const T as std::fmt::Debug>","header::name::StandardHeader","header::name::MaybeLower","uri::scheme::Scheme","header::map::HeaderMap","header::name::Repr","header::name::HeaderName","uri::Uri","header::map::HashValue","uri::scheme::Protocol","header::map::Cursor","uri::path::PathAndQuery","byte_str::ByteStr","status::StatusCode","header::map::ExtraValue","header::map::Link","version::Version","method::Method","header::map::Bucket","header::value::HeaderValue","header::map::Links"]},"header::map::Drain":{"T":["header::map::Iter","header::map::IterMut","header::map::ValueIterMut","header::map::Drain","<*mut T as std::marker::Send>","header::map::ValueDrain"]},"header::map::Entry":{"T":["<&T as std::fmt::Debug>","header::name::Repr","uri::scheme::Protocol","error::Never","header::map::Link","header::value::HeaderValue","header::map::ValueIter","status::InvalidStatusCode","uri::Parts","version::Version","header::map::Links","response::Builder","header::map::Entry","response::Response","byte_str::ByteStr","uri::scheme::Scheme","uri::Uri","header::map::Bucket","header::map::ValuesMut","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","uri::builder::Builder","uri::ErrorKind","header::name::StandardHeader","header::map::Drain","header::map::ValueDrain","header::name::InvalidHeaderName","request::Parts","request::Request","header::map::OccupiedEntry","uri::scheme::Scheme2","header::name::HdrName","response::Parts","extensions::Extensions","header::map::ValueIterMut","header::value::InvalidHeaderValue","header::map::IterMut","uri::path::PathAndQuery","uri::InvalidUriParts","header::map::Cursor","header::value::InvalidHeaderValueBytes","error::Error","header::map::GetAll","method::Method","header::map::HeaderMap","header::value::ToStrError","header::map::Keys","header::map::IntoIter","uri::InvalidUri","method::InvalidMethod","header::map::VacantEntry","header::map::Values","header::map::Iter","header::name::Custom","header::map::HashValue","uri::port::Port","uri::InvalidUriBytes","status::StatusCode","header::map::ExtraValue","header::name::HeaderName","uri::authority::Authority","request::Builder"]},"header::map::ExtraValue":{"T":["header::name::StandardHeader","header::map::HeaderMap","header::name::Custom","header::map::Link","uri::authority::Authority","uri::scheme::Protocol","header::map::Cursor","uri::path::PathAndQuery","uri::scheme::Scheme","header::name::Repr","version::Version","method::Method","header::value::HeaderValue","header::name::MaybeLower","header::name::HeaderName","header::map::HashValue","header::map::ExtraValue","uri::Uri","<&mut T as std::fmt::Debug>","uri::scheme::Scheme2","header::map::Links","status::StatusCode","byte_str::ByteStr","header::map::Bucket"]},"header::map::GetAll":{"T":["header::map::GetAll","byte_str::ByteStr","header::map::HashValue","header::name::StandardHeader","header::map::Link","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::Repr","header::name::Custom","version::Version","header::map::HeaderMap","uri::ErrorKind","header::map::Cursor"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv6Addr"]},"header::map::IntoIter":{"T":["uri::ErrorKind","response::Builder","status::InvalidStatusCode","header::map::Drain","response::Response","header::name::StandardHeader","header::map::IterMut","header::map::VacantEntry","header::name::Custom","header::value::InvalidHeaderValueBytes","header::value::ToStrError","uri::scheme::Scheme2","uri::Parts","uri::builder::Builder","<*mut T as std::fmt::Debug>","header::map::Links","method::InvalidMethod","header::map::Entry","header::name::HeaderName","uri::path::PathAndQuery","header::name::InvalidHeaderNameBytes","header::map::HeaderMap","header::name::MaybeLower","header::map::OccupiedEntry","header::map::Keys","uri::InvalidUriParts","method::Method","error::Never","header::map::ValueDrain","request::Builder","uri::InvalidUri","version::Version","header::name::InvalidHeaderName","uri::authority::Authority","request::Parts","header::map::ValueIterMut","header::map::Cursor","header::map::HashValue","header::map::ExtraValue","uri::Uri","request::Request","header::map::IntoIter","header::map::Link","header::value::HeaderValue","status::StatusCode","header::map::Bucket","header::map::ValuesMut","header::value::InvalidHeaderValue","header::map::Iter","uri::scheme::Scheme","header::name::HdrName","uri::InvalidUriBytes","header::map::Values","header::map::ValueIter","error::Error","byte_str::ByteStr","header::name::Repr","response::Parts","extensions::Extensions","header::map::GetAll","uri::scheme::Protocol","uri::port::Port"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueDrain","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::Drain","header::map::Iter","header::map::ValueIterMut","header::map::IterMut","<*const T as std::marker::Sync>","header::map::ValueDrain"]},"header::map::Keys":{"T":["header::value::ToStrError","uri::InvalidUriBytes","header::map::Link","header::map::ValueIterMut","uri::scheme::Protocol","header::map::Links","header::value::HeaderValue","header::name::InvalidHeaderNameBytes","header::map::ValueIter","uri::path::PathAndQuery","byte_str::ByteStr","status::InvalidStatusCode","uri::Parts","header::map::Values","header::map::HeaderMap","header::map::GetAll","header::map::HashValue","response::Response","request::Request","header::map::OccupiedEntry","header::name::MaybeLower","response::Builder","error::Never","status::StatusCode","header::map::VacantEntry","header::map::Entry","uri::InvalidUriParts","header::name::Custom","uri::builder::Builder","error::Error","header::map::Bucket","request::Builder","header::map::ValuesMut","header::name::HeaderName","<*const T as std::fmt::Debug>","uri::InvalidUri","header::name::HdrName","method::Method","header::map::ValueDrain","request::Parts","header::map::ExtraValue","uri::scheme::Scheme","header::value::InvalidHeaderValue","header::map::IntoIter","extensions::Extensions","header::name::InvalidHeaderName","response::Parts","header::map::Drain","header::name::Repr","method::InvalidMethod","header::name::StandardHeader","uri::authority::Authority","header::map::Cursor","header::map::Iter","header::map::Keys","version::Version","uri::port::Port","uri::scheme::Scheme2","uri::ErrorKind","uri::Uri","header::value::InvalidHeaderValueBytes","header::map::IterMut"]},"header::map::OccupiedEntry":{"T":["header::map::ValuesMut","uri::scheme::Protocol","header::map::Keys","uri::InvalidUriBytes","uri::InvalidUriParts","header::value::HeaderValue","byte_str::ByteStr","header::name::Custom","method::Method","header::map::Values","status::StatusCode","header::map::GetAll","uri::port::Port","uri::authority::Authority","header::value::InvalidHeaderValueBytes","header::map::IntoIter","uri::Parts","header::name::InvalidHeaderNameBytes","request::Request","header::name::MaybeLower","extensions::Extensions","error::Never","uri::scheme::Scheme2","header::name::HeaderName","header::map::HashValue","version::Version","uri::InvalidUri","header::map::ValueIter","<*const T as std::fmt::Debug>","header::map::Link","header::name::InvalidHeaderName","response::Builder","header::map::Entry","status::InvalidStatusCode","header::name::StandardHeader","method::InvalidMethod","header::map::ValueIterMut","uri::builder::Builder","error::Error","header::map::Links","header::map::HeaderMap","header::map::Cursor","uri::path::PathAndQuery","header::value::ToStrError","request::Parts","header::name::Repr","uri::Uri","header::value::InvalidHeaderValue","header::map::ExtraValue","response::Parts","response::Response","header::map::IterMut","header::map::Bucket","header::map::Iter","header::map::OccupiedEntry","request::Builder","header::map::ValueDrain","uri::scheme::Scheme","header::map::Drain","uri::ErrorKind","header::name::HdrName","header::map::VacantEntry"]},"header::map::VacantEntry":{"T":["response::Response","header::name::HdrName","uri::scheme::Protocol","uri::InvalidUri","uri::ErrorKind","header::map::ValueIter","header::map::IterMut","header::map::Links","header::name::InvalidHeaderName","error::Error","method::InvalidMethod","request::Parts","header::map::ExtraValue","request::Request","header::map::OccupiedEntry","uri::port::Port","header::map::ValuesMut","header::name::MaybeLower","header::map::HeaderMap","header::map::Cursor","header::value::InvalidHeaderValue","header::map::ValueIterMut","header::map::IntoIter","status::StatusCode","error::Never","byte_str::ByteStr","header::map::Link","uri::path::PathAndQuery","header::map::Keys","header::map::ValueDrain","status::InvalidStatusCode","method::Method","header::map::Values","header::name::StandardHeader","uri::authority::Authority","header::name::HeaderName","header::map::VacantEntry","extensions::Extensions","header::map::Entry","uri::builder::Builder","uri::Parts","header::name::Repr","<&mut T as std::fmt::Debug>","uri::InvalidUriParts","header::name::Custom","response::Parts","header::value::ToStrError","header::value::HeaderValue","uri::Uri","version::Version","uri::scheme::Scheme","response::Builder","uri::scheme::Scheme2","header::map::GetAll","request::Builder","uri::InvalidUriBytes","header::map::Bucket","header::map::Drain","header::value::InvalidHeaderValueBytes","header::map::HashValue","header::map::Iter","header::name::InvalidHeaderNameBytes"]},"header::map::ValueDrain":{"T":["header::map::Drain","header::map::ValueIterMut","header::map::Iter","header::map::IterMut","<*const T as std::marker::Sync>","header::map::ValueDrain"]},"header::map::ValueIter":{"T":["header::value::InvalidHeaderValue","header::name::Custom","header::value::InvalidHeaderValueBytes","header::map::Iter","header::name::InvalidHeaderName","uri::port::Port","header::map::ValueDrain","header::map::IterMut","header::map::Link","uri::Parts","header::map::HashValue","uri::path::PathAndQuery","header::name::Repr","uri::scheme::Scheme","header::map::VacantEntry","request::Request","header::map::ValuesMut","header::name::HdrName","method::InvalidMethod","uri::InvalidUriParts","header::map::ValueIterMut","header::map::Drain","<&T as std::fmt::Debug>","header::map::GetAll","uri::InvalidUriBytes","status::InvalidStatusCode","header::map::IntoIter","header::name::StandardHeader","byte_str::ByteStr","header::map::ValueIter","error::Never","header::map::Cursor","uri::InvalidUri","status::StatusCode","response::Parts","header::map::Keys","request::Builder","uri::ErrorKind","method::Method","response::Response","header::map::OccupiedEntry","version::Version","header::map::ExtraValue","response::Builder","header::name::HeaderName","header::map::Values","error::Error","request::Parts","extensions::Extensions","header::map::Links","header::map::Entry","header::value::HeaderValue","header::map::Bucket","uri::scheme::Scheme2","header::value::ToStrError","header::name::MaybeLower","uri::builder::Builder","header::map::HeaderMap","uri::authority::Authority","uri::Uri","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes"]},"header::map::ValueIterMut":{"T":["header::map::Iter","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","<*const T as std::fmt::Debug>","header::map::ValueDrain"]},"header::map::Values":{"T":["uri::InvalidUriParts","uri::ErrorKind","header::map::Links","header::map::HeaderMap","request::Builder","header::map::HashValue","uri::InvalidUriBytes","method::Method","header::map::ValueIter","uri::port::Port","header::name::Repr","header::map::ValuesMut","header::map::ValueDrain","header::map::Link","uri::scheme::Protocol","uri::InvalidUri","header::map::Bucket","header::value::ToStrError","header::name::StandardHeader","header::map::GetAll","uri::Parts","uri::scheme::Scheme2","header::map::Values","method::InvalidMethod","header::map::Drain","request::Parts","header::map::Iter","header::name::MaybeLower","header::map::ValueIterMut","byte_str::ByteStr","response::Builder","response::Parts","header::name::InvalidHeaderNameBytes","header::map::IntoIter","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme","header::name::HdrName","uri::builder::Builder","response::Response","header::map::IterMut","header::map::OccupiedEntry","header::map::VacantEntry","header::value::HeaderValue","status::StatusCode","error::Never","header::name::HeaderName","extensions::Extensions","uri::Uri","header::map::Entry","header::name::Custom","<&mut T as std::fmt::Debug>","error::Error","header::value::InvalidHeaderValue","version::Version","status::InvalidStatusCode","header::map::ExtraValue","request::Request","header::name::InvalidHeaderName","header::map::Keys","uri::authority::Authority","uri::path::PathAndQuery","header::map::Cursor"]},"header::map::ValuesMut":{"T":["header::map::IterMut","header::map::Entry","header::map::Cursor","header::map::Iter","response::Response","request::Builder","uri::InvalidUri","header::map::GetAll","status::StatusCode","header::map::HeaderMap","uri::Parts","header::map::ValueIter","<*mut T as std::fmt::Debug>","header::map::Link","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","uri::builder::Builder","header::name::HeaderName","header::name::StandardHeader","header::value::HeaderValue","uri::scheme::Protocol","status::InvalidStatusCode","uri::port::Port","header::map::Keys","header::map::Drain","byte_str::ByteStr","request::Parts","header::name::MaybeLower","method::Method","error::Error","request::Request","header::map::HashValue","method::InvalidMethod","header::name::InvalidHeaderName","header::map::OccupiedEntry","version::Version","uri::ErrorKind","uri::Uri","header::map::ValueIterMut","header::name::Repr","uri::scheme::Scheme2","header::map::Values","uri::path::PathAndQuery","extensions::Extensions","response::Builder","error::Never","header::name::HdrName","response::Parts","header::map::VacantEntry","header::map::ValueDrain","header::value::InvalidHeaderValueBytes","header::value::ToStrError","header::map::Bucket","uri::authority::Authority","header::map::ValuesMut","header::name::Custom","uri::InvalidUriBytes","uri::InvalidUriParts","header::value::InvalidHeaderValue","uri::scheme::Scheme","header::map::Links","header::map::IntoIter"]},"header::name::Repr":{"T":["header::name::StandardHeader","version::Version","byte_str::ByteStr","header::name::Repr","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::name::Custom"]},"request::Request":{"T":["uri::builder::Builder","uri::Uri","status::StatusCode","extensions::Extensions","header::map::HeaderMap","request::Builder","method::Method","version::Version","request::Request","response::Response","response::Builder","uri::Parts"]},"response::Response":{"T":["request::Request","status::StatusCode","request::Builder","uri::Uri","uri::builder::Builder","uri::Parts","response::Response","extensions::Extensions","method::Method","version::Version","response::Builder","header::map::HeaderMap"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["method::Method","uri::port::Port","uri::scheme::Scheme","header::value::HeaderValue","<&T as std::convert::AsRef<U>>","uri::authority::Authority"]},"uri::scheme::Scheme2":{"T":["header::map::Link","header::map::HashValue","status::StatusCode","header::map::Bucket","version::Version","header::name::StandardHeader","uri::scheme::Protocol","header::map::Cursor","byte_str::ByteStr","<&mut T as std::fmt::Debug>","header::name::MaybeLower","header::map::Links","uri::scheme::Scheme","uri::Uri","header::name::Custom","header::map::HeaderMap","method::Method","header::value::HeaderValue","std::boxed::Box<byte_str::ByteStr>","uri::scheme::Scheme2","header::name::HeaderName","uri::path::PathAndQuery","header::name::Repr","uri::authority::Authority","header::map::ExtraValue"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Bucket<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Bucket<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Bucket<T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Bucket<T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Bucket<T> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::Bucket<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::HeaderMap":{"T":["std::marker::Sized","convert::HttpTryFrom","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"header::name::Repr":{"T":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::Bucket<T> as std::clone::Clone>::clone":{"T":["header::name::MaybeLower","header::map::Pos","version::Http","header::name::Repr","header::map::HashValue","uri::authority::Authority","header::map::Links","uri::scheme::Scheme2","uri::scheme::Protocol","header::map::Cursor","method::Inner","header::map::Danger","uri::Uri","header::value::HeaderValue","status::StatusCode","header::name::StandardHeader","uri::path::PathAndQuery","version::Version","header::map::Bucket","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::ExtraValue","header::map::Link","method::Method","uri::scheme::Scheme","header::name::HeaderName","header::map::HeaderMap","byte_str::ByteStr","header::name::Custom"]},"header::map::Bucket":{"T":["uri::path::PathAndQuery","header::name::StandardHeader","uri::scheme::Scheme","method::Method","header::map::Bucket","byte_str::ByteStr","uri::authority::Authority","header::value::HeaderValue","header::name::Custom","std::clone::impls::<impl std::clone::Clone for &mut T>","header::name::MaybeLower","version::Version","header::map::Links","uri::Uri","header::map::ExtraValue","header::name::Repr","header::map::HeaderMap","header::map::Link","header::map::Cursor","status::StatusCode","uri::scheme::Scheme2","header::map::HashValue","uri::scheme::Protocol","header::name::HeaderName"]},"header::map::ExtraValue":{"T":["header::map::Links","uri::Uri","header::map::HeaderMap","header::map::Bucket","method::Method","header::name::Custom","uri::scheme::Protocol","header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::Link","uri::scheme::Scheme","version::Version","header::name::HeaderName","uri::authority::Authority","uri::path::PathAndQuery","uri::scheme::Scheme2","header::map::HashValue","header::name::MaybeLower","status::StatusCode","header::map::ExtraValue","header::map::Cursor","header::name::Repr","header::value::HeaderValue","byte_str::ByteStr"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv4Addr"]},"header::name::Repr":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","byte_str::ByteStr","header::name::StandardHeader","version::Version","header::name::Custom","header::name::Repr"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::scheme::Scheme2":{"T":["header::value::HeaderValue","header::name::Repr","uri::scheme::Protocol","uri::scheme::Scheme","byte_str::ByteStr","header::name::Custom","header::map::HashValue","uri::authority::Authority","header::map::Link","status::StatusCode","header::name::StandardHeader","method::Method","header::map::ExtraValue","uri::path::PathAndQuery","header::map::Bucket","uri::Uri","uri::scheme::Scheme2","std::boxed::Box<byte_str::ByteStr>","version::Version","header::name::MaybeLower","header::map::Links","<&mut T as std::fmt::Debug>","header::map::HeaderMap","header::map::Cursor","header::name::HeaderName"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Bucket<T>
+p0.clone();
+<header::map::Bucket<T> as std::clone::Clone>::clone(p0);
+crate::<header::map::Bucket<T> as std::clone::Clone>::clone(p0);
+<header::map::Bucket<T>>::clone(p0);
-----------------
src/header/map.rs <header::map::Links as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Links
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Links as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Links as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Links>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Links as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Links
+p0.clone();
+<header::map::Links as std::clone::Clone>::clone(p0);
+crate::<header::map::Links as std::clone::Clone>::clone(p0);
+<header::map::Links>::clone(p0);
-----------------
src/header/map.rs <header::map::ExtraValue<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<header::map::ExtraValue<T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send","std::fmt::Debug"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","convert::HttpTryFrom"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<header::map::ExtraValue<T> as std::fmt::Debug>::fmt":{"T":["header::value::InvalidHeaderValue","header::name::InvalidHeaderName","header::map::ValuesMut","<&T as std::fmt::Debug>","header::map::Links","header::map::Bucket","header::name::HeaderName","header::name::StandardHeader","version::Version","header::value::HeaderValue","status::InvalidStatusCode","header::name::MaybeLower","header::map::OccupiedEntry","header::value::InvalidHeaderValueBytes","byte_str::ByteStr","status::StatusCode","header::name::HdrName","header::map::Cursor","uri::InvalidUriBytes","header::map::IntoIter","response::Parts","request::Parts","header::map::ValueDrain","header::map::Drain","header::map::Values","response::Response","error::Error","header::map::Iter","request::Builder","uri::Parts","header::map::IterMut","uri::Uri","header::map::ValueIterMut","error::Never","method::InvalidMethod","extensions::Extensions","method::Method","header::map::HashValue","header::map::VacantEntry","uri::InvalidUri","uri::scheme::Protocol","header::map::Keys","header::map::Entry","uri::InvalidUriParts","header::map::ExtraValue","header::value::ToStrError","uri::port::Port","uri::authority::Authority","uri::scheme::Scheme2","request::Request","uri::builder::Builder","header::map::ValueIter","header::map::GetAll","header::map::HeaderMap","uri::path::PathAndQuery","header::name::Custom","uri::ErrorKind","header::name::Repr","header::map::Link","uri::scheme::Scheme","response::Builder","header::name::InvalidHeaderNameBytes"]},"header::map::Bucket":{"T":["uri::Uri","header::name::MaybeLower","version::Version","header::map::ExtraValue","uri::path::PathAndQuery","header::map::Links","header::map::Bucket","uri::scheme::Scheme2","uri::scheme::Protocol","header::value::HeaderValue","uri::scheme::Scheme","header::map::HashValue","header::name::StandardHeader","status::StatusCode","std::clone::impls::<impl std::clone::Clone for &mut T>","byte_str::ByteStr","header::map::Cursor","header::map::HeaderMap","uri::authority::Authority","header::map::Link","header::name::HeaderName","header::name::Repr","method::Method","header::name::Custom"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","header::map::Drain","<*mut T as std::fmt::Debug>"]},"header::map::Entry":{"T":["request::Request","header::value::HeaderValue","header::map::ValuesMut","response::Parts","uri::scheme::Scheme","header::map::Drain","uri::authority::Authority","uri::ErrorKind","error::Error","header::map::HeaderMap","header::map::GetAll","header::value::ToStrError","header::map::IterMut","error::Never","method::InvalidMethod","header::value::InvalidHeaderValue","header::map::Values","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","header::map::HashValue","header::name::HdrName","header::name::MaybeLower","request::Builder","request::Parts","status::InvalidStatusCode","uri::path::PathAndQuery","uri::Parts","header::map::Links","response::Response","uri::port::Port","header::name::HeaderName","uri::Uri","uri::InvalidUri","header::map::ValueIterMut","header::map::ExtraValue","byte_str::ByteStr","<*mut T as std::fmt::Debug>","method::Method","version::Version","header::map::Iter","header::name::InvalidHeaderNameBytes","header::name::InvalidHeaderName","status::StatusCode","uri::scheme::Protocol","header::name::Repr","header::map::ValueDrain","header::map::OccupiedEntry","header::map::Bucket","uri::scheme::Scheme2","uri::InvalidUriParts","header::map::Keys","header::map::IntoIter","header::name::Custom","extensions::Extensions","header::map::Cursor","header::name::StandardHeader","response::Builder","uri::InvalidUriBytes","uri::builder::Builder","header::map::ValueIter","header::map::Link","header::map::Entry"]},"header::map::ExtraValue":{"T":["header::name::Repr","uri::scheme::Protocol","<&mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::name::Custom","header::map::Link","header::map::ExtraValue","header::map::HashValue","header::name::MaybeLower","method::Method","byte_str::ByteStr","header::value::HeaderValue","uri::authority::Authority","uri::scheme::Scheme2","uri::scheme::Scheme","header::name::HeaderName","header::name::StandardHeader","header::map::HeaderMap","header::map::Bucket","version::Version","uri::Uri","status::StatusCode","header::map::Links","header::map::Cursor"]},"header::map::GetAll":{"T":["header::map::Link","byte_str::ByteStr","version::Version","header::name::Repr","header::map::Cursor","header::map::HashValue","header::map::HeaderMap","header::name::Custom","header::map::GetAll","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::StandardHeader","uri::ErrorKind"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["header::value::InvalidHeaderValueBytes","request::Request","header::map::HeaderMap","uri::Parts","uri::Uri","header::map::ExtraValue","status::InvalidStatusCode","<*mut T as std::fmt::Debug>","header::map::GetAll","header::name::InvalidHeaderNameBytes","header::map::Values","header::map::IterMut","header::name::StandardHeader","uri::ErrorKind","header::name::Custom","header::name::InvalidHeaderName","header::map::ValuesMut","method::Method","header::map::ValueDrain","uri::scheme::Scheme2","header::name::HeaderName","version::Version","header::map::Iter","header::name::MaybeLower","uri::scheme::Scheme","header::map::VacantEntry","response::Response","header::map::Keys","header::map::OccupiedEntry","uri::path::PathAndQuery","uri::authority::Authority","header::value::HeaderValue","header::map::Cursor","response::Builder","header::map::Bucket","header::name::Repr","request::Parts","extensions::Extensions","uri::InvalidUriParts","byte_str::ByteStr","uri::port::Port","header::map::ValueIterMut","header::map::Entry","header::map::HashValue","header::map::Link","uri::scheme::Protocol","error::Error","response::Parts","header::value::ToStrError","header::map::Links","method::InvalidMethod","header::map::IntoIter","uri::builder::Builder","status::StatusCode","header::map::Drain","uri::InvalidUri","header::value::InvalidHeaderValue","header::map::ValueIter","header::name::HdrName","request::Builder","error::Never","uri::InvalidUriBytes"]},"header::map::Iter":{"T":["header::map::Drain","header::map::ValueIterMut","<*mut T as std::fmt::Debug>","header::map::Iter","header::map::ValueDrain","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::IterMut","<*const T as std::marker::Send>","header::map::ValueIterMut","header::map::Iter","header::map::Drain","header::map::ValueDrain"]},"header::map::Keys":{"T":["error::Error","uri::Parts","header::map::OccupiedEntry","header::value::ToStrError","header::map::HashValue","header::map::Entry","byte_str::ByteStr","<&T as std::fmt::Debug>","uri::scheme::Protocol","extensions::Extensions","request::Builder","header::map::Values","uri::InvalidUriParts","status::InvalidStatusCode","uri::InvalidUri","method::InvalidMethod","header::map::ExtraValue","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","uri::scheme::Scheme","uri::authority::Authority","status::StatusCode","header::map::ValueDrain","header::name::HeaderName","uri::builder::Builder","header::name::InvalidHeaderName","header::map::IntoIter","uri::Uri","header::map::Iter","response::Builder","header::map::Bucket","response::Parts","request::Request","header::name::Custom","header::map::GetAll","header::map::ValueIter","header::map::ValueIterMut","header::value::InvalidHeaderValueBytes","request::Parts","header::map::Links","header::map::Cursor","header::name::Repr","version::Version","uri::port::Port","header::map::Drain","method::Method","uri::ErrorKind","header::name::HdrName","header::map::VacantEntry","header::name::StandardHeader","error::Never","header::value::HeaderValue","header::map::Link","header::map::HeaderMap","header::value::InvalidHeaderValue","header::map::Keys","uri::scheme::Scheme2","header::map::ValuesMut","uri::path::PathAndQuery","header::map::IterMut","response::Response"]},"header::map::OccupiedEntry":{"T":["header::name::HdrName","version::Version","header::value::ToStrError","error::Error","uri::scheme::Scheme","extensions::Extensions","method::Method","uri::InvalidUriBytes","header::map::Drain","header::value::InvalidHeaderValue","uri::path::PathAndQuery","request::Builder","header::map::GetAll","header::value::InvalidHeaderValueBytes","response::Response","method::InvalidMethod","header::map::Cursor","request::Request","header::map::ValuesMut","uri::scheme::Protocol","header::name::Custom","header::name::InvalidHeaderName","uri::Parts","byte_str::ByteStr","response::Builder","header::map::ValueIter","header::map::Link","uri::scheme::Scheme2","header::map::ExtraValue","status::StatusCode","uri::InvalidUriParts","uri::InvalidUri","header::map::OccupiedEntry","error::Never","header::map::ValueDrain","response::Parts","header::map::Iter","header::map::Bucket","request::Parts","header::name::InvalidHeaderNameBytes","header::name::StandardHeader","uri::port::Port","uri::builder::Builder","header::map::Links","header::map::Entry","header::map::HashValue","header::map::Values","header::name::HeaderName","header::name::MaybeLower","header::map::ValueIterMut","header::map::VacantEntry","uri::authority::Authority","header::name::Repr","<&mut T as std::fmt::Debug>","header::value::HeaderValue","status::InvalidStatusCode","header::map::IterMut","uri::ErrorKind","header::map::Keys","header::map::IntoIter","uri::Uri","header::map::HeaderMap"]},"header::map::VacantEntry":{"T":["uri::Parts","uri::scheme::Protocol","header::name::InvalidHeaderName","error::Error","header::name::MaybeLower","header::map::GetAll","header::name::Repr","header::map::IterMut","header::map::Bucket","uri::ErrorKind","header::map::Links","header::value::HeaderValue","uri::scheme::Scheme","status::InvalidStatusCode","header::value::ToStrError","uri::InvalidUri","request::Builder","header::map::Link","header::map::Iter","header::name::HdrName","method::InvalidMethod","header::name::InvalidHeaderNameBytes","request::Request","header::map::HashValue","header::value::InvalidHeaderValueBytes","header::map::ValuesMut","header::map::Cursor","extensions::Extensions","uri::authority::Authority","header::map::Keys","header::name::HeaderName","uri::path::PathAndQuery","uri::scheme::Scheme2","uri::InvalidUriBytes","uri::InvalidUriParts","header::map::ValueIterMut","header::name::StandardHeader","error::Never","header::map::OccupiedEntry","header::value::InvalidHeaderValue","header::map::VacantEntry","header::map::HeaderMap","header::map::IntoIter","header::name::Custom","header::map::Drain","byte_str::ByteStr","status::StatusCode","header::map::ExtraValue","version::Version","response::Builder","header::map::ValueIter","uri::port::Port","uri::Uri","method::Method","response::Response","request::Parts","header::map::Values","header::map::Entry","<&T as std::fmt::Debug>","header::map::ValueDrain","response::Parts","uri::builder::Builder"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","<*mut T as std::marker::Send>","header::map::IterMut","header::map::ValueDrain","header::map::Iter","header::map::Drain"]},"header::map::ValueIter":{"T":["<&T as std::fmt::Debug>","version::Version","header::map::ValueDrain","header::map::Keys","error::Error","request::Parts","header::name::InvalidHeaderNameBytes","method::InvalidMethod","header::map::OccupiedEntry","header::map::Values","header::value::HeaderValue","header::map::IntoIter","header::map::IterMut","header::map::Iter","header::map::HashValue","method::Method","header::map::Cursor","header::name::StandardHeader","header::map::ValueIter","header::map::Link","header::map::HeaderMap","header::name::MaybeLower","uri::builder::Builder","uri::ErrorKind","response::Parts","extensions::Extensions","uri::authority::Authority","header::name::InvalidHeaderName","header::map::Drain","uri::path::PathAndQuery","header::map::ExtraValue","header::value::InvalidHeaderValueBytes","header::map::ValueIterMut","header::map::Links","header::value::ToStrError","request::Request","byte_str::ByteStr","request::Builder","status::StatusCode","uri::scheme::Scheme","uri::port::Port","header::value::InvalidHeaderValue","header::map::ValuesMut","status::InvalidStatusCode","response::Builder","header::map::Bucket","error::Never","uri::Uri","uri::Parts","header::map::VacantEntry","header::name::HeaderName","uri::InvalidUriBytes","header::map::Entry","header::map::GetAll","uri::scheme::Scheme2","uri::InvalidUriParts","header::name::Repr","header::name::HdrName","header::name::Custom","response::Response","uri::InvalidUri","uri::scheme::Protocol"]},"header::map::ValueIterMut":{"T":["<*mut T as std::fmt::Debug>","header::map::ValueDrain","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::Iter"]},"header::map::Values":{"T":["uri::InvalidUri","<&mut T as std::fmt::Debug>","byte_str::ByteStr","request::Builder","response::Parts","header::map::Keys","error::Never","header::map::IntoIter","uri::Parts","header::value::HeaderValue","uri::ErrorKind","header::map::ValueDrain","header::map::GetAll","header::name::Custom","header::map::IterMut","request::Request","header::map::OccupiedEntry","uri::port::Port","header::name::InvalidHeaderNameBytes","header::map::ValueIterMut","header::map::Iter","error::Error","header::map::VacantEntry","uri::authority::Authority","header::map::Cursor","uri::builder::Builder","header::name::MaybeLower","method::InvalidMethod","header::value::InvalidHeaderValue","header::map::HeaderMap","uri::scheme::Scheme","header::name::HeaderName","uri::InvalidUriParts","header::map::Bucket","header::map::Link","header::value::InvalidHeaderValueBytes","response::Response","response::Builder","header::value::ToStrError","status::StatusCode","uri::InvalidUriBytes","header::map::ValueIter","header::name::HdrName","header::map::ExtraValue","uri::scheme::Scheme2","uri::path::PathAndQuery","status::InvalidStatusCode","header::map::Values","version::Version","uri::Uri","header::map::Drain","header::map::Entry","header::name::Repr","header::name::StandardHeader","header::map::ValuesMut","header::map::Links","header::name::InvalidHeaderName","method::Method","extensions::Extensions","uri::scheme::Protocol","header::map::HashValue","request::Parts"]},"header::map::ValuesMut":{"T":["header::map::GetAll","<&mut T as std::fmt::Debug>","header::map::OccupiedEntry","header::map::ValueIter","header::name::HdrName","header::map::Drain","header::name::Repr","uri::InvalidUriParts","header::map::ValueDrain","error::Error","uri::path::PathAndQuery","header::value::InvalidHeaderValueBytes","header::map::IntoIter","header::map::ValuesMut","header::map::Values","header::map::ValueIterMut","byte_str::ByteStr","header::name::StandardHeader","header::map::HashValue","header::name::Custom","uri::scheme::Protocol","header::value::HeaderValue","response::Parts","error::Never","uri::scheme::Scheme","response::Response","version::Version","header::map::Iter","uri::InvalidUri","header::map::HeaderMap","header::map::Bucket","header::name::InvalidHeaderName","header::name::HeaderName","header::value::ToStrError","header::map::Cursor","uri::ErrorKind","status::InvalidStatusCode","request::Parts","extensions::Extensions","uri::builder::Builder","request::Builder","header::map::IterMut","header::map::ExtraValue","header::map::Link","request::Request","method::InvalidMethod","header::map::Keys","header::map::Links","uri::port::Port","uri::Parts","header::map::Entry","response::Builder","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","header::value::InvalidHeaderValue","uri::scheme::Scheme2","uri::Uri","uri::authority::Authority","status::StatusCode","header::map::VacantEntry","method::Method"]},"header::name::Repr":{"T":["version::Version","byte_str::ByteStr","header::name::Custom","header::name::Repr","<*mut T as std::fmt::Debug>","header::name::StandardHeader"]},"request::Request":{"T":["uri::builder::Builder","version::Version","response::Response","request::Builder","uri::Uri","status::StatusCode","uri::Parts","request::Request","header::map::HeaderMap","method::Method","extensions::Extensions","response::Builder"]},"response::Response":{"T":["response::Builder","request::Builder","response::Response","extensions::Extensions","uri::Parts","status::StatusCode","header::map::HeaderMap","method::Method","uri::Uri","uri::builder::Builder","request::Request","version::Version"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::port::Port","uri::authority::Authority","method::Method","header::value::HeaderValue","<&mut T as std::convert::AsRef<U>>","uri::scheme::Scheme"]},"uri::scheme::Scheme2":{"T":["uri::path::PathAndQuery","header::name::MaybeLower","header::name::StandardHeader","std::boxed::Box<byte_str::ByteStr>","method::Method","header::map::HeaderMap","header::map::ExtraValue","header::name::Repr","header::name::Custom","header::map::HashValue","header::map::Cursor","uri::Uri","header::map::Link","std::clone::impls::<impl std::clone::Clone for &T>","uri::authority::Authority","status::StatusCode","uri::scheme::Scheme2","uri::scheme::Protocol","uri::scheme::Scheme","header::name::HeaderName","version::Version","header::map::Links","header::map::Bucket","byte_str::ByteStr","header::value::HeaderValue"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ExtraValue<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::ExtraValue<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::ExtraValue<T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::ExtraValue<T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::ExtraValue<T> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::ExtraValue<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","convert::HttpTryFrom","std::clone::Clone"]},"header::name::Repr":{"T":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::hash::Hash","std::clone::Clone","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::ExtraValue<T> as std::clone::Clone>::clone":{"T":["header::name::Repr","header::name::MaybeLower","uri::scheme::Protocol","std::clone::impls::<impl std::clone::Clone for &mut T>","uri::scheme::Scheme","byte_str::ByteStr","version::Version","header::map::HashValue","header::map::Links","header::name::HeaderName","header::map::ExtraValue","header::name::StandardHeader","header::value::HeaderValue","header::map::Danger","uri::authority::Authority","status::StatusCode","header::map::Link","uri::Uri","header::map::Pos","std::clone::impls::<impl std::clone::Clone for *mut T>","method::Inner","uri::scheme::Scheme2","header::map::HeaderMap","header::map::Cursor","uri::path::PathAndQuery","version::Http","header::name::Custom","header::map::Bucket","method::Method"]},"header::map::Bucket":{"T":["header::map::Bucket","header::name::MaybeLower","header::map::Cursor","uri::Uri","header::map::Links","header::map::HeaderMap","method::Method","header::map::ExtraValue","uri::scheme::Protocol","version::Version","header::name::Repr","uri::scheme::Scheme2","header::map::HashValue","byte_str::ByteStr","uri::path::PathAndQuery","<&T as std::fmt::Debug>","uri::scheme::Scheme","uri::authority::Authority","header::map::Link","header::value::HeaderValue","header::name::HeaderName","header::name::StandardHeader","status::StatusCode","header::name::Custom"]},"header::map::ExtraValue":{"T":["uri::scheme::Protocol","<&T as std::fmt::Debug>","status::StatusCode","method::Method","header::map::HeaderMap","header::map::Bucket","uri::authority::Authority","header::map::Link","header::value::HeaderValue","header::map::ExtraValue","version::Version","header::name::Custom","header::name::StandardHeader","uri::scheme::Scheme2","uri::Uri","header::map::Links","header::name::MaybeLower","header::name::Repr","uri::path::PathAndQuery","header::name::HeaderName","uri::scheme::Scheme","header::map::HashValue","header::map::Cursor","byte_str::ByteStr"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::net::Ipv4Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::name::Repr":{"T":["header::name::StandardHeader","byte_str::ByteStr","version::Version","header::name::Custom","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::name::Repr"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::scheme::Scheme2":{"T":["<&T as std::fmt::Debug>","header::map::HeaderMap","header::map::Bucket","header::name::MaybeLower","header::name::HeaderName","header::map::HashValue","header::name::Repr","std::boxed::Box<byte_str::ByteStr>","version::Version","uri::scheme::Scheme2","header::map::Links","status::StatusCode","header::value::HeaderValue","method::Method","uri::Uri","header::name::StandardHeader","uri::scheme::Protocol","header::map::Cursor","uri::path::PathAndQuery","byte_str::ByteStr","uri::scheme::Scheme","header::map::ExtraValue","uri::authority::Authority","header::map::Link","header::name::Custom"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ExtraValue<T>
+p0.clone();
+<header::map::ExtraValue<T> as std::clone::Clone>::clone(p0);
+crate::<header::map::ExtraValue<T> as std::clone::Clone>::clone(p0);
+<header::map::ExtraValue<T>>::clone(p0);
-----------------
src/header/map.rs <header::map::Link as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Link
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::Link as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::Link as std::fmt::Debug>::fmt(p0, p1);
+<header::map::Link>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::Link as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Link
+p0.clone();
+<header::map::Link as std::clone::Clone>::clone(p0);
+crate::<header::map::Link as std::clone::Clone>::clone(p0);
+<header::map::Link>::clone(p0);
-----------------
src/header/map.rs <header::map::Link as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Link
+p0.assert_receiver_is_total_eq();
+<header::map::Link as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::map::Link as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::map::Link>::assert_receiver_is_total_eq(p0);
-----------------
src/header/map.rs <header::map::Link as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Link
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::Link
+p0.eq(p1);
+<header::map::Link as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::map::Link as std::cmp::PartialEq>::eq(p0, p1);
+<header::map::Link>::eq(p0, p1);
-----------------
src/header/map.rs <header::map::Danger as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.clone();
+<header::map::Danger as std::clone::Clone>::clone(p0);
+crate::<header::map::Danger as std::clone::Clone>::clone(p0);
+<header::map::Danger>::clone(p0);
-----------------
src/header/map.rs header::map::HeaderMap::new
deps:{}
candidates:{}
+header::map::HeaderMap::new();
+crate::header::map::HeaderMap::new();
+<header::map::HeaderMap>::new();
-----------------
src/header/map.rs header::map::HeaderMap::<T>::with_capacity
deps:{"header::map::HeaderMap::<T>::with_capacity":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::with_capacity":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
+header::map::HeaderMap::<T>::with_capacity(p0);
+crate::header::map::HeaderMap::<T>::with_capacity(p0);
+<header::map::HeaderMap<T>>::with_capacity(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::len
deps:{"header::map::HeaderMap::<T>::len":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::len":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.len();
+header::map::HeaderMap::<T>::len(p0);
+crate::header::map::HeaderMap::<T>::len(p0);
+<header::map::HeaderMap<T>>::len(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::keys_len
deps:{"header::map::HeaderMap::<T>::keys_len":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::keys_len":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.keys_len();
+header::map::HeaderMap::<T>::keys_len(p0);
+crate::header::map::HeaderMap::<T>::keys_len(p0);
+<header::map::HeaderMap<T>>::keys_len(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::is_empty
deps:{"header::map::HeaderMap::<T>::is_empty":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::is_empty":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.is_empty();
+header::map::HeaderMap::<T>::is_empty(p0);
+crate::header::map::HeaderMap::<T>::is_empty(p0);
+<header::map::HeaderMap<T>>::is_empty(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::clear
deps:{"header::map::HeaderMap::<T>::clear":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::clear":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.clear();
+header::map::HeaderMap::<T>::clear(p0);
+crate::header::map::HeaderMap::<T>::clear(p0);
+<header::map::HeaderMap<T>>::clear(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::capacity
deps:{"header::map::HeaderMap::<T>::capacity":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::capacity":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.capacity();
+header::map::HeaderMap::<T>::capacity(p0);
+crate::header::map::HeaderMap::<T>::capacity(p0);
+<header::map::HeaderMap<T>>::capacity(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::reserve
deps:{"header::map::HeaderMap::<T>::reserve":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::reserve":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
+p0.reserve(p1);
+header::map::HeaderMap::<T>::reserve(p0, p1);
+crate::header::map::HeaderMap::<T>::reserve(p0, p1);
+<header::map::HeaderMap<T>>::reserve(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::get
deps:{"header::map::HeaderMap::<T>::get":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::get":{"K":["header::name::HeaderName","std::string::String"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.get(p1);
+header::map::HeaderMap::<T>::get(p0, p1);
+crate::header::map::HeaderMap::<T>::get(p0, p1);
+<header::map::HeaderMap<T>>::get(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::get2
deps:{"header::map::HeaderMap::<T>::get2":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::get2":{"K":["std::string::String","header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // K
+p0.get2(p1);
+header::map::HeaderMap::<T>::get2(p0, p1);
+crate::header::map::HeaderMap::<T>::get2(p0, p1);
+<header::map::HeaderMap<T>>::get2(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::get_mut
deps:{"header::map::HeaderMap::<T>::get_mut":{"K":["std::marker::Sized","header::map::as_header_name::AsHeaderName"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::get_mut":{"K":["header::name::HeaderName","std::string::String"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.get_mut(p1);
+header::map::HeaderMap::<T>::get_mut(p0, p1);
+crate::header::map::HeaderMap::<T>::get_mut(p0, p1);
+<header::map::HeaderMap<T>>::get_mut(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::get_all
deps:{"header::map::HeaderMap::<T>::get_all":{"K":["std::marker::Sized","header::map::as_header_name::AsHeaderName"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::get_all":{"K":["std::string::String","header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.get_all(p1);
+header::map::HeaderMap::<T>::get_all(p0, p1);
+crate::header::map::HeaderMap::<T>::get_all(p0, p1);
+<header::map::HeaderMap<T>>::get_all(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::contains_key
deps:{"header::map::HeaderMap::<T>::contains_key":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::contains_key":{"K":["header::name::HeaderName","std::string::String"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.contains_key(p1);
+header::map::HeaderMap::<T>::contains_key(p0, p1);
+crate::header::map::HeaderMap::<T>::contains_key(p0, p1);
+<header::map::HeaderMap<T>>::contains_key(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::iter
deps:{"header::map::HeaderMap::<T>::iter":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.iter();
+header::map::HeaderMap::<T>::iter(p0);
+crate::header::map::HeaderMap::<T>::iter(p0);
+<header::map::HeaderMap<T>>::iter(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::iter_mut
deps:{"header::map::HeaderMap::<T>::iter_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::iter_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.iter_mut();
+header::map::HeaderMap::<T>::iter_mut(p0);
+crate::header::map::HeaderMap::<T>::iter_mut(p0);
+<header::map::HeaderMap<T>>::iter_mut(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::keys
deps:{"header::map::HeaderMap::<T>::keys":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::keys":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.keys();
+header::map::HeaderMap::<T>::keys(p0);
+crate::header::map::HeaderMap::<T>::keys(p0);
+<header::map::HeaderMap<T>>::keys(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::values
deps:{"header::map::HeaderMap::<T>::values":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::values":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.values();
+header::map::HeaderMap::<T>::values(p0);
+crate::header::map::HeaderMap::<T>::values(p0);
+<header::map::HeaderMap<T>>::values(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::values_mut
deps:{"header::map::HeaderMap::<T>::values_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::values_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.values_mut();
+header::map::HeaderMap::<T>::values_mut(p0);
+crate::header::map::HeaderMap::<T>::values_mut(p0);
+<header::map::HeaderMap<T>>::values_mut(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::drain
deps:{"header::map::HeaderMap::<T>::drain":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::drain":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.drain();
+header::map::HeaderMap::<T>::drain(p0);
+crate::header::map::HeaderMap::<T>::drain(p0);
+<header::map::HeaderMap<T>>::drain(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::value_iter
deps:{"header::map::HeaderMap::<T>::value_iter":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::value_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
+p0.value_iter(p1);
+header::map::HeaderMap::<T>::value_iter(p0, p1);
+crate::header::map::HeaderMap::<T>::value_iter(p0, p1);
+<header::map::HeaderMap<T>>::value_iter(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::value_iter_mut
deps:{"header::map::HeaderMap::<T>::value_iter_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::value_iter_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
+p0.value_iter_mut(p1);
+header::map::HeaderMap::<T>::value_iter_mut(p0, p1);
+crate::header::map::HeaderMap::<T>::value_iter_mut(p0, p1);
+<header::map::HeaderMap<T>>::value_iter_mut(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::entry
deps:{"header::map::HeaderMap::<T>::entry":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::entry":{"K":["header::name::HeaderName","std::string::String"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.entry(p1);
+header::map::HeaderMap::<T>::entry(p0, p1);
+crate::header::map::HeaderMap::<T>::entry(p0, p1);
+<header::map::HeaderMap<T>>::entry(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::entry2
deps:{"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::cmp::PartialEq","convert::HttpTryFrom","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::HeaderMap::<T>::entry2":{"K":["std::hash::Hash","std::convert::Into","std::marker::Sized"],"T":["std::marker::Sized"],"header::name::HeaderName":["std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::hash::Hash","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["header::name::Repr","version::Version","header::name::StandardHeader","header::map::Cursor","header::map::HashValue","header::map::GetAll","uri::ErrorKind","header::name::Custom","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>","byte_str::ByteStr","header::map::Link","header::map::HeaderMap"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr"]},"header::map::HeaderMap::<T>::entry2":{"K":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"],"header::name::HeaderName":["header::name::StandardHeader","header::map::Cursor","version::Version","header::map::GetAll","uri::ErrorKind","header::name::Repr","header::map::Link","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::map::HeaderMap","header::map::HashValue","header::name::Custom","method::Inner","byte_str::ByteStr","version::Http"]},"header::name::Repr":{"T":["header::name::StandardHeader","version::Version","header::name::Repr","header::name::Custom","<*mut T as std::fmt::Debug>","byte_str::ByteStr"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.entry2(p1);
+header::map::HeaderMap::<T>::entry2(p0, p1);
+crate::header::map::HeaderMap::<T>::entry2(p0, p1);
+<header::map::HeaderMap<T>>::entry2(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert
deps:{"header::map::HeaderMap::<T>::insert":{"K":["header::map::into_header_name::IntoHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::insert":{"K":["header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1, p2);
+header::map::HeaderMap::<T>::insert(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::insert(p0, p1, p2);
+<header::map::HeaderMap<T>>::insert(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert2
deps:{"<*const T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"header::map::HeaderMap::<T>::insert2":{"K":["std::convert::Into","std::marker::Sized","std::hash::Hash"],"T":["std::marker::Sized"],"header::name::HeaderName":["std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::hash::Hash","std::cmp::Eq"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::map::Link","version::Version","header::map::GetAll","header::name::StandardHeader","header::map::HeaderMap","uri::ErrorKind","header::map::Cursor","header::name::Custom","header::map::HashValue","byte_str::ByteStr","header::name::Repr"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::map::HeaderMap::<T>::insert2":{"K":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"],"header::name::HeaderName":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::name::StandardHeader","header::map::GetAll","header::map::HeaderMap","byte_str::ByteStr","uri::ErrorKind","method::Inner","version::Version","version::Http","header::name::Repr","header::map::Cursor","header::map::Link","header::map::HashValue","header::name::Custom"]},"header::name::Repr":{"T":["version::Version","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","header::name::Repr","byte_str::ByteStr","header::name::Custom","header::name::StandardHeader"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert2(p1, p2);
+header::map::HeaderMap::<T>::insert2(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::insert2(p0, p1, p2);
+<header::map::HeaderMap<T>>::insert2(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert_occupied
deps:{"header::map::HeaderMap::<T>::insert_occupied":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::insert_occupied":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert_occupied(p1, p2);
+header::map::HeaderMap::<T>::insert_occupied(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::insert_occupied(p0, p1, p2);
+<header::map::HeaderMap<T>>::insert_occupied(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert_occupied_mult
deps:{"header::map::HeaderMap::<T>::insert_occupied_mult":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::insert_occupied_mult":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert_occupied_mult(p1, p2);
+header::map::HeaderMap::<T>::insert_occupied_mult(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::insert_occupied_mult(p0, p1, p2);
+<header::map::HeaderMap<T>>::insert_occupied_mult(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::append
deps:{"header::map::HeaderMap::<T>::append":{"K":["header::map::into_header_name::IntoHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::append":{"K":["header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1, p2);
+header::map::HeaderMap::<T>::append(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::append(p0, p1, p2);
+<header::map::HeaderMap<T>>::append(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::append2
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::marker::Sized","convert::HttpTryFrom","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"header::map::HeaderMap::<T>::append2":{"K":["std::hash::Hash","std::convert::Into","std::marker::Sized"],"T":["std::marker::Sized"],"header::name::HeaderName":["std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::hash::Hash","std::cmp::Eq"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>","header::map::HashValue","uri::ErrorKind","header::map::Cursor","version::Version","header::name::StandardHeader","header::map::GetAll","header::map::HeaderMap","header::map::Link","byte_str::ByteStr","header::name::Repr","header::name::Custom"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::map::HeaderMap::<T>::append2":{"K":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"],"header::name::HeaderName":["byte_str::ByteStr","uri::ErrorKind","header::name::Custom","version::Version","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::GetAll","header::map::HeaderMap","version::Http","header::name::Repr","header::map::Link","header::map::HashValue","header::map::Cursor","header::name::StandardHeader","method::Inner"]},"header::name::Repr":{"T":["<*mut T as std::fmt::Debug>","header::name::Custom","byte_str::ByteStr","header::name::Repr","version::Version","header::name::StandardHeader"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append2(p1, p2);
+header::map::HeaderMap::<T>::append2(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::append2(p0, p1, p2);
+<header::map::HeaderMap<T>>::append2(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::find
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","convert::HttpTryFrom","std::marker::Sized"]},"header::map::HeaderMap::<T>::find":{"K":["std::convert::Into","std::hash::Hash"],"T":["std::marker::Sized"],"header::name::HeaderName":["std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::cmp::PartialEq"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"header::map::GetAll":{"T":["header::map::Link","header::name::Repr","header::map::Cursor","header::map::GetAll","header::name::StandardHeader","uri::ErrorKind","version::Version","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>","header::map::HashValue","header::map::HeaderMap","byte_str::ByteStr","header::name::Custom"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue"]},"header::map::HeaderMap::<T>::find":{"K":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"],"header::name::HeaderName":["version::Http","header::map::HeaderMap","header::map::HashValue","version::Version","method::Inner","header::name::Repr","header::name::Custom","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::map::Link","header::map::GetAll","byte_str::ByteStr","uri::ErrorKind","header::name::StandardHeader","header::map::Cursor"]},"header::name::Repr":{"T":["header::name::Custom","header::name::Repr","version::Version","header::name::StandardHeader","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","byte_str::ByteStr"]},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // K
+p0.find(p1);
+header::map::HeaderMap::<T>::find(p0, p1);
+crate::header::map::HeaderMap::<T>::find(p0, p1);
+<header::map::HeaderMap<T>>::find(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert_phase_two
deps:{"header::map::HeaderMap::<T>::insert_phase_two":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::insert_phase_two":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p2 = MaybeUninit::uninit().assume_init(); // T
let mut p3 = MaybeUninit::uninit().assume_init(); // header::map::HashValue
let mut p4 = 0usize; // None+usize
let mut p5 = true; // None+bool
+p0.insert_phase_two(p1, p2, p3, p4, p5);
+header::map::HeaderMap::<T>::insert_phase_two(p0, p1, p2, p3, p4, p5);
+crate::header::map::HeaderMap::<T>::insert_phase_two(p0, p1, p2, p3, p4, p5);
+<header::map::HeaderMap<T>>::insert_phase_two(p0, p1, p2, p3, p4, p5);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::remove
deps:{"header::map::HeaderMap::<T>::remove":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::remove":{"K":["header::name::HeaderName","std::string::String"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.remove(p1);
+header::map::HeaderMap::<T>::remove(p0, p1);
+crate::header::map::HeaderMap::<T>::remove(p0, p1);
+<header::map::HeaderMap<T>>::remove(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::remove_found
deps:{"header::map::HeaderMap::<T>::remove_found":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::remove_found":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.remove_found(p1, p2);
+header::map::HeaderMap::<T>::remove_found(p0, p1, p2);
+crate::header::map::HeaderMap::<T>::remove_found(p0, p1, p2);
+<header::map::HeaderMap<T>>::remove_found(p0, p1, p2);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::remove_extra_value
deps:{"header::map::HeaderMap::<T>::remove_extra_value":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::remove_extra_value":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
+p0.remove_extra_value(p1);
+header::map::HeaderMap::<T>::remove_extra_value(p0, p1);
+crate::header::map::HeaderMap::<T>::remove_extra_value(p0, p1);
+<header::map::HeaderMap<T>>::remove_extra_value(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::remove_all_extra_values
deps:{"header::map::HeaderMap::<T>::remove_all_extra_values":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::remove_all_extra_values":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
+p0.remove_all_extra_values(p1);
+header::map::HeaderMap::<T>::remove_all_extra_values(p0, p1);
+crate::header::map::HeaderMap::<T>::remove_all_extra_values(p0, p1);
+<header::map::HeaderMap<T>>::remove_all_extra_values(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::insert_entry
deps:{"header::map::HeaderMap::<T>::insert_entry":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::insert_entry":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // header::map::HashValue
let mut p2 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p3 = MaybeUninit::uninit().assume_init(); // T
+p0.insert_entry(p1, p2, p3);
+header::map::HeaderMap::<T>::insert_entry(p0, p1, p2, p3);
+crate::header::map::HeaderMap::<T>::insert_entry(p0, p1, p2, p3);
+<header::map::HeaderMap<T>>::insert_entry(p0, p1, p2, p3);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::rebuild
deps:{"header::map::HeaderMap::<T>::rebuild":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::rebuild":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.rebuild();
+header::map::HeaderMap::<T>::rebuild(p0);
+crate::header::map::HeaderMap::<T>::rebuild(p0);
+<header::map::HeaderMap<T>>::rebuild(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::reinsert_entry_in_order
deps:{"header::map::HeaderMap::<T>::reinsert_entry_in_order":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::reinsert_entry_in_order":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // header::map::Pos
+p0.reinsert_entry_in_order(p1);
+header::map::HeaderMap::<T>::reinsert_entry_in_order(p0, p1);
+crate::header::map::HeaderMap::<T>::reinsert_entry_in_order(p0, p1);
+<header::map::HeaderMap<T>>::reinsert_entry_in_order(p0, p1);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::reserve_one
deps:{"header::map::HeaderMap::<T>::reserve_one":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::reserve_one":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.reserve_one();
+header::map::HeaderMap::<T>::reserve_one(p0);
+crate::header::map::HeaderMap::<T>::reserve_one(p0);
+<header::map::HeaderMap<T>>::reserve_one(p0);
-----------------
src/header/map.rs header::map::HeaderMap::<T>::grow
deps:{"header::map::HeaderMap::<T>::grow":{"T":["std::marker::Sized"]}}
candidates:{"header::map::HeaderMap::<T>::grow":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = 0usize; // None+usize
+p0.grow(p1);
+header::map::HeaderMap::<T>::grow(p0, p1);
+crate::header::map::HeaderMap::<T>::grow(p0, p1);
+<header::map::HeaderMap<T>>::grow(p0, p1);
-----------------
src/header/map.rs <&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.into_iter();
+<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a header::map::HeaderMap<T>>::into_iter(p0);
-----------------
src/header/map.rs <&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.into_iter();
+<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a mut header::map::HeaderMap<T>>::into_iter(p0);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter
deps:{"<header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.into_iter();
+<header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter(p0);
+<header::map::HeaderMap<T>>::into_iter(p0);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","convert::HttpTryFrom","std::clone::Clone"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::hash::Hash"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["header::map::IntoIter","header::map::IterMut","header::map::Iter","header::map::ValuesMut","header::map::Keys","<&mut I as std::iter::Iterator>","header::map::Values","header::map::ValueIter","header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut"]},"<header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter":{"I":["header::map::GetAll","header::map::OccupiedEntry","<&'a std::option::Option<T> as std::iter::IntoIterator>","header::map::HeaderMap","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>"],"T":["RUG_ANY"]},"header::map::Bucket":{"T":["header::map::Link","version::Version","header::value::HeaderValue","uri::Uri","header::map::Bucket","uri::path::PathAndQuery","header::name::MaybeLower","header::name::HeaderName","header::map::Links","header::name::Repr","header::map::HeaderMap","byte_str::ByteStr","status::StatusCode","header::map::ExtraValue","header::name::StandardHeader","uri::scheme::Scheme","uri::scheme::Scheme2","std::clone::impls::<impl std::clone::Clone for &T>","header::map::HashValue","header::name::Custom","header::map::Cursor","uri::authority::Authority","uri::scheme::Protocol","method::Method"]},"header::map::Drain":{"T":["header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","<*mut T as std::marker::Sync>","header::map::IterMut"]},"header::map::Entry":{"T":["header::map::GetAll","header::name::MaybeLower","header::name::Custom","header::map::OccupiedEntry","uri::authority::Authority","header::name::StandardHeader","response::Parts","uri::scheme::Protocol","request::Parts","header::map::Link","uri::builder::Builder","byte_str::ByteStr","uri::path::PathAndQuery","header::map::IntoIter","header::name::InvalidHeaderName","error::Error","uri::Parts","header::name::InvalidHeaderNameBytes","header::map::Entry","uri::scheme::Scheme","header::name::HdrName","version::Version","status::StatusCode","method::Method","header::map::HashValue","header::map::HeaderMap","uri::InvalidUriParts","header::map::ValueDrain","request::Request","header::map::Bucket","header::map::Links","header::map::ValueIterMut","header::map::ValuesMut","error::Never","uri::ErrorKind","uri::Uri","header::name::HeaderName","header::map::ExtraValue","method::InvalidMethod","header::map::Values","header::map::VacantEntry","uri::InvalidUri","header::map::ValueIter","header::name::Repr","response::Builder","header::map::Cursor","header::map::Drain","header::map::Iter","header::map::Keys","response::Response","status::InvalidStatusCode","header::value::InvalidHeaderValueBytes","uri::port::Port","header::value::InvalidHeaderValue","uri::InvalidUriBytes","header::value::HeaderValue","header::value::ToStrError","request::Builder","uri::scheme::Scheme2","header::map::IterMut","<*mut T as std::fmt::Debug>","extensions::Extensions"]},"header::map::ExtraValue":{"T":["uri::scheme::Scheme2","header::map::ExtraValue","version::Version","<&T as std::fmt::Debug>","header::map::Links","header::name::Custom","header::map::Bucket","header::name::StandardHeader","uri::Uri","header::value::HeaderValue","header::map::HashValue","status::StatusCode","header::map::Link","byte_str::ByteStr","header::map::HeaderMap","uri::scheme::Protocol","header::name::MaybeLower","uri::authority::Authority","method::Method","header::name::Repr","header::map::Cursor","header::name::HeaderName","uri::path::PathAndQuery","uri::scheme::Scheme"]},"header::map::GetAll":{"T":["uri::ErrorKind","header::name::StandardHeader","version::Version","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","byte_str::ByteStr","header::name::Repr","header::map::Link","header::map::HeaderMap","header::name::Custom","header::map::HashValue","header::map::Cursor","header::map::GetAll"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["header::map::Cursor","header::map::Iter","header::value::InvalidHeaderValueBytes","uri::scheme::Protocol","header::map::ExtraValue","header::map::Drain","method::Method","header::map::ValuesMut","header::map::IntoIter","response::Parts","uri::scheme::Scheme","header::map::ValueIterMut","header::map::HashValue","header::map::Bucket","uri::scheme::Scheme2","header::map::ValueDrain","version::Version","<*mut T as std::fmt::Debug>","uri::Parts","header::map::Links","uri::InvalidUriBytes","error::Never","header::map::GetAll","status::InvalidStatusCode","response::Response","header::value::HeaderValue","header::value::InvalidHeaderValue","header::map::HeaderMap","header::name::StandardHeader","status::StatusCode","request::Request","header::name::Repr","header::map::Values","uri::InvalidUriParts","header::map::VacantEntry","header::map::Link","request::Builder","method::InvalidMethod","byte_str::ByteStr","uri::path::PathAndQuery","header::map::ValueIter","header::value::ToStrError","header::name::HdrName","extensions::Extensions","error::Error","header::map::Keys","header::name::Custom","header::name::InvalidHeaderName","uri::authority::Authority","request::Parts","header::map::IterMut","header::name::HeaderName","header::map::OccupiedEntry","uri::builder::Builder","uri::port::Port","uri::InvalidUri","response::Builder","uri::ErrorKind","uri::Uri","header::map::Entry","header::name::MaybeLower","header::name::InvalidHeaderNameBytes"]},"header::map::Iter":{"T":["header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain","<*mut T as std::marker::Sync>","header::map::IterMut"]},"header::map::IterMut":{"T":["<*const T as std::marker::Sync>","header::map::ValueDrain","header::map::Drain","header::map::Iter","header::map::ValueIterMut","header::map::IterMut"]},"header::map::Keys":{"T":["header::name::Custom","<&T as std::fmt::Debug>","header::name::MaybeLower","header::map::IterMut","uri::ErrorKind","uri::Uri","header::value::InvalidHeaderValueBytes","header::map::HashValue","header::value::ToStrError","method::InvalidMethod","header::name::HdrName","header::map::Entry","response::Response","header::map::ValuesMut","header::map::ValueDrain","response::Parts","header::map::ValueIterMut","header::map::VacantEntry","header::name::InvalidHeaderName","header::map::OccupiedEntry","header::value::HeaderValue","status::StatusCode","uri::port::Port","request::Parts","header::map::Drain","method::Method","status::InvalidStatusCode","uri::scheme::Scheme","header::name::StandardHeader","uri::scheme::Scheme2","byte_str::ByteStr","header::map::ExtraValue","header::name::Repr","header::map::ValueIter","extensions::Extensions","uri::builder::Builder","request::Request","header::name::HeaderName","error::Error","uri::InvalidUriBytes","header::map::Iter","header::map::Values","uri::InvalidUri","response::Builder","uri::scheme::Protocol","version::Version","header::map::HeaderMap","uri::path::PathAndQuery","header::value::InvalidHeaderValue","header::map::Link","error::Never","uri::Parts","header::map::Cursor","uri::InvalidUriParts","request::Builder","header::map::GetAll","header::map::Keys","header::map::IntoIter","uri::authority::Authority","header::name::InvalidHeaderNameBytes","header::map::Links","header::map::Bucket"]},"header::map::OccupiedEntry":{"T":["request::Builder","version::Version","byte_str::ByteStr","header::value::HeaderValue","header::map::VacantEntry","header::map::Drain","header::map::OccupiedEntry","method::Method","header::map::HashValue","uri::path::PathAndQuery","extensions::Extensions","header::map::Links","header::name::MaybeLower","header::map::Values","error::Error","uri::scheme::Scheme","uri::port::Port","header::map::Cursor","header::name::Custom","header::map::Keys","response::Parts","header::value::InvalidHeaderValueBytes","header::map::Entry","status::InvalidStatusCode","uri::InvalidUriParts","request::Parts","<*mut T as std::fmt::Debug>","header::name::Repr","header::name::HdrName","header::name::InvalidHeaderNameBytes","response::Builder","method::InvalidMethod","uri::Uri","header::name::StandardHeader","header::name::InvalidHeaderName","header::map::HeaderMap","status::StatusCode","header::map::Bucket","header::map::Iter","uri::authority::Authority","uri::scheme::Scheme2","header::value::ToStrError","header::map::ValueDrain","header::map::ExtraValue","header::map::IntoIter","error::Never","header::map::GetAll","uri::Parts","response::Response","header::value::InvalidHeaderValue","header::map::ValueIter","header::map::IterMut","header::map::ValuesMut","uri::builder::Builder","uri::InvalidUri","uri::scheme::Protocol","header::name::HeaderName","header::map::Link","request::Request","header::map::ValueIterMut","uri::InvalidUriBytes","uri::ErrorKind"]},"header::map::VacantEntry":{"T":["uri::scheme::Scheme","uri::Parts","header::map::VacantEntry","uri::scheme::Scheme2","header::map::ValueDrain","header::map::OccupiedEntry","header::map::Cursor","header::map::IterMut","header::name::Custom","uri::scheme::Protocol","uri::ErrorKind","header::map::Link","header::value::HeaderValue","header::name::StandardHeader","header::map::Entry","request::Builder","uri::port::Port","uri::path::PathAndQuery","uri::InvalidUriParts","method::InvalidMethod","header::map::Iter","status::StatusCode","header::map::GetAll","header::name::InvalidHeaderNameBytes","header::map::Values","header::map::HashValue","header::map::ValueIterMut","status::InvalidStatusCode","byte_str::ByteStr","header::map::ValueIter","request::Parts","header::map::Drain","header::map::HeaderMap","error::Never","error::Error","uri::authority::Authority","request::Request","uri::Uri","header::map::Bucket","header::value::InvalidHeaderValue","version::Version","uri::InvalidUriBytes","header::name::HeaderName","uri::InvalidUri","header::value::ToStrError","header::value::InvalidHeaderValueBytes","header::name::Repr","header::map::Keys","response::Response","header::name::InvalidHeaderName","method::Method","uri::builder::Builder","header::name::HdrName","header::map::ValuesMut","<&T as std::fmt::Debug>","response::Builder","header::map::Links","header::map::IntoIter","header::name::MaybeLower","response::Parts","header::map::ExtraValue","extensions::Extensions"]},"header::map::ValueDrain":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::ValueDrain","<*mut T as std::marker::Sync>","header::map::Drain"]},"header::map::ValueIter":{"T":["request::Parts","status::InvalidStatusCode","header::map::ValueIterMut","response::Response","status::StatusCode","header::name::Custom","header::map::Keys","uri::scheme::Scheme","header::map::Cursor","header::map::Bucket","header::map::ValueIter","uri::scheme::Protocol","method::Method","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","uri::ErrorKind","uri::InvalidUri","request::Request","uri::authority::Authority","header::map::IntoIter","header::name::InvalidHeaderName","header::name::HeaderName","byte_str::ByteStr","method::InvalidMethod","header::map::Links","header::map::VacantEntry","header::map::GetAll","extensions::Extensions","header::name::StandardHeader","uri::InvalidUriBytes","uri::InvalidUriParts","version::Version","uri::scheme::Scheme2","<*mut T as std::fmt::Debug>","response::Builder","header::map::Iter","header::name::Repr","uri::path::PathAndQuery","uri::Uri","header::value::ToStrError","header::map::ValuesMut","uri::port::Port","header::name::HdrName","uri::builder::Builder","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","header::map::Drain","response::Parts","header::map::IterMut","header::name::MaybeLower","error::Error","header::value::InvalidHeaderValue","header::map::Entry","error::Never","request::Builder","header::map::Values","header::map::HeaderMap","header::map::HashValue","uri::Parts","header::map::ValueDrain","header::map::OccupiedEntry","header::map::Link"]},"header::map::ValueIterMut":{"T":["<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter"]},"header::map::Values":{"T":["uri::scheme::Protocol","header::map::GetAll","error::Error","error::Never","header::map::VacantEntry","header::name::HeaderName","header::map::ExtraValue","header::map::Bucket","header::map::ValueDrain","header::name::StandardHeader","version::Version","request::Builder","response::Parts","<&T as std::fmt::Debug>","header::value::ToStrError","uri::path::PathAndQuery","header::map::Link","status::StatusCode","header::map::Cursor","header::value::InvalidHeaderValue","header::name::Repr","request::Request","header::map::Values","header::name::Custom","response::Builder","header::map::Entry","header::map::HeaderMap","header::map::Drain","header::map::Keys","uri::port::Port","header::value::InvalidHeaderValueBytes","byte_str::ByteStr","header::map::ValueIterMut","response::Response","uri::authority::Authority","header::map::IterMut","uri::InvalidUri","method::InvalidMethod","header::name::InvalidHeaderName","header::map::ValueIter","header::name::HdrName","header::map::IntoIter","header::name::InvalidHeaderNameBytes","header::value::HeaderValue","uri::InvalidUriBytes","method::Method","header::map::HashValue","header::name::MaybeLower","uri::ErrorKind","uri::InvalidUriParts","status::InvalidStatusCode","uri::scheme::Scheme","uri::Uri","header::map::Links","header::map::OccupiedEntry","header::map::Iter","request::Parts","extensions::Extensions","header::map::ValuesMut","uri::builder::Builder","uri::Parts","uri::scheme::Scheme2"]},"header::map::ValuesMut":{"T":["header::map::IntoIter","uri::InvalidUriBytes","header::map::HashValue","header::value::InvalidHeaderValue","request::Parts","header::name::StandardHeader","extensions::Extensions","uri::Uri","header::map::VacantEntry","uri::scheme::Protocol","header::name::HeaderName","header::map::HeaderMap","uri::scheme::Scheme2","header::value::ToStrError","header::map::Links","byte_str::ByteStr","header::name::Repr","status::InvalidStatusCode","uri::Parts","header::map::ValueIter","header::map::Entry","header::name::HdrName","request::Builder","header::name::InvalidHeaderNameBytes","uri::builder::Builder","request::Request","header::map::Link","header::map::ValueIterMut","version::Version","header::map::GetAll","header::map::ValuesMut","header::map::Iter","method::InvalidMethod","uri::InvalidUri","uri::ErrorKind","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::map::ValueDrain","header::name::Custom","header::map::OccupiedEntry","response::Response","uri::port::Port","header::map::Values","header::value::HeaderValue","uri::InvalidUriParts","header::map::ExtraValue","method::Method","header::map::Keys","header::name::InvalidHeaderName","header::map::IterMut","header::map::Bucket","error::Error","uri::scheme::Scheme","uri::authority::Authority","status::StatusCode","header::map::Drain","error::Never","response::Parts","<*mut T as std::fmt::Debug>","header::name::MaybeLower","header::map::Cursor","response::Builder"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::StandardHeader","version::Version","header::name::Custom","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::name::Repr"]},"request::Request":{"T":["extensions::Extensions","response::Response","request::Request","status::StatusCode","uri::builder::Builder","uri::Parts","response::Builder","version::Version","uri::Uri","request::Builder","header::map::HeaderMap","method::Method"]},"response::Response":{"T":["uri::Uri","header::map::HeaderMap","request::Request","uri::Parts","status::StatusCode","uri::builder::Builder","method::Method","version::Version","extensions::Extensions","response::Builder","response::Response","request::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["method::Method","header::value::HeaderValue","uri::port::Port","uri::authority::Authority","<&mut T as std::convert::AsRef<U>>","uri::scheme::Scheme"]},"uri::scheme::Scheme2":{"T":["version::Version","header::map::Cursor","uri::scheme::Scheme2","header::value::HeaderValue","header::map::HashValue","uri::scheme::Scheme","<*const T as std::fmt::Debug>","header::map::HeaderMap","method::Method","header::name::MaybeLower","header::name::Repr","header::name::Custom","header::map::Links","byte_str::ByteStr","header::name::HeaderName","header::name::StandardHeader","uri::scheme::Protocol","uri::authority::Authority","header::map::Bucket","uri::path::PathAndQuery","header::map::Link","uri::Uri","header::map::ExtraValue","status::StatusCode","std::boxed::Box<byte_str::ByteStr>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+<header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter(p0);
+crate::<header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter(p0);
+<header::map::HeaderMap<T>>::from_iter(p0);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as convert::HttpTryFrom<&'a std::collections::HashMap<K, V>>>::try_from
'a
deps:{"<*const T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as convert::HttpTryFrom<&'a std::collections::HashMap<K, V>>>::try_from":{"K":["std::marker::Sized","std::cmp::Eq","std::hash::Hash"],"T":["convert::HttpTryFrom","std::marker::Sized"],"V":["std::marker::Sized"],"header::name::HeaderName":["convert::HttpTryFrom"]},"header::name::Repr":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as convert::HttpTryFrom<&'a std::collections::HashMap<K, V>>>::try_from":{"K":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","header::value::HeaderValue","status::StatusCode","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","method::Method","uri::authority::Authority","uri::Uri","version::Version","header::name::HeaderName","version::Http","header::name::StandardHeader","uri::scheme::Scheme","header::name::Custom","method::Inner","std::hash::impls::<impl std::hash::Hash for *const T>","header::name::Repr","byte_str::ByteStr"],"V":["RUG_ANY"]},"header::name::Repr":{"T":["header::name::Custom","version::Version","header::name::StandardHeader","<*const T as std::fmt::Debug>","byte_str::ByteStr","header::name::Repr"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::collections::HashMap<K, V>
+<header::map::HeaderMap<T> as convert::HttpTryFrom<&'a std::collections::HashMap<K, V>>>::try_from(p0);
+crate::<header::map::HeaderMap<T> as convert::HttpTryFrom<&'a std::collections::HashMap<K, V>>>::try_from(p0);
+<header::map::HeaderMap<T>>::try_from(p0);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::cmp::PartialEq","convert::HttpTryFrom","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::fmt::Debug"]},"request::Request":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"response::Response":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["header::map::Drain","<&mut I as std::iter::Iterator>","header::map::ValueIterMut","header::map::IterMut","header::map::Iter","header::map::Values","header::map::Keys","header::map::IntoIter","header::map::ValuesMut","header::map::ValueDrain","header::map::ValueIter"]},"<header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend":{"I":["<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>","<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","header::map::HeaderMap","header::map::GetAll","header::map::OccupiedEntry"],"T":["RUG_ANY"]},"header::map::Bucket":{"T":["header::map::Bucket","header::map::Link","header::name::HeaderName","header::value::HeaderValue","status::StatusCode","byte_str::ByteStr","version::Version","header::name::StandardHeader","header::map::HeaderMap","uri::scheme::Protocol","header::map::Cursor","header::map::Links","uri::authority::Authority","header::name::Custom","uri::Uri","uri::scheme::Scheme2","header::map::HashValue","uri::path::PathAndQuery","header::map::ExtraValue","header::name::MaybeLower","uri::scheme::Scheme","<&mut T as std::fmt::Debug>","method::Method","header::name::Repr"]},"header::map::Drain":{"T":["header::map::ValueDrain","<*const T as std::marker::Send>","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","header::map::Drain"]},"header::map::Entry":{"T":["header::map::ExtraValue","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme2","header::name::HeaderName","uri::Parts","method::Method","header::value::InvalidHeaderValue","response::Builder","uri::authority::Authority","header::name::Custom","error::Error","header::map::IntoIter","extensions::Extensions","uri::InvalidUri","header::value::ToStrError","<*mut T as std::fmt::Debug>","uri::Uri","request::Request","header::map::Iter","byte_str::ByteStr","uri::scheme::Protocol","uri::InvalidUriBytes","header::name::Repr","header::map::GetAll","header::value::InvalidHeaderValueBytes","header::map::Keys","header::name::MaybeLower","uri::InvalidUriParts","method::InvalidMethod","uri::port::Port","header::map::ValueIter","header::name::InvalidHeaderName","header::map::HeaderMap","header::map::HashValue","header::map::Drain","header::map::ValuesMut","header::map::Entry","header::map::OccupiedEntry","response::Parts","header::map::ValueDrain","header::name::StandardHeader","request::Parts","status::InvalidStatusCode","version::Version","uri::path::PathAndQuery","request::Builder","error::Never","uri::builder::Builder","uri::scheme::Scheme","header::map::Cursor","header::map::Links","header::value::HeaderValue","response::Response","status::StatusCode","header::name::HdrName","header::map::IterMut","header::map::Link","uri::ErrorKind","header::map::VacantEntry","header::map::Bucket","header::map::Values","header::map::ValueIterMut"]},"header::map::ExtraValue":{"T":["version::Version","header::map::Link","uri::scheme::Scheme","uri::path::PathAndQuery","uri::Uri","header::value::HeaderValue","uri::scheme::Scheme2","uri::scheme::Protocol","status::StatusCode","header::name::StandardHeader","header::map::Links","byte_str::ByteStr","header::map::HashValue","header::name::Repr","header::map::ExtraValue","header::map::HeaderMap","header::map::Bucket","std::clone::impls::<impl std::clone::Clone for *const T>","method::Method","header::map::Cursor","header::name::MaybeLower","header::name::HeaderName","uri::authority::Authority","header::name::Custom"]},"header::map::GetAll":{"T":["header::map::HeaderMap","header::name::StandardHeader","header::name::Repr","header::map::Cursor","byte_str::ByteStr","header::map::HashValue","header::map::GetAll","header::map::Link","header::name::Custom","version::Version","uri::ErrorKind","<*mut T as std::fmt::Debug>"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["byte_str::ByteStr","uri::Parts","error::Error","response::Response","request::Request","header::map::ValuesMut","header::name::InvalidHeaderName","version::Version","header::map::HashValue","uri::InvalidUriBytes","header::value::ToStrError","uri::port::Port","header::map::ValueIter","header::value::HeaderValue","header::name::Repr","header::name::Custom","uri::authority::Authority","header::map::ExtraValue","header::map::Links","header::map::IterMut","header::map::HeaderMap","header::map::Entry","method::InvalidMethod","header::map::VacantEntry","request::Parts","header::map::ValueIterMut","header::name::HeaderName","status::StatusCode","header::name::StandardHeader","header::map::Cursor","method::Method","uri::Uri","uri::builder::Builder","error::Never","header::map::Bucket","uri::scheme::Protocol","header::value::InvalidHeaderValue","uri::scheme::Scheme","header::map::GetAll","header::name::HdrName","header::map::Values","header::value::InvalidHeaderValueBytes","status::InvalidStatusCode","<&mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::Keys","header::map::Link","header::name::MaybeLower","header::map::OccupiedEntry","response::Builder","response::Parts","uri::InvalidUri","header::map::Drain","header::map::ValueDrain","uri::scheme::Scheme2","extensions::Extensions","uri::InvalidUriParts","request::Builder","header::map::IntoIter","uri::ErrorKind","header::name::InvalidHeaderNameBytes","header::map::Iter"]},"header::map::Iter":{"T":["header::map::Iter","header::map::IterMut","<*const T as std::fmt::Debug>","header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain"]},"header::map::IterMut":{"T":["<*const T as std::marker::Sync>","header::map::Iter","header::map::Drain","header::map::ValueIterMut","header::map::IterMut","header::map::ValueDrain"]},"header::map::Keys":{"T":["uri::scheme::Protocol","error::Never","status::StatusCode","<*const T as std::fmt::Debug>","response::Parts","header::name::InvalidHeaderName","header::map::ValueIterMut","version::Version","uri::port::Port","header::map::OccupiedEntry","header::map::ValuesMut","response::Builder","header::map::HeaderMap","header::map::Cursor","uri::scheme::Scheme","status::InvalidStatusCode","uri::scheme::Scheme2","header::map::ValueIter","header::name::Repr","error::Error","header::map::Keys","header::value::ToStrError","byte_str::ByteStr","uri::Uri","request::Builder","header::map::ValueDrain","header::map::IterMut","header::map::ExtraValue","header::map::Bucket","header::map::Iter","header::map::Entry","header::map::IntoIter","header::name::StandardHeader","header::value::InvalidHeaderValue","method::InvalidMethod","uri::authority::Authority","header::name::InvalidHeaderNameBytes","header::map::Links","header::map::HashValue","request::Request","header::map::Link","header::map::Values","response::Response","request::Parts","header::value::HeaderValue","header::name::HdrName","header::value::InvalidHeaderValueBytes","uri::InvalidUriBytes","method::Method","header::map::VacantEntry","header::map::GetAll","extensions::Extensions","header::name::HeaderName","header::name::MaybeLower","header::name::Custom","uri::ErrorKind","uri::path::PathAndQuery","header::map::Drain","uri::builder::Builder","uri::InvalidUri","uri::InvalidUriParts","uri::Parts"]},"header::map::OccupiedEntry":{"T":["uri::scheme::Scheme","header::map::ValueDrain","header::value::InvalidHeaderValue","response::Parts","request::Parts","header::name::Custom","uri::authority::Authority","header::name::StandardHeader","header::name::HdrName","uri::port::Port","request::Builder","header::name::InvalidHeaderName","header::map::Cursor","status::StatusCode","header::map::Bucket","header::name::Repr","header::value::InvalidHeaderValueBytes","uri::InvalidUriParts","header::map::Entry","header::map::IterMut","header::map::Keys","header::map::Links","error::Never","header::map::GetAll","uri::Parts","uri::Uri","response::Response","uri::scheme::Scheme2","uri::path::PathAndQuery","extensions::Extensions","byte_str::ByteStr","header::map::HeaderMap","method::Method","header::map::ValuesMut","header::map::ExtraValue","uri::builder::Builder","<*const T as std::fmt::Debug>","header::map::Link","header::name::InvalidHeaderNameBytes","header::value::HeaderValue","header::value::ToStrError","header::name::HeaderName","uri::scheme::Protocol","header::map::Drain","error::Error","header::map::IntoIter","header::map::OccupiedEntry","header::map::VacantEntry","request::Request","uri::InvalidUriBytes","uri::ErrorKind","header::map::ValueIterMut","method::InvalidMethod","header::map::Iter","status::InvalidStatusCode","header::map::Values","version::Version","header::name::MaybeLower","header::map::ValueIter","uri::InvalidUri","header::map::HashValue","response::Builder"]},"header::map::VacantEntry":{"T":["uri::Parts","header::map::IntoIter","request::Parts","<&T as std::fmt::Debug>","header::map::IterMut","request::Builder","header::name::StandardHeader","uri::ErrorKind","header::name::HeaderName","header::name::Custom","uri::scheme::Protocol","header::map::ValueDrain","header::name::HdrName","header::name::InvalidHeaderNameBytes","header::map::HashValue","header::map::ValueIterMut","response::Builder","uri::scheme::Scheme","uri::Uri","header::value::HeaderValue","uri::InvalidUriParts","header::map::GetAll","request::Request","header::map::Entry","error::Never","uri::authority::Authority","method::Method","header::map::Drain","header::map::OccupiedEntry","header::value::InvalidHeaderValue","uri::InvalidUri","header::map::Values","header::map::ExtraValue","extensions::Extensions","header::map::Bucket","status::StatusCode","header::map::Link","uri::path::PathAndQuery","header::map::VacantEntry","header::map::HeaderMap","header::value::InvalidHeaderValueBytes","header::map::Keys","response::Parts","uri::InvalidUriBytes","header::name::InvalidHeaderName","method::InvalidMethod","header::name::Repr","response::Response","status::InvalidStatusCode","version::Version","uri::port::Port","header::map::ValuesMut","header::map::Cursor","uri::scheme::Scheme2","uri::builder::Builder","error::Error","header::map::Iter","byte_str::ByteStr","header::map::Links","header::map::ValueIter","header::value::ToStrError","header::name::MaybeLower"]},"header::map::ValueDrain":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::Drain","<*const T as std::marker::Send>"]},"header::map::ValueIter":{"T":["error::Never","uri::scheme::Protocol","header::map::VacantEntry","uri::scheme::Scheme2","uri::ErrorKind","header::map::IntoIter","header::map::Drain","header::map::Cursor","header::map::Bucket","header::map::Keys","header::map::GetAll","header::map::Iter","request::Parts","uri::InvalidUriBytes","uri::Uri","uri::builder::Builder","header::value::HeaderValue","header::name::HeaderName","<&mut T as std::fmt::Debug>","request::Request","response::Builder","header::map::ValueIter","header::map::IterMut","header::name::InvalidHeaderNameBytes","uri::InvalidUri","uri::port::Port","header::map::ValueDrain","uri::authority::Authority","version::Version","header::map::Values","header::name::Custom","status::StatusCode","status::InvalidStatusCode","header::name::Repr","uri::Parts","header::map::HashValue","response::Parts","header::map::HeaderMap","uri::InvalidUriParts","header::map::OccupiedEntry","header::name::InvalidHeaderName","error::Error","header::map::Link","request::Builder","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::map::Links","extensions::Extensions","uri::scheme::Scheme","header::map::ValuesMut","header::name::HdrName","header::value::InvalidHeaderValue","header::map::ValueIterMut","response::Response","byte_str::ByteStr","header::value::ToStrError","header::map::ExtraValue","header::map::Entry","header::name::StandardHeader","method::Method","method::InvalidMethod","header::name::MaybeLower"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::ValueDrain","header::map::IterMut","header::map::Iter","<*mut T as std::fmt::Debug>","header::map::Drain"]},"header::map::Values":{"T":["header::map::ValueIter","error::Never","header::map::Keys","response::Parts","header::name::Repr","header::name::InvalidHeaderNameBytes","extensions::Extensions","uri::Uri","header::map::Entry","uri::InvalidUriParts","uri::authority::Authority","header::name::InvalidHeaderName","uri::builder::Builder","header::map::Bucket","request::Request","header::map::OccupiedEntry","status::StatusCode","header::name::StandardHeader","header::map::Iter","error::Error","header::map::Cursor","header::value::InvalidHeaderValueBytes","uri::ErrorKind","header::map::ValueDrain","header::value::InvalidHeaderValue","header::map::ValuesMut","response::Response","uri::Parts","header::name::HeaderName","header::name::MaybeLower","uri::InvalidUriBytes","header::map::ExtraValue","header::map::ValueIterMut","method::Method","method::InvalidMethod","header::name::HdrName","uri::InvalidUri","header::value::HeaderValue","request::Parts","header::value::ToStrError","header::map::IterMut","uri::scheme::Scheme2","header::map::VacantEntry","uri::scheme::Scheme","response::Builder","version::Version","header::map::GetAll","status::InvalidStatusCode","header::name::Custom","byte_str::ByteStr","header::map::Links","header::map::Link","header::map::Drain","header::map::HeaderMap","header::map::IntoIter","<&mut T as std::fmt::Debug>","header::map::Values","uri::port::Port","header::map::HashValue","uri::scheme::Protocol","request::Builder","uri::path::PathAndQuery"]},"header::map::ValuesMut":{"T":["error::Never","uri::path::PathAndQuery","uri::scheme::Protocol","uri::ErrorKind","uri::InvalidUriBytes","uri::Uri","request::Parts","uri::InvalidUri","uri::builder::Builder","status::StatusCode","header::name::StandardHeader","header::map::Keys","header::value::ToStrError","header::map::ValueIter","header::name::MaybeLower","header::map::Entry","header::map::ValueDrain","header::name::InvalidHeaderNameBytes","<*const T as std::fmt::Debug>","header::name::HeaderName","header::map::Drain","header::map::Link","extensions::Extensions","method::InvalidMethod","header::map::ValueIterMut","header::map::Iter","uri::port::Port","response::Parts","header::name::Repr","uri::authority::Authority","header::map::OccupiedEntry","header::map::HashValue","uri::scheme::Scheme2","header::value::HeaderValue","header::map::ValuesMut","header::name::InvalidHeaderName","uri::scheme::Scheme","error::Error","header::map::Links","header::map::GetAll","request::Builder","header::map::IntoIter","method::Method","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","response::Response","header::map::Values","uri::InvalidUriParts","header::map::Bucket","header::map::Cursor","header::value::InvalidHeaderValue","uri::Parts","version::Version","header::map::ExtraValue","request::Request","header::map::IterMut","status::InvalidStatusCode","header::name::Custom","header::map::HeaderMap","byte_str::ByteStr","response::Builder","header::name::HdrName"]},"header::name::Repr":{"T":["header::name::Repr","version::Version","byte_str::ByteStr","<*mut T as std::fmt::Debug>","header::name::StandardHeader","header::name::Custom"]},"request::Request":{"T":["response::Response","request::Builder","header::map::HeaderMap","uri::builder::Builder","version::Version","method::Method","extensions::Extensions","uri::Uri","uri::Parts","request::Request","response::Builder","status::StatusCode"]},"response::Response":{"T":["uri::builder::Builder","extensions::Extensions","status::StatusCode","request::Request","method::Method","uri::Uri","header::map::HeaderMap","version::Version","response::Response","response::Builder","uri::Parts","request::Builder"]},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"uri::port::Port":{"T":["method::Method","header::value::HeaderValue","uri::port::Port","uri::scheme::Scheme","uri::authority::Authority","<&T as std::convert::AsRef<U>>"]},"uri::scheme::Scheme2":{"T":["uri::scheme::Scheme","header::map::HeaderMap","header::name::HeaderName","uri::scheme::Scheme2","<&T as std::fmt::Debug>","header::map::HashValue","status::StatusCode","version::Version","header::name::StandardHeader","uri::scheme::Protocol","uri::Uri","uri::path::PathAndQuery","header::map::Bucket","byte_str::ByteStr","header::name::Repr","uri::authority::Authority","header::map::Links","header::value::HeaderValue","header::name::Custom","header::map::Cursor","header::name::MaybeLower","method::Method","header::map::ExtraValue","std::boxed::Box<byte_str::ByteStr>","header::map::Link"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.extend(p1);
+<header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend(p0, p1);
+crate::<header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend(p0, p1);
+<header::map::HeaderMap<T>>::extend(p0, p1);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend":{"I":["std::iter::IntoIterator","std::marker::Sized"],"T":["std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","convert::HttpTryFrom"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::IterMut":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::ValueIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Send","std::marker::Sync"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::Eq","std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"request::Request":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"response::Response":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>":{},"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["header::map::ValuesMut","header::map::IntoIter","header::map::IterMut","header::map::Iter","header::map::Values","header::map::Keys","header::map::ValueDrain","header::map::ValueIter","header::map::ValueIterMut","<&mut I as std::iter::Iterator>","header::map::Drain"]},"<header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend":{"I":["header::map::OccupiedEntry","<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>","<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>","header::map::HeaderMap","header::map::GetAll"],"T":["RUG_ANY"]},"header::map::Bucket":{"T":["header::map::HashValue","version::Version","status::StatusCode","header::value::HeaderValue","header::name::HeaderName","header::name::MaybeLower","method::Method","header::map::HeaderMap","header::name::Custom","header::name::StandardHeader","uri::authority::Authority","uri::scheme::Scheme2","uri::path::PathAndQuery","header::map::Link","byte_str::ByteStr","std::clone::impls::<impl std::clone::Clone for &T>","header::map::Links","uri::scheme::Protocol","header::name::Repr","uri::Uri","header::map::Cursor","uri::scheme::Scheme","header::map::ExtraValue","header::map::Bucket"]},"header::map::Drain":{"T":["header::map::Drain","header::map::ValueDrain","header::map::ValueIterMut","<*const T as std::marker::Send>","header::map::Iter","header::map::IterMut"]},"header::map::Entry":{"T":["uri::scheme::Protocol","header::name::StandardHeader","header::map::ValueIterMut","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","header::map::Cursor","header::map::Keys","header::value::ToStrError","header::map::Values","header::name::InvalidHeaderName","header::map::HeaderMap","uri::path::PathAndQuery","header::value::InvalidHeaderValueBytes","error::Error","<&T as std::fmt::Debug>","uri::port::Port","uri::scheme::Scheme","uri::Uri","header::name::HdrName","header::map::Entry","response::Parts","uri::scheme::Scheme2","header::map::Links","header::map::IterMut","header::name::Custom","header::map::OccupiedEntry","uri::authority::Authority","uri::Parts","status::StatusCode","header::map::Drain","request::Parts","uri::InvalidUriParts","byte_str::ByteStr","header::map::GetAll","header::value::HeaderValue","uri::ErrorKind","method::Method","header::map::VacantEntry","header::name::Repr","header::value::InvalidHeaderValue","request::Builder","header::map::ValueDrain","header::map::IntoIter","header::map::HashValue","error::Never","uri::InvalidUriBytes","response::Response","header::name::HeaderName","header::map::ValueIter","request::Request","header::map::Iter","method::InvalidMethod","uri::InvalidUri","header::map::ValuesMut","uri::builder::Builder","response::Builder","extensions::Extensions","status::InvalidStatusCode","version::Version","header::map::Link","header::map::Bucket"]},"header::map::ExtraValue":{"T":["header::name::StandardHeader","uri::scheme::Protocol","header::name::MaybeLower","header::name::Repr","uri::path::PathAndQuery","std::clone::impls::<impl std::clone::Clone for *const T>","header::map::HeaderMap","status::StatusCode","uri::scheme::Scheme2","version::Version","header::map::Cursor","header::map::Link","uri::Uri","header::name::Custom","header::map::Links","byte_str::ByteStr","method::Method","header::map::ExtraValue","uri::scheme::Scheme","header::map::HashValue","uri::authority::Authority","header::name::HeaderName","header::map::Bucket","header::value::HeaderValue"]},"header::map::GetAll":{"T":["header::name::Repr","header::map::Link","header::name::StandardHeader","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>","version::Version","header::name::Custom","uri::ErrorKind","header::map::GetAll","header::map::HeaderMap","byte_str::ByteStr","header::map::Cursor","header::map::HashValue"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","header::value::HeaderValue","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["header::map::Bucket","header::value::InvalidHeaderValueBytes","uri::Uri","uri::scheme::Protocol","header::name::HdrName","version::Version","header::map::ValueDrain","header::map::ValueIterMut","header::map::Cursor","uri::builder::Builder","header::map::Values","<*mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::name::Custom","request::Builder","header::name::MaybeLower","header::map::Entry","header::name::HeaderName","header::name::Repr","header::map::VacantEntry","uri::ErrorKind","response::Builder","error::Never","error::Error","header::map::Drain","header::map::Iter","byte_str::ByteStr","uri::scheme::Scheme2","header::map::Link","status::InvalidStatusCode","header::map::IntoIter","uri::InvalidUriParts","header::map::GetAll","uri::InvalidUriBytes","uri::scheme::Scheme","method::InvalidMethod","header::map::ExtraValue","uri::InvalidUri","header::name::StandardHeader","method::Method","header::map::HashValue","uri::port::Port","status::StatusCode","response::Parts","header::map::IterMut","request::Parts","header::name::InvalidHeaderName","header::map::OccupiedEntry","header::map::ValueIter","header::map::HeaderMap","request::Request","header::map::Keys","header::map::ValuesMut","header::map::Links","response::Response","header::name::InvalidHeaderNameBytes","extensions::Extensions","header::value::HeaderValue","uri::authority::Authority","header::value::ToStrError","header::value::InvalidHeaderValue","uri::Parts"]},"header::map::Iter":{"T":["header::map::ValueIterMut","<*mut T as std::marker::Sync>","header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueIterMut","<*mut T as std::fmt::Debug>","header::map::Drain","header::map::ValueDrain"]},"header::map::Keys":{"T":["header::name::HeaderName","header::map::Link","header::value::ToStrError","header::name::HdrName","uri::port::Port","error::Never","response::Builder","request::Request","header::value::InvalidHeaderValueBytes","header::map::OccupiedEntry","header::map::GetAll","header::value::HeaderValue","header::map::VacantEntry","uri::ErrorKind","status::InvalidStatusCode","header::map::Values","method::Method","response::Response","header::map::ValueDrain","header::name::InvalidHeaderName","header::map::Keys","uri::builder::Builder","uri::scheme::Protocol","request::Builder","extensions::Extensions","header::map::HashValue","method::InvalidMethod","byte_str::ByteStr","header::value::InvalidHeaderValue","uri::Parts","header::map::Drain","response::Parts","uri::authority::Authority","header::map::IterMut","header::map::ExtraValue","uri::InvalidUri","<&T as std::fmt::Debug>","header::map::ValueIterMut","uri::Uri","header::name::StandardHeader","header::name::MaybeLower","header::map::Bucket","status::StatusCode","version::Version","header::map::ValuesMut","header::map::Iter","uri::InvalidUriBytes","header::map::Links","uri::path::PathAndQuery","request::Parts","header::map::Cursor","error::Error","header::name::InvalidHeaderNameBytes","uri::InvalidUriParts","header::map::ValueIter","header::map::IntoIter","header::name::Custom","header::name::Repr","uri::scheme::Scheme2","uri::scheme::Scheme","header::map::HeaderMap","header::map::Entry"]},"header::map::OccupiedEntry":{"T":["extensions::Extensions","uri::scheme::Protocol","method::Method","header::map::Entry","header::map::ValueIter","response::Builder","response::Response","response::Parts","uri::Uri","uri::InvalidUriParts","uri::ErrorKind","header::map::Cursor","header::map::IntoIter","uri::InvalidUriBytes","header::name::MaybeLower","header::map::Keys","request::Request","status::StatusCode","uri::path::PathAndQuery","header::name::InvalidHeaderName","uri::port::Port","header::map::ValueIterMut","uri::authority::Authority","header::value::ToStrError","header::map::HeaderMap","header::name::Repr","request::Builder","header::map::IterMut","error::Never","header::map::Iter","method::InvalidMethod","header::value::HeaderValue","header::name::HdrName","header::map::Drain","header::map::Link","header::map::OccupiedEntry","header::map::Bucket","<&mut T as std::fmt::Debug>","uri::InvalidUri","status::InvalidStatusCode","error::Error","header::map::HashValue","header::map::GetAll","uri::scheme::Scheme2","header::map::ValuesMut","header::name::StandardHeader","uri::builder::Builder","header::map::ValueDrain","header::value::InvalidHeaderValue","byte_str::ByteStr","header::map::VacantEntry","header::map::Links","request::Parts","header::map::Values","header::name::HeaderName","uri::Parts","header::name::Custom","uri::scheme::Scheme","version::Version","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","header::value::InvalidHeaderValueBytes"]},"header::map::VacantEntry":{"T":["uri::scheme::Scheme","header::map::IntoIter","header::map::Iter","status::InvalidStatusCode","header::map::ValueDrain","header::name::HeaderName","uri::InvalidUriParts","response::Builder","uri::authority::Authority","byte_str::ByteStr","response::Parts","uri::ErrorKind","header::map::HeaderMap","header::map::VacantEntry","header::value::InvalidHeaderValue","extensions::Extensions","header::name::Custom","header::map::Entry","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","version::Version","header::map::Cursor","<*mut T as std::fmt::Debug>","header::map::GetAll","uri::path::PathAndQuery","header::map::ExtraValue","uri::Uri","method::Method","method::InvalidMethod","request::Builder","header::value::ToStrError","uri::scheme::Scheme2","uri::InvalidUriBytes","error::Never","error::Error","request::Request","uri::builder::Builder","header::map::Bucket","uri::Parts","header::map::OccupiedEntry","header::value::HeaderValue","uri::InvalidUri","header::name::HdrName","header::map::Link","header::map::ValuesMut","uri::scheme::Protocol","request::Parts","header::name::Repr","status::StatusCode","header::map::ValueIter","header::map::Links","header::map::IterMut","header::map::Drain","header::name::InvalidHeaderName","header::value::InvalidHeaderValueBytes","header::map::HashValue","header::map::Values","header::map::ValueIterMut","header::map::Keys","response::Response","header::name::StandardHeader","uri::port::Port"]},"header::map::ValueDrain":{"T":["header::map::Drain","header::map::ValueDrain","header::map::IterMut","header::map::ValueIterMut","<*const T as std::marker::Send>","header::map::Iter"]},"header::map::ValueIter":{"T":["header::map::Links","uri::authority::Authority","header::map::HeaderMap","header::map::VacantEntry","header::map::Values","uri::scheme::Protocol","uri::scheme::Scheme","header::map::ValuesMut","header::value::InvalidHeaderValue","uri::builder::Builder","header::value::ToStrError","header::map::IterMut","header::map::Bucket","version::Version","status::InvalidStatusCode","header::map::Iter","header::map::Keys","header::map::Cursor","uri::ErrorKind","header::name::InvalidHeaderNameBytes","header::map::GetAll","uri::InvalidUriParts","header::map::ExtraValue","response::Parts","header::value::InvalidHeaderValueBytes","method::InvalidMethod","error::Never","request::Builder","header::map::Link","request::Parts","header::map::ValueIterMut","header::name::StandardHeader","header::map::HashValue","error::Error","<&mut T as std::fmt::Debug>","uri::port::Port","uri::Uri","response::Builder","extensions::Extensions","header::map::Drain","header::map::IntoIter","header::name::HdrName","response::Response","header::name::MaybeLower","header::map::ValueDrain","uri::InvalidUriBytes","header::map::OccupiedEntry","uri::path::PathAndQuery","header::name::InvalidHeaderName","uri::Parts","request::Request","header::map::ValueIter","status::StatusCode","uri::scheme::Scheme2","byte_str::ByteStr","header::name::Repr","header::map::Entry","uri::InvalidUri","header::name::HeaderName","header::value::HeaderValue","method::Method","header::name::Custom"]},"header::map::ValueIterMut":{"T":["header::map::Iter","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::ValueIterMut","header::map::Drain"]},"header::map::Values":{"T":["header::map::ValueIter","response::Parts","uri::path::PathAndQuery","uri::InvalidUriParts","header::value::ToStrError","uri::ErrorKind","header::map::HeaderMap","header::map::Bucket","request::Parts","uri::scheme::Scheme","header::map::IterMut","extensions::Extensions","header::name::HeaderName","header::map::VacantEntry","uri::scheme::Scheme2","header::map::Link","method::Method","uri::InvalidUriBytes","header::name::Repr","header::map::ValueDrain","header::name::MaybeLower","header::name::InvalidHeaderNameBytes","uri::scheme::Protocol","header::value::InvalidHeaderValue","uri::port::Port","byte_str::ByteStr","header::map::Iter","version::Version","header::map::Keys","uri::Uri","header::map::IntoIter","header::map::Drain","header::name::StandardHeader","header::map::GetAll","header::name::HdrName","header::map::ValuesMut","request::Builder","header::map::OccupiedEntry","uri::builder::Builder","uri::Parts","header::map::Links","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","header::value::HeaderValue","header::name::Custom","header::map::ExtraValue","uri::authority::Authority","uri::InvalidUri","response::Response","method::InvalidMethod","error::Never","status::InvalidStatusCode","<&mut T as std::fmt::Debug>","request::Request","status::StatusCode","header::map::Values","response::Builder","header::map::HashValue","header::map::Entry","error::Error","header::map::Cursor","header::map::ValueIterMut"]},"header::map::ValuesMut":{"T":["header::name::InvalidHeaderName","header::map::Link","response::Builder","header::name::MaybeLower","uri::path::PathAndQuery","status::StatusCode","response::Response","header::value::HeaderValue","header::value::ToStrError","header::map::Entry","uri::builder::Builder","header::map::Drain","request::Request","request::Parts","uri::scheme::Scheme","uri::InvalidUri","uri::scheme::Protocol","uri::InvalidUriBytes","request::Builder","header::map::Bucket","status::InvalidStatusCode","header::map::IterMut","error::Error","version::Version","header::map::ValueIter","header::name::HdrName","header::map::ValueIterMut","header::map::Cursor","header::map::Values","extensions::Extensions","header::map::HashValue","header::value::InvalidHeaderValue","uri::Uri","header::name::Repr","header::map::Keys","error::Never","method::Method","header::map::HeaderMap","header::map::OccupiedEntry","byte_str::ByteStr","uri::Parts","header::map::VacantEntry","header::map::GetAll","header::map::ExtraValue","header::name::Custom","uri::InvalidUriParts","header::map::IntoIter","uri::ErrorKind","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme2","header::map::Links","header::name::HeaderName","<&mut T as std::fmt::Debug>","response::Parts","uri::authority::Authority","uri::port::Port","header::map::ValueDrain","header::map::ValuesMut","header::name::StandardHeader","header::map::Iter","method::InvalidMethod","header::name::InvalidHeaderNameBytes"]},"header::name::Repr":{"T":["header::name::Custom","std::hash::impls::<impl std::hash::Hash for *mut T>","header::name::Repr","byte_str::ByteStr","version::Version","header::name::StandardHeader"]},"request::Request":{"T":["request::Request","header::map::HeaderMap","version::Version","response::Response","status::StatusCode","uri::Uri","response::Builder","uri::Parts","extensions::Extensions","request::Builder","method::Method","uri::builder::Builder"]},"response::Response":{"T":["uri::Uri","uri::builder::Builder","method::Method","extensions::Extensions","status::StatusCode","header::map::HeaderMap","version::Version","response::Response","response::Builder","request::Builder","uri::Parts","request::Request"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["method::Method","uri::scheme::Scheme","header::value::HeaderValue","<&mut T as std::convert::AsRef<U>>","uri::port::Port","uri::authority::Authority"]},"uri::scheme::Scheme2":{"T":["header::map::ExtraValue","header::map::Links","std::boxed::Box<byte_str::ByteStr>","header::map::Link","status::StatusCode","header::map::Cursor","method::Method","header::name::StandardHeader","uri::Uri","std::clone::impls::<impl std::clone::Clone for *const T>","header::map::HashValue","uri::scheme::Protocol","header::name::MaybeLower","uri::authority::Authority","header::value::HeaderValue","header::name::HeaderName","header::name::Custom","byte_str::ByteStr","uri::path::PathAndQuery","header::map::HeaderMap","header::map::Bucket","version::Version","uri::scheme::Scheme2","header::name::Repr","uri::scheme::Scheme"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.extend(p1);
+<header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend(p0, p1);
+crate::<header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend(p0, p1);
+<header::map::HeaderMap<T>>::extend(p0, p1);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::cmp::PartialEq>::eq
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as std::cmp::PartialEq>::eq":{"T":["std::marker::Sized","std::cmp::PartialEq"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::name::Repr":{"T":["std::hash::Hash","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::map::HeaderMap<T> as std::cmp::PartialEq>::eq":{"T":["version::Version","header::map::HeaderMap","version::Http","header::name::StandardHeader","uri::ErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::Link","header::map::HashValue","byte_str::ByteStr","method::Inner","header::name::Repr","header::map::Cursor","header::map::GetAll","header::name::Custom"]},"header::map::GetAll":{"T":["header::map::Cursor","header::map::HeaderMap","version::Version","header::map::Link","header::name::StandardHeader","byte_str::ByteStr","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::map::HashValue","header::name::Custom","header::map::GetAll","header::name::Repr","uri::ErrorKind"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::Custom","header::name::Repr","header::name::StandardHeader","std::hash::impls::<impl std::hash::Hash for *const T>","version::Version"]},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.eq(p1);
+<header::map::HeaderMap<T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::map::HeaderMap<T> as std::cmp::PartialEq>::eq(p0, p1);
+<header::map::HeaderMap<T>>::eq(p0, p1);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::HeaderMap<T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Send","std::marker::Sync"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::fmt::Debug","std::cmp::Eq","std::hash::Hash","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"request::Request":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"response::Response":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<header::map::HeaderMap<T> as std::fmt::Debug>::fmt":{"T":["method::InvalidMethod","error::Never","uri::InvalidUri","uri::port::Port","uri::InvalidUriBytes","<&T as std::fmt::Debug>","header::map::IntoIter","header::name::InvalidHeaderNameBytes","header::value::HeaderValue","header::name::Custom","header::name::MaybeLower","header::map::Link","uri::authority::Authority","header::map::HeaderMap","extensions::Extensions","header::value::InvalidHeaderValue","version::Version","uri::InvalidUriParts","byte_str::ByteStr","<&mut T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","header::map::OccupiedEntry","header::map::Cursor","header::map::ValueDrain","uri::builder::Builder","method::Method","header::map::HashValue","header::map::ValueIterMut","header::map::Values","header::map::IterMut","header::map::Links","uri::scheme::Scheme2","status::StatusCode","header::map::ExtraValue","error::Error","uri::scheme::Protocol","header::map::VacantEntry","header::map::Bucket","header::map::GetAll","header::map::Keys","response::Parts","header::name::Repr","header::value::ToStrError","response::Response","header::map::Iter","header::name::HdrName","uri::ErrorKind","request::Request","header::name::HeaderName","uri::path::PathAndQuery","uri::Parts","header::name::StandardHeader","header::map::Drain","status::InvalidStatusCode","header::name::InvalidHeaderName","header::map::ValueIter","response::Builder","request::Builder","header::map::ValuesMut","request::Parts","uri::Uri","header::map::Entry","uri::scheme::Scheme"]},"header::map::Bucket":{"T":["header::map::HashValue","header::map::Bucket","version::Version","status::StatusCode","uri::Uri","byte_str::ByteStr","header::name::HeaderName","uri::path::PathAndQuery","header::map::HeaderMap","header::map::Cursor","uri::authority::Authority","header::value::HeaderValue","uri::scheme::Scheme2","header::name::Repr","method::Method","header::name::MaybeLower","header::map::ExtraValue","header::map::Links","header::name::Custom","header::map::Link","uri::scheme::Scheme","header::name::StandardHeader","<&T as std::fmt::Debug>","uri::scheme::Protocol"]},"header::map::Drain":{"T":["header::map::IterMut","header::map::ValueIterMut","header::map::Drain","header::map::Iter","header::map::ValueDrain","<*mut T as std::marker::Sync>"]},"header::map::Entry":{"T":["header::name::HeaderName","header::map::ValueIter","uri::InvalidUri","uri::path::PathAndQuery","uri::port::Port","uri::scheme::Protocol","uri::ErrorKind","header::map::ValuesMut","header::name::Repr","status::InvalidStatusCode","extensions::Extensions","header::map::Values","header::map::Keys","header::map::ValueIterMut","header::map::Entry","header::name::InvalidHeaderName","method::Method","header::name::Custom","uri::scheme::Scheme","header::value::InvalidHeaderValueBytes","header::name::MaybeLower","header::map::Link","uri::authority::Authority","uri::InvalidUriBytes","header::map::HeaderMap","header::map::IterMut","uri::builder::Builder","header::map::Drain","request::Parts","error::Never","header::map::OccupiedEntry","error::Error","response::Response","header::map::GetAll","header::value::InvalidHeaderValue","uri::scheme::Scheme2","<*mut T as std::fmt::Debug>","header::map::Links","header::map::ValueDrain","header::map::Cursor","header::map::ExtraValue","response::Builder","header::map::Iter","request::Builder","header::name::HdrName","uri::InvalidUriParts","status::StatusCode","header::name::StandardHeader","header::map::VacantEntry","uri::Uri","version::Version","byte_str::ByteStr","header::map::HashValue","header::value::HeaderValue","response::Parts","method::InvalidMethod","header::map::Bucket","header::name::InvalidHeaderNameBytes","request::Request","header::value::ToStrError","uri::Parts","header::map::IntoIter"]},"header::map::ExtraValue":{"T":["uri::Uri","std::clone::impls::<impl std::clone::Clone for *mut T>","status::StatusCode","header::map::ExtraValue","version::Version","uri::authority::Authority","header::value::HeaderValue","header::map::Link","header::name::StandardHeader","header::name::Custom","header::name::HeaderName","uri::scheme::Scheme2","uri::scheme::Protocol","method::Method","uri::scheme::Scheme","header::name::Repr","uri::path::PathAndQuery","header::map::Links","header::map::Bucket","header::map::Cursor","header::map::HeaderMap","header::map::HashValue","byte_str::ByteStr","header::name::MaybeLower"]},"header::map::GetAll":{"T":["header::name::Custom","header::map::Cursor","<*const T as std::fmt::Debug>","byte_str::ByteStr","header::map::GetAll","header::map::Link","header::map::HeaderMap","header::name::Repr","header::map::HashValue","version::Version","uri::ErrorKind","header::name::StandardHeader"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","header::value::HeaderValue","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr"]},"header::map::IntoIter":{"T":["header::map::Keys","header::map::OccupiedEntry","extensions::Extensions","header::value::ToStrError","header::name::Custom","header::map::HashValue","uri::Parts","header::name::StandardHeader","request::Request","response::Builder","<*mut T as std::fmt::Debug>","method::Method","header::map::GetAll","uri::InvalidUriParts","header::name::HeaderName","header::map::Iter","header::map::ValueIterMut","header::value::HeaderValue","uri::scheme::Scheme","header::map::Links","uri::InvalidUriBytes","header::map::ExtraValue","request::Parts","header::map::ValueIter","header::name::InvalidHeaderNameBytes","status::InvalidStatusCode","header::map::ValuesMut","header::map::IntoIter","byte_str::ByteStr","header::map::Bucket","header::map::Entry","uri::path::PathAndQuery","header::map::Cursor","version::Version","response::Parts","header::value::InvalidHeaderValueBytes","request::Builder","header::map::Drain","header::map::Link","uri::scheme::Scheme2","error::Never","uri::scheme::Protocol","status::StatusCode","error::Error","header::map::IterMut","uri::ErrorKind","header::name::Repr","header::name::MaybeLower","header::map::ValueDrain","method::InvalidMethod","uri::port::Port","header::map::HeaderMap","header::name::InvalidHeaderName","uri::authority::Authority","header::map::Values","uri::Uri","header::value::InvalidHeaderValue","uri::InvalidUri","header::name::HdrName","response::Response","header::map::VacantEntry","uri::builder::Builder"]},"header::map::Iter":{"T":["header::map::Drain","<*mut T as std::fmt::Debug>","header::map::Iter","header::map::ValueIterMut","header::map::ValueDrain","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::ValueDrain","header::map::Drain","header::map::IterMut","<*mut T as std::marker::Sync>","header::map::Iter","header::map::ValueIterMut"]},"header::map::Keys":{"T":["uri::InvalidUriParts","uri::builder::Builder","extensions::Extensions","header::name::Repr","header::map::ValueIterMut","header::map::Links","header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::VacantEntry","request::Request","method::Method","header::map::Cursor","request::Parts","header::map::Keys","error::Never","header::name::MaybeLower","uri::scheme::Scheme2","status::StatusCode","method::InvalidMethod","error::Error","header::map::ValueIter","response::Response","header::map::Link","header::map::HashValue","header::name::InvalidHeaderName","header::map::IterMut","header::map::ExtraValue","response::Parts","header::map::ValuesMut","header::map::OccupiedEntry","version::Version","header::name::HeaderName","header::value::InvalidHeaderValueBytes","header::map::Iter","uri::Uri","uri::authority::Authority","header::map::HeaderMap","header::name::HdrName","header::name::StandardHeader","uri::path::PathAndQuery","header::map::Bucket","response::Builder","uri::scheme::Protocol","uri::ErrorKind","header::value::InvalidHeaderValue","uri::InvalidUri","uri::scheme::Scheme","uri::InvalidUriBytes","header::map::Drain","status::InvalidStatusCode","uri::Parts","header::name::InvalidHeaderNameBytes","header::map::Entry","request::Builder","header::map::GetAll","header::value::HeaderValue","header::map::IntoIter","header::map::Values","uri::port::Port","header::name::Custom","byte_str::ByteStr","header::value::ToStrError"]},"header::map::OccupiedEntry":{"T":["header::name::StandardHeader","uri::scheme::Scheme2","<*const T as std::fmt::Debug>","header::name::InvalidHeaderNameBytes","header::map::ExtraValue","header::map::ValueIterMut","header::map::ValueIter","header::map::Entry","uri::authority::Authority","header::value::InvalidHeaderValueBytes","error::Error","header::value::HeaderValue","header::map::Bucket","header::map::Links","header::name::HdrName","extensions::Extensions","byte_str::ByteStr","response::Response","status::InvalidStatusCode","header::map::ValuesMut","error::Never","header::map::Cursor","status::StatusCode","header::map::Iter","header::value::ToStrError","request::Parts","header::map::Link","uri::InvalidUriParts","uri::ErrorKind","header::map::GetAll","header::map::HeaderMap","header::map::HashValue","header::map::ValueDrain","response::Parts","header::map::Keys","version::Version","uri::scheme::Protocol","uri::InvalidUriBytes","method::InvalidMethod","response::Builder","uri::InvalidUri","header::name::InvalidHeaderName","request::Request","uri::port::Port","uri::builder::Builder","header::map::IterMut","header::map::OccupiedEntry","header::map::IntoIter","uri::Uri","header::name::HeaderName","method::Method","uri::path::PathAndQuery","header::value::InvalidHeaderValue","header::name::MaybeLower","header::map::VacantEntry","header::map::Values","request::Builder","uri::scheme::Scheme","header::map::Drain","header::name::Custom","header::name::Repr","uri::Parts"]},"header::map::VacantEntry":{"T":["uri::scheme::Scheme","header::map::Cursor","uri::InvalidUriBytes","header::map::Values","byte_str::ByteStr","header::map::HashValue","request::Request","header::name::MaybeLower","uri::builder::Builder","header::map::GetAll","uri::authority::Authority","uri::path::PathAndQuery","request::Builder","extensions::Extensions","header::map::IterMut","header::map::ValuesMut","header::map::Keys","method::Method","uri::scheme::Protocol","request::Parts","response::Builder","header::map::ExtraValue","header::map::ValueIterMut","header::name::Custom","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::map::Entry","status::InvalidStatusCode","header::value::ToStrError","uri::port::Port","header::map::VacantEntry","header::map::HeaderMap","header::map::IntoIter","uri::scheme::Scheme2","header::value::InvalidHeaderValue","header::map::OccupiedEntry","uri::InvalidUri","header::name::HeaderName","header::name::InvalidHeaderName","<*const T as std::fmt::Debug>","header::name::StandardHeader","method::InvalidMethod","header::value::HeaderValue","header::name::Repr","status::StatusCode","response::Parts","uri::ErrorKind","header::name::InvalidHeaderNameBytes","version::Version","header::name::HdrName","header::map::Drain","uri::InvalidUriParts","error::Never","response::Response","header::map::Link","header::map::ValueDrain","header::map::Bucket","header::map::Links","uri::Uri","uri::Parts","error::Error","header::map::Iter"]},"header::map::ValueDrain":{"T":["<*mut T as std::marker::Sync>","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain","header::map::IterMut"]},"header::map::ValueIter":{"T":["header::map::Keys","uri::ErrorKind","header::map::Iter","header::value::ToStrError","response::Response","status::InvalidStatusCode","header::map::ValueIter","header::map::Links","header::map::OccupiedEntry","request::Builder","uri::Uri","header::name::Custom","uri::scheme::Protocol","header::map::Entry","header::map::ValueDrain","header::name::StandardHeader","header::value::InvalidHeaderValueBytes","header::map::Link","uri::InvalidUri","header::map::ExtraValue","header::map::Bucket","header::map::Drain","header::map::HeaderMap","uri::scheme::Scheme2","header::map::ValueIterMut","status::StatusCode","method::Method","header::map::IterMut","header::map::IntoIter","<&mut T as std::fmt::Debug>","uri::authority::Authority","header::value::InvalidHeaderValue","header::name::HeaderName","extensions::Extensions","version::Version","response::Builder","request::Request","header::name::Repr","header::map::HashValue","header::value::HeaderValue","header::map::ValuesMut","header::map::GetAll","header::map::Cursor","method::InvalidMethod","error::Never","header::name::InvalidHeaderName","error::Error","uri::InvalidUriBytes","header::name::HdrName","response::Parts","header::name::InvalidHeaderNameBytes","header::map::VacantEntry","header::map::Values","uri::builder::Builder","uri::port::Port","uri::InvalidUriParts","header::name::MaybeLower","byte_str::ByteStr","uri::path::PathAndQuery","uri::scheme::Scheme","request::Parts","uri::Parts"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","<*const T as std::marker::Sync>","header::map::Drain"]},"header::map::Values":{"T":["request::Builder","uri::authority::Authority","header::map::ValueIter","request::Parts","header::map::HashValue","version::Version","status::InvalidStatusCode","header::name::HeaderName","method::InvalidMethod","uri::ErrorKind","header::value::ToStrError","header::map::Values","uri::scheme::Scheme","header::name::InvalidHeaderNameBytes","uri::InvalidUriBytes","byte_str::ByteStr","header::name::HdrName","header::map::Cursor","uri::Parts","header::map::Links","response::Response","header::value::InvalidHeaderValueBytes","<*const T as std::fmt::Debug>","uri::InvalidUri","uri::builder::Builder","header::map::ExtraValue","uri::port::Port","header::name::MaybeLower","request::Request","error::Error","uri::path::PathAndQuery","uri::scheme::Scheme2","extensions::Extensions","error::Never","header::value::HeaderValue","header::map::ValueDrain","header::map::ValuesMut","header::map::VacantEntry","header::map::Entry","header::name::Custom","response::Builder","header::map::IterMut","header::map::Bucket","status::StatusCode","header::map::GetAll","header::name::Repr","response::Parts","uri::scheme::Protocol","header::map::Drain","header::name::InvalidHeaderName","header::map::Keys","method::Method","header::value::InvalidHeaderValue","header::map::ValueIterMut","header::map::IntoIter","uri::InvalidUriParts","header::map::Iter","header::map::Link","header::map::HeaderMap","uri::Uri","header::name::StandardHeader","header::map::OccupiedEntry"]},"header::map::ValuesMut":{"T":["header::map::ExtraValue","error::Error","header::name::InvalidHeaderName","uri::builder::Builder","header::value::ToStrError","method::InvalidMethod","uri::Parts","header::map::ValueIterMut","response::Parts","request::Builder","uri::InvalidUriBytes","uri::scheme::Protocol","uri::authority::Authority","header::map::OccupiedEntry","header::name::InvalidHeaderNameBytes","status::InvalidStatusCode","header::map::GetAll","uri::scheme::Scheme2","uri::scheme::Scheme","header::map::ValueIter","request::Request","error::Never","status::StatusCode","header::map::HashValue","header::map::Values","header::name::HdrName","header::name::StandardHeader","header::map::ValuesMut","extensions::Extensions","header::map::Keys","uri::port::Port","header::map::Iter","header::map::Entry","<*const T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::VacantEntry","request::Parts","header::value::InvalidHeaderValue","header::map::Links","header::name::Repr","header::name::MaybeLower","header::map::Bucket","header::map::Cursor","response::Builder","header::map::IntoIter","header::map::HeaderMap","uri::InvalidUriParts","header::value::HeaderValue","header::map::Link","byte_str::ByteStr","header::map::Drain","uri::InvalidUri","response::Response","header::name::Custom","method::Method","version::Version","uri::Uri","header::map::ValueDrain","header::name::HeaderName","header::map::IterMut","header::value::InvalidHeaderValueBytes","uri::ErrorKind"]},"header::name::Repr":{"T":["header::name::Custom","byte_str::ByteStr","header::name::StandardHeader","header::name::Repr","version::Version","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"request::Request":{"T":["uri::builder::Builder","extensions::Extensions","request::Request","version::Version","request::Builder","uri::Uri","uri::Parts","header::map::HeaderMap","status::StatusCode","method::Method","response::Builder","response::Response"]},"response::Response":{"T":["uri::Parts","request::Request","header::map::HeaderMap","extensions::Extensions","response::Response","uri::Uri","status::StatusCode","uri::builder::Builder","response::Builder","method::Method","request::Builder","version::Version"]},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::scheme::Scheme","uri::authority::Authority","uri::port::Port","method::Method","header::value::HeaderValue","<&mut T as std::fmt::Debug>"]},"uri::scheme::Scheme2":{"T":["method::Method","header::map::Cursor","uri::path::PathAndQuery","header::name::MaybeLower","status::StatusCode","uri::scheme::Protocol","uri::authority::Authority","header::value::HeaderValue","header::map::HashValue","header::name::Custom","version::Version","header::map::Link","<&T as std::fmt::Debug>","uri::Uri","header::map::Bucket","header::name::StandardHeader","header::map::ExtraValue","header::name::HeaderName","std::boxed::Box<byte_str::ByteStr>","uri::scheme::Scheme","header::name::Repr","header::map::Links","header::map::HeaderMap","byte_str::ByteStr","uri::scheme::Scheme2"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::map::HeaderMap<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::map::HeaderMap<T> as std::fmt::Debug>::fmt(p0, p1);
+<header::map::HeaderMap<T>>::fmt(p0, p1);
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::default::Default>::default
deps:{"<header::map::HeaderMap<T> as std::default::Default>::default":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::HeaderMap<T> as std::default::Default>::default":{"T":["RUG_ANY"]}}
+<header::map::HeaderMap<T> as std::default::Default>::default();
+crate::<header::map::HeaderMap<T> as std::default::Default>::default();
+<header::map::HeaderMap<T>>::default();
-----------------
src/header/map.rs <header::map::HeaderMap<T> as std::ops::Index<K>>::index
'a
deps:{"<header::map::HeaderMap<T> as std::ops::Index<K>>::index":{"K":["header::map::as_header_name::AsHeaderName","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"<header::map::HeaderMap<T> as std::ops::Index<K>>::index":{"K":["std::string::String","header::name::HeaderName"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // K
+p0.index(p1);
+<header::map::HeaderMap<T> as std::ops::Index<K>>::index(p0, p1);
+crate::<header::map::HeaderMap<T> as std::ops::Index<K>>::index(p0, p1);
+<header::map::HeaderMap<T>>::index(p0, p1);
-----------------
src/header/map.rs <header::map::Iter<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::Iter<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Iter<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Iter<'a, T>
+p0.next();
+<header::map::Iter<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::Iter<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::Iter<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::Iter<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::Iter<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Iter<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Iter<'a, T>
+p0.size_hint();
+<header::map::Iter<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::Iter<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::Iter<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs header::map::IterMut::<'a, T>::next_unsafe
'a
deps:{"header::map::IterMut::<'a, T>::next_unsafe":{"T":["std::marker::Sized"]}}
candidates:{"header::map::IterMut::<'a, T>::next_unsafe":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::IterMut<'a, T>
+p0.next_unsafe();
+header::map::IterMut::<'a, T>::next_unsafe(p0);
+crate::header::map::IterMut::<'a, T>::next_unsafe(p0);
+<header::map::IterMut<'a, T>>::next_unsafe(p0);
-----------------
src/header/map.rs <header::map::IterMut<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::IterMut<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::IterMut<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::IterMut<'a, T>
+p0.next();
+<header::map::IterMut<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::IterMut<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::IterMut<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::IterMut<'a, T>
+p0.size_hint();
+<header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::IterMut<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::Keys<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::Keys<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Keys<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Keys<'a, T>
+p0.next();
+<header::map::Keys<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::Keys<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::Keys<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::Keys<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::Keys<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Keys<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Keys<'a, T>
+p0.size_hint();
+<header::map::Keys<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::Keys<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::Keys<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::Values<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::Values<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Values<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Values<'a, T>
+p0.next();
+<header::map::Values<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::Values<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::Values<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::Values<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::Values<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Values<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Values<'a, T>
+p0.size_hint();
+<header::map::Values<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::Values<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::Values<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::ValuesMut<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::ValuesMut<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValuesMut<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValuesMut<'a, T>
+p0.next();
+<header::map::ValuesMut<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::ValuesMut<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::ValuesMut<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValuesMut<'a, T>
+p0.size_hint();
+<header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::ValuesMut<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::Drain<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::Drain<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Drain<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Drain<'a, T>
+p0.next();
+<header::map::Drain<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::Drain<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::Drain<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::Drain<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::Drain<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Drain<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Drain<'a, T>
+p0.size_hint();
+<header::map::Drain<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::Drain<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::Drain<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::Drain<'a, T> as std::ops::Drop>::drop
'a
deps:{"<header::map::Drain<'a, T> as std::ops::Drop>::drop":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::Drain<'a, T> as std::ops::Drop>::drop":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Drain<'a, T>
+p0.drop();
+<header::map::Drain<'a, T> as std::ops::Drop>::drop(p0);
+crate::<header::map::Drain<'a, T> as std::ops::Drop>::drop(p0);
+<header::map::Drain<'a, T>>::drop(p0);
-----------------
src/header/map.rs header::map::Entry::<'a, T>::or_insert
'a
deps:{"header::map::Entry::<'a, T>::or_insert":{"T":["std::marker::Sized"]}}
candidates:{"header::map::Entry::<'a, T>::or_insert":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::Entry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.or_insert(p1);
+header::map::Entry::<'a, T>::or_insert(p0, p1);
+crate::header::map::Entry::<'a, T>::or_insert(p0, p1);
+<header::map::Entry<'a, T>>::or_insert(p0, p1);
-----------------
src/header/map.rs header::map::Entry::<'a, T>::or_insert_with
'a
deps:{"header::map::Entry::<'a, T>::or_insert_with":{"F":["std::marker::Sized","std::ops::FnOnce"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"header::map::Entry::<'a, T>::or_insert_with":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::panic::AssertUnwindSafe<F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::Entry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.or_insert_with(p1);
+header::map::Entry::<'a, T>::or_insert_with(p0, p1);
+crate::header::map::Entry::<'a, T>::or_insert_with(p0, p1);
+<header::map::Entry<'a, T>>::or_insert_with(p0, p1);
-----------------
src/header/map.rs header::map::Entry::<'a, T>::key
'a
deps:{"header::map::Entry::<'a, T>::key":{"T":["std::marker::Sized"]}}
candidates:{"header::map::Entry::<'a, T>::key":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Entry<'a, T>
+p0.key();
+header::map::Entry::<'a, T>::key(p0);
+crate::header::map::Entry::<'a, T>::key(p0);
+<header::map::Entry<'a, T>>::key(p0);
-----------------
src/header/map.rs header::map::VacantEntry::<'a, T>::key
'a
deps:{"header::map::VacantEntry::<'a, T>::key":{"T":["std::marker::Sized"]}}
candidates:{"header::map::VacantEntry::<'a, T>::key":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::VacantEntry<'a, T>
+p0.key();
+header::map::VacantEntry::<'a, T>::key(p0);
+crate::header::map::VacantEntry::<'a, T>::key(p0);
+<header::map::VacantEntry<'a, T>>::key(p0);
-----------------
src/header/map.rs header::map::VacantEntry::<'a, T>::into_key
'a
deps:{"header::map::VacantEntry::<'a, T>::into_key":{"T":["std::marker::Sized"]}}
candidates:{"header::map::VacantEntry::<'a, T>::into_key":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::VacantEntry<'a, T>
+p0.into_key();
+header::map::VacantEntry::<'a, T>::into_key(p0);
+crate::header::map::VacantEntry::<'a, T>::into_key(p0);
+<header::map::VacantEntry<'a, T>>::into_key(p0);
-----------------
src/header/map.rs header::map::VacantEntry::<'a, T>::insert
'a
deps:{"header::map::VacantEntry::<'a, T>::insert":{"T":["std::marker::Sized"]}}
candidates:{"header::map::VacantEntry::<'a, T>::insert":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::VacantEntry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1);
+header::map::VacantEntry::<'a, T>::insert(p0, p1);
+crate::header::map::VacantEntry::<'a, T>::insert(p0, p1);
+<header::map::VacantEntry<'a, T>>::insert(p0, p1);
-----------------
src/header/map.rs header::map::VacantEntry::<'a, T>::insert_entry
'a
deps:{"header::map::VacantEntry::<'a, T>::insert_entry":{"T":["std::marker::Sized"]}}
candidates:{"header::map::VacantEntry::<'a, T>::insert_entry":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::VacantEntry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.insert_entry(p1);
+header::map::VacantEntry::<'a, T>::insert_entry(p0, p1);
+crate::header::map::VacantEntry::<'a, T>::insert_entry(p0, p1);
+<header::map::VacantEntry<'a, T>>::insert_entry(p0, p1);
-----------------
src/header/map.rs header::map::GetAll::<'a, T>::iter
'a
deps:{"header::map::GetAll::<'a, T>::iter":{"T":["std::marker::Sized"]}}
candidates:{"header::map::GetAll::<'a, T>::iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
+p0.iter();
+header::map::GetAll::<'a, T>::iter(p0);
+crate::header::map::GetAll::<'a, T>::iter(p0);
+<header::map::GetAll<'a, T>>::iter(p0);
-----------------
src/header/map.rs <header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq
'a
deps:{"<header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq":{"T":["std::marker::Sized","std::cmp::PartialEq"]},"header::map::GetAll":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::clone::Clone","convert::HttpTryFrom","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::hash::Hash"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq":{"T":["header::map::HashValue","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::HeaderMap","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","uri::ErrorKind","header::map::Link","version::Http","header::name::Custom","header::name::Repr","version::Version","header::map::GetAll","method::Inner","byte_str::ByteStr","header::name::StandardHeader","header::map::Cursor"]},"header::map::GetAll":{"T":["header::map::Cursor","header::map::GetAll","header::name::StandardHeader","version::Version","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::HashValue","header::name::Custom","header::map::HeaderMap","byte_str::ByteStr","uri::ErrorKind","header::map::Link","header::name::Repr"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","header::value::HeaderValue"]},"header::name::Repr":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","header::name::Custom","header::name::Repr","version::Version","header::name::StandardHeader","byte_str::ByteStr"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
+p0.eq(p1);
+<header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+<header::map::GetAll<'a, T>>::eq(p0, p1);
-----------------
src/header/map.rs <header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
+p0.into_iter();
+<header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<header::map::GetAll<'a, T>>::into_iter(p0);
-----------------
src/header/map.rs <&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter
'a,'b
deps:{"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::GetAll<'a, T>
+p0.into_iter();
+<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'b header::map::GetAll<'a, T>>::into_iter(p0);
-----------------
src/header/map.rs <header::map::ValueIter<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::ValueIter<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueIter<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueIter<'a, T>
+p0.next();
+<header::map::ValueIter<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::ValueIter<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::ValueIter<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValueIter<'a, T>
+p0.size_hint();
+<header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::ValueIter<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueIter<'a, T>
+p0.next_back();
+<header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<header::map::ValueIter<'a, T>>::next_back(p0);
-----------------
src/header/map.rs <header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueIterMut<'a, T>
+p0.next();
+<header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::ValueIterMut<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueIterMut<'a, T>
+p0.next_back();
+<header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<header::map::ValueIterMut<'a, T>>::next_back(p0);
-----------------
src/header/map.rs <header::map::IntoIter<T> as std::iter::Iterator>::next
deps:{"<header::map::IntoIter<T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::IntoIter<T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::IntoIter<T>
+p0.next();
+<header::map::IntoIter<T> as std::iter::Iterator>::next(p0);
+crate::<header::map::IntoIter<T> as std::iter::Iterator>::next(p0);
+<header::map::IntoIter<T>>::next(p0);
-----------------
src/header/map.rs <header::map::IntoIter<T> as std::iter::Iterator>::size_hint
deps:{"<header::map::IntoIter<T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::IntoIter<T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::IntoIter<T>
+p0.size_hint();
+<header::map::IntoIter<T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::IntoIter<T> as std::iter::Iterator>::size_hint(p0);
+<header::map::IntoIter<T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::IntoIter<T> as std::ops::Drop>::drop
deps:{"<header::map::IntoIter<T> as std::ops::Drop>::drop":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::IntoIter<T> as std::ops::Drop>::drop":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::IntoIter<T>
+p0.drop();
+<header::map::IntoIter<T> as std::ops::Drop>::drop(p0);
+crate::<header::map::IntoIter<T> as std::ops::Drop>::drop(p0);
+<header::map::IntoIter<T>>::drop(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::key
'a
deps:{"header::map::OccupiedEntry::<'a, T>::key":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::key":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.key();
+header::map::OccupiedEntry::<'a, T>::key(p0);
+crate::header::map::OccupiedEntry::<'a, T>::key(p0);
+<header::map::OccupiedEntry<'a, T>>::key(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::get
'a
deps:{"header::map::OccupiedEntry::<'a, T>::get":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::get":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.get();
+header::map::OccupiedEntry::<'a, T>::get(p0);
+crate::header::map::OccupiedEntry::<'a, T>::get(p0);
+<header::map::OccupiedEntry<'a, T>>::get(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::get_mut
'a
deps:{"header::map::OccupiedEntry::<'a, T>::get_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::get_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.get_mut();
+header::map::OccupiedEntry::<'a, T>::get_mut(p0);
+crate::header::map::OccupiedEntry::<'a, T>::get_mut(p0);
+<header::map::OccupiedEntry<'a, T>>::get_mut(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::into_mut
'a
deps:{"header::map::OccupiedEntry::<'a, T>::into_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::into_mut":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.into_mut();
+header::map::OccupiedEntry::<'a, T>::into_mut(p0);
+crate::header::map::OccupiedEntry::<'a, T>::into_mut(p0);
+<header::map::OccupiedEntry<'a, T>>::into_mut(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::insert
'a
deps:{"header::map::OccupiedEntry::<'a, T>::insert":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::insert":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1);
+header::map::OccupiedEntry::<'a, T>::insert(p0, p1);
+crate::header::map::OccupiedEntry::<'a, T>::insert(p0, p1);
+<header::map::OccupiedEntry<'a, T>>::insert(p0, p1);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::insert_mult
'a
deps:{"header::map::OccupiedEntry::<'a, T>::insert_mult":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::insert_mult":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.insert_mult(p1);
+header::map::OccupiedEntry::<'a, T>::insert_mult(p0, p1);
+crate::header::map::OccupiedEntry::<'a, T>::insert_mult(p0, p1);
+<header::map::OccupiedEntry<'a, T>>::insert_mult(p0, p1);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::append
'a
deps:{"header::map::OccupiedEntry::<'a, T>::append":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::append":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1);
+header::map::OccupiedEntry::<'a, T>::append(p0, p1);
+crate::header::map::OccupiedEntry::<'a, T>::append(p0, p1);
+<header::map::OccupiedEntry<'a, T>>::append(p0, p1);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::remove
'a
deps:{"header::map::OccupiedEntry::<'a, T>::remove":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::remove":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.remove();
+header::map::OccupiedEntry::<'a, T>::remove(p0);
+crate::header::map::OccupiedEntry::<'a, T>::remove(p0);
+<header::map::OccupiedEntry<'a, T>>::remove(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::remove_entry
'a
deps:{"header::map::OccupiedEntry::<'a, T>::remove_entry":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::remove_entry":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.remove_entry();
+header::map::OccupiedEntry::<'a, T>::remove_entry(p0);
+crate::header::map::OccupiedEntry::<'a, T>::remove_entry(p0);
+<header::map::OccupiedEntry<'a, T>>::remove_entry(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::remove_entry_mult
'a
deps:{"header::map::OccupiedEntry::<'a, T>::remove_entry_mult":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::remove_entry_mult":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.remove_entry_mult();
+header::map::OccupiedEntry::<'a, T>::remove_entry_mult(p0);
+crate::header::map::OccupiedEntry::<'a, T>::remove_entry_mult(p0);
+<header::map::OccupiedEntry<'a, T>>::remove_entry_mult(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::iter
'a
deps:{"header::map::OccupiedEntry::<'a, T>::iter":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.iter();
+header::map::OccupiedEntry::<'a, T>::iter(p0);
+crate::header::map::OccupiedEntry::<'a, T>::iter(p0);
+<header::map::OccupiedEntry<'a, T>>::iter(p0);
-----------------
src/header/map.rs header::map::OccupiedEntry::<'a, T>::iter_mut
'a
deps:{"header::map::OccupiedEntry::<'a, T>::iter_mut":{"T":["std::marker::Sized"]}}
candidates:{"header::map::OccupiedEntry::<'a, T>::iter_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.iter_mut();
+header::map::OccupiedEntry::<'a, T>::iter_mut(p0);
+crate::header::map::OccupiedEntry::<'a, T>::iter_mut(p0);
+<header::map::OccupiedEntry<'a, T>>::iter_mut(p0);
-----------------
src/header/map.rs <header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.into_iter();
+<header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<header::map::OccupiedEntry<'a, T>>::into_iter(p0);
-----------------
src/header/map.rs <&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter
'a,'b
deps:{"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.into_iter();
+<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'b header::map::OccupiedEntry<'a, T>>::into_iter(p0);
-----------------
src/header/map.rs <&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter
'a,'b
deps:{"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::OccupiedEntry<'a, T>
+p0.into_iter();
+<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'b mut header::map::OccupiedEntry<'a, T>>::into_iter(p0);
-----------------
src/header/map.rs <header::map::ValueDrain<'a, T> as std::iter::Iterator>::next
'a
deps:{"<header::map::ValueDrain<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueDrain<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueDrain<'a, T>
+p0.next();
+<header::map::ValueDrain<'a, T> as std::iter::Iterator>::next(p0);
+crate::<header::map::ValueDrain<'a, T> as std::iter::Iterator>::next(p0);
+<header::map::ValueDrain<'a, T>>::next(p0);
-----------------
src/header/map.rs <header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::ValueDrain<'a, T>
+p0.size_hint();
+<header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint(p0);
+<header::map::ValueDrain<'a, T>>::size_hint(p0);
-----------------
src/header/map.rs <header::map::ValueDrain<'a, T> as std::ops::Drop>::drop
'a
deps:{"<header::map::ValueDrain<'a, T> as std::ops::Drop>::drop":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::ValueDrain<'a, T> as std::ops::Drop>::drop":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::ValueDrain<'a, T>
+p0.drop();
+<header::map::ValueDrain<'a, T> as std::ops::Drop>::drop(p0);
+crate::<header::map::ValueDrain<'a, T> as std::ops::Drop>::drop(p0);
+<header::map::ValueDrain<'a, T>>::drop(p0);
-----------------
src/header/map.rs header::map::Pos::new
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = MaybeUninit::uninit().assume_init(); // header::map::HashValue
+header::map::Pos::new(p0, p1);
+crate::header::map::Pos::new(p0, p1);
+<header::map::Pos>::new(p0, p1);
-----------------
src/header/map.rs header::map::Pos::none
deps:{}
candidates:{}
+header::map::Pos::none();
+crate::header::map::Pos::none();
+<header::map::Pos>::none();
-----------------
src/header/map.rs header::map::Pos::is_some
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Pos
+p0.is_some();
+header::map::Pos::is_some(p0);
+crate::header::map::Pos::is_some(p0);
+<header::map::Pos>::is_some(p0);
-----------------
src/header/map.rs header::map::Pos::is_none
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Pos
+p0.is_none();
+header::map::Pos::is_none(p0);
+crate::header::map::Pos::is_none(p0);
+<header::map::Pos>::is_none(p0);
-----------------
src/header/map.rs header::map::Pos::resolve
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Pos
+p0.resolve();
+header::map::Pos::resolve(p0);
+crate::header::map::Pos::resolve(p0);
+<header::map::Pos>::resolve(p0);
-----------------
src/header/map.rs header::map::Danger::is_red
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.is_red();
+header::map::Danger::is_red(p0);
+crate::header::map::Danger::is_red(p0);
+<header::map::Danger>::is_red(p0);
-----------------
src/header/map.rs header::map::Danger::to_red
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.to_red();
+header::map::Danger::to_red(p0);
+crate::header::map::Danger::to_red(p0);
+<header::map::Danger>::to_red(p0);
-----------------
src/header/map.rs header::map::Danger::is_yellow
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.is_yellow();
+header::map::Danger::is_yellow(p0);
+crate::header::map::Danger::is_yellow(p0);
+<header::map::Danger>::is_yellow(p0);
-----------------
src/header/map.rs header::map::Danger::to_yellow
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.to_yellow();
+header::map::Danger::to_yellow(p0);
+crate::header::map::Danger::to_yellow(p0);
+<header::map::Danger>::to_yellow(p0);
-----------------
src/header/map.rs header::map::Danger::to_green
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::map::Danger
+p0.to_green();
+header::map::Danger::to_green(p0);
+crate::header::map::Danger::to_green(p0);
+<header::map::Danger>::to_green(p0);
-----------------
src/header/map.rs <header::name::HeaderName as header::map::into_header_name::Sealed>::insert
deps:{"<header::name::HeaderName as header::map::into_header_name::Sealed>::insert":{"T":["std::marker::Sized"]}}
candidates:{"<header::name::HeaderName as header::map::into_header_name::Sealed>::insert":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1, p2);
+<header::name::HeaderName as header::map::into_header_name::Sealed>::insert(p0, p1, p2);
+crate::<header::name::HeaderName as header::map::into_header_name::Sealed>::insert(p0, p1, p2);
+<header::name::HeaderName>::insert(p0, p1, p2);
-----------------
src/header/map.rs <header::name::HeaderName as header::map::into_header_name::Sealed>::append
deps:{"<header::name::HeaderName as header::map::into_header_name::Sealed>::append":{"T":["std::marker::Sized"]}}
candidates:{"<header::name::HeaderName as header::map::into_header_name::Sealed>::append":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1, p2);
+<header::name::HeaderName as header::map::into_header_name::Sealed>::append(p0, p1, p2);
+crate::<header::name::HeaderName as header::map::into_header_name::Sealed>::append(p0, p1, p2);
+<header::name::HeaderName>::append(p0, p1, p2);
-----------------
src/header/map.rs <&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert
'a
deps:{"<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert":{"T":["std::marker::Sized"]}}
candidates:{"<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1, p2);
+<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert(p0, p1, p2);
+crate::<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert(p0, p1, p2);
+<&'a header::name::HeaderName>::insert(p0, p1, p2);
-----------------
src/header/map.rs <&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append
'a
deps:{"<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append":{"T":["std::marker::Sized"]}}
candidates:{"<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1, p2);
+<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append(p0, p1, p2);
+crate::<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append(p0, p1, p2);
+<&'a header::name::HeaderName>::append(p0, p1, p2);
-----------------
src/header/map.rs <&'static str as header::map::into_header_name::Sealed>::insert
deps:{"<&'static str as header::map::into_header_name::Sealed>::insert":{"T":["std::marker::Sized"]}}
candidates:{"<&'static str as header::map::into_header_name::Sealed>::insert":{"T":["RUG_ANY"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1, p2);
+<&'static str as header::map::into_header_name::Sealed>::insert(&p0, p1, p2);
+crate::<&'static str as header::map::into_header_name::Sealed>::insert(&p0, p1, p2);
+<&'static str>::insert(&p0, p1, p2);
-----------------
src/header/map.rs <&'static str as header::map::into_header_name::Sealed>::append
deps:{"<&'static str as header::map::into_header_name::Sealed>::append":{"T":["std::marker::Sized"]}}
candidates:{"<&'static str as header::map::into_header_name::Sealed>::append":{"T":["RUG_ANY"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.append(p1, p2);
+<&'static str as header::map::into_header_name::Sealed>::append(&p0, p1, p2);
+crate::<&'static str as header::map::into_header_name::Sealed>::append(&p0, p1, p2);
+<&'static str>::append(&p0, p1, p2);
-----------------
src/header/map.rs <header::name::HeaderName as header::map::as_header_name::Sealed>::entry
deps:{"<header::name::HeaderName as header::map::as_header_name::Sealed>::entry":{"T":["std::marker::Sized"]}}
candidates:{"<header::name::HeaderName as header::map::as_header_name::Sealed>::entry":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+<header::name::HeaderName as header::map::as_header_name::Sealed>::entry(p0, p1);
+crate::<header::name::HeaderName as header::map::as_header_name::Sealed>::entry(p0, p1);
+<header::name::HeaderName>::entry(p0, p1);
-----------------
src/header/map.rs <header::name::HeaderName as header::map::as_header_name::Sealed>::find
deps:{"<header::name::HeaderName as header::map::as_header_name::Sealed>::find":{"T":["std::marker::Sized"]}}
candidates:{"<header::name::HeaderName as header::map::as_header_name::Sealed>::find":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+<header::name::HeaderName as header::map::as_header_name::Sealed>::find(p0, p1);
+crate::<header::name::HeaderName as header::map::as_header_name::Sealed>::find(p0, p1);
+<header::name::HeaderName>::find(p0, p1);
-----------------
src/header/map.rs <header::name::HeaderName as header::map::as_header_name::Sealed>::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.as_str();
+<header::name::HeaderName as header::map::as_header_name::Sealed>::as_str(p0);
+crate::<header::name::HeaderName as header::map::as_header_name::Sealed>::as_str(p0);
+<header::name::HeaderName>::as_str(p0);
-----------------
src/header/map.rs <&'a header::name::HeaderName as header::map::as_header_name::Sealed>::entry
'a
deps:{"<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::entry":{"T":["std::marker::Sized"]}}
candidates:{"<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::entry":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::entry(p0, p1);
+crate::<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::entry(p0, p1);
+<&'a header::name::HeaderName>::entry(p0, p1);
-----------------
src/header/map.rs <&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find
'a
deps:{"<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find":{"T":["std::marker::Sized"]}}
candidates:{"<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find":{"T":["RUG_ANY"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find(p0, p1);
+crate::<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find(p0, p1);
+<&'a header::name::HeaderName>::find(p0, p1);
-----------------
src/header/map.rs <&'a header::name::HeaderName as header::map::as_header_name::Sealed>::as_str
'a
deps:{}
candidates:{}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.as_str();
+<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::as_str(p0);
+crate::<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::as_str(p0);
+<&'a header::name::HeaderName>::as_str(p0);
-----------------
src/header/map.rs <&'a str as header::map::as_header_name::Sealed>::entry
'a
deps:{"<&'a str as header::map::as_header_name::Sealed>::entry":{"T":["std::marker::Sized"]}}
candidates:{"<&'a str as header::map::as_header_name::Sealed>::entry":{"T":["RUG_ANY"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+<&'a str as header::map::as_header_name::Sealed>::entry(&p0, p1);
+crate::<&'a str as header::map::as_header_name::Sealed>::entry(&p0, p1);
+<&'a str>::entry(&p0, p1);
-----------------
src/header/map.rs <&'a str as header::map::as_header_name::Sealed>::find
'a
deps:{"<&'a str as header::map::as_header_name::Sealed>::find":{"T":["std::marker::Sized"]}}
candidates:{"<&'a str as header::map::as_header_name::Sealed>::find":{"T":["RUG_ANY"]}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+<&'a str as header::map::as_header_name::Sealed>::find(p0, p1);
+crate::<&'a str as header::map::as_header_name::Sealed>::find(p0, p1);
+<&'a str>::find(p0, p1);
-----------------
src/header/map.rs <&'a str as header::map::as_header_name::Sealed>::as_str
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.as_str();
+<&'a str as header::map::as_header_name::Sealed>::as_str(p0);
+crate::<&'a str as header::map::as_header_name::Sealed>::as_str(p0);
+<&'a str>::as_str(p0);
-----------------
src/header/map.rs <std::string::String as header::map::as_header_name::Sealed>::entry
deps:{"<std::string::String as header::map::as_header_name::Sealed>::entry":{"T":["std::marker::Sized"]}}
candidates:{"<std::string::String as header::map::as_header_name::Sealed>::entry":{"T":["RUG_ANY"]}}
let mut p0 = std::string::String::new(); // None+std::string::String
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+<std::string::String as header::map::as_header_name::Sealed>::entry(p0, p1);
+crate::<std::string::String as header::map::as_header_name::Sealed>::entry(p0, p1);
+<std::string::String>::entry(p0, p1);
-----------------
src/header/map.rs <std::string::String as header::map::as_header_name::Sealed>::find
deps:{"<std::string::String as header::map::as_header_name::Sealed>::find":{"T":["std::marker::Sized"]}}
candidates:{"<std::string::String as header::map::as_header_name::Sealed>::find":{"T":["RUG_ANY"]}}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+<std::string::String as header::map::as_header_name::Sealed>::find(p0, p1);
+crate::<std::string::String as header::map::as_header_name::Sealed>::find(p0, p1);
+<std::string::String>::find(p0, p1);
-----------------
src/header/map.rs <std::string::String as header::map::as_header_name::Sealed>::as_str
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+p0.as_str();
+<std::string::String as header::map::as_header_name::Sealed>::as_str(p0);
+crate::<std::string::String as header::map::as_header_name::Sealed>::as_str(p0);
+<std::string::String>::as_str(p0);
-----------------
src/header/map.rs <&'a std::string::String as header::map::as_header_name::Sealed>::entry
'a
deps:{"<&'a std::string::String as header::map::as_header_name::Sealed>::entry":{"T":["std::marker::Sized"]}}
candidates:{"<&'a std::string::String as header::map::as_header_name::Sealed>::entry":{"T":["RUG_ANY"]}}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.entry(p1);
+<&'a std::string::String as header::map::as_header_name::Sealed>::entry(p0, p1);
+crate::<&'a std::string::String as header::map::as_header_name::Sealed>::entry(p0, p1);
+<&'a std::string::String>::entry(p0, p1);
-----------------
src/header/map.rs <&'a std::string::String as header::map::as_header_name::Sealed>::find
'a
deps:{"<&'a std::string::String as header::map::as_header_name::Sealed>::find":{"T":["std::marker::Sized"]}}
candidates:{"<&'a std::string::String as header::map::as_header_name::Sealed>::find":{"T":["RUG_ANY"]}}
let mut p0 = & std::string::String::new(); // None+&'a std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+p0.find(p1);
+<&'a std::string::String as header::map::as_header_name::Sealed>::find(p0, p1);
+crate::<&'a std::string::String as header::map::as_header_name::Sealed>::find(p0, p1);
+<&'a std::string::String>::find(p0, p1);
-----------------
src/header/map.rs <&'a std::string::String as header::map::as_header_name::Sealed>::as_str
'a
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+&'a std::string::String
+p0.as_str();
+<&'a std::string::String as header::map::as_header_name::Sealed>::as_str(p0);
+crate::<&'a std::string::String as header::map::as_header_name::Sealed>::as_str(p0);
+<&'a std::string::String>::as_str(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.clone();
+<header::name::HeaderName as std::clone::Clone>::clone(p0);
+crate::<header::name::HeaderName as std::clone::Clone>::clone(p0);
+<header::name::HeaderName>::clone(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.assert_receiver_is_total_eq();
+<header::name::HeaderName as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::name::HeaderName as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::name::HeaderName>::assert_receiver_is_total_eq(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.eq(p1);
+<header::name::HeaderName as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::name::HeaderName as std::cmp::PartialEq>::eq(p0, p1);
+<header::name::HeaderName>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::HeaderName as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::HeaderName as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::HeaderName as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<header::name::HeaderName as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::HeaderName as std::hash::Hash>::hash(p0, p1);
+<header::name::HeaderName>::hash(p0, p1);
-----------------
src/header/name.rs <header::name::HdrName<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HdrName<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::HdrName<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::HdrName<'a> as std::fmt::Debug>::fmt(p0, p1);
+<header::name::HdrName<'a>>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::HdrName<'a> as std::hash::Hash>::hash
'a
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::HdrName<'a> as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::HdrName<'a> as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HdrName<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<header::name::HdrName<'a> as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::HdrName<'a> as std::hash::Hash>::hash(p0, p1);
+<header::name::HdrName<'a>>::hash(p0, p1);
-----------------
src/header/name.rs <header::name::Repr<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::name::Repr<T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::Drain":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","convert::HttpTryFrom","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash"]},"request::Request":{"T":["std::fmt::Debug","std::default::Default","std::marker::Sized"]},"response::Response":{"T":["std::fmt::Debug","std::default::Default","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<header::name::Repr<T> as std::fmt::Debug>::fmt":{"T":["header::map::Links","header::map::IterMut","header::name::InvalidHeaderNameBytes","<&mut T as std::fmt::Debug>","request::Request","extensions::Extensions","header::map::Cursor","uri::path::PathAndQuery","uri::ErrorKind","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme2","header::map::ValuesMut","uri::authority::Authority","status::StatusCode","header::map::ValueDrain","header::map::HashValue","header::map::Link","header::name::Custom","header::map::Drain","header::map::ValueIterMut","uri::InvalidUriBytes","header::map::IntoIter","method::Method","header::map::VacantEntry","uri::scheme::Protocol","header::name::MaybeLower","header::name::StandardHeader","header::value::ToStrError","response::Response","response::Parts","status::InvalidStatusCode","uri::port::Port","error::Error","uri::InvalidUri","header::map::Values","uri::InvalidUriParts","header::map::HeaderMap","header::map::ExtraValue","uri::scheme::Scheme","header::map::Entry","header::map::Iter","header::name::HeaderName","header::name::HdrName","header::map::OccupiedEntry","byte_str::ByteStr","request::Builder","uri::builder::Builder","header::map::Bucket","header::name::Repr","header::name::InvalidHeaderName","header::value::HeaderValue","request::Parts","header::map::ValueIter","version::Version","uri::Parts","uri::Uri","response::Builder","header::value::InvalidHeaderValue","header::map::GetAll","header::map::Keys","method::InvalidMethod","error::Never"]},"header::map::Bucket":{"T":["header::name::StandardHeader","header::value::HeaderValue","header::map::ExtraValue","header::map::Cursor","header::map::Link","header::map::Bucket","byte_str::ByteStr","version::Version","header::name::HeaderName","<*const T as std::fmt::Debug>","header::map::HashValue","uri::scheme::Scheme2","header::map::HeaderMap","header::name::MaybeLower","uri::authority::Authority","header::name::Repr","uri::Uri","header::map::Links","header::name::Custom","uri::path::PathAndQuery","uri::scheme::Scheme","status::StatusCode","method::Method","uri::scheme::Protocol"]},"header::map::Drain":{"T":["header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter","<*mut T as std::marker::Sync>","header::map::IterMut"]},"header::map::Entry":{"T":["error::Never","uri::scheme::Scheme2","header::value::InvalidHeaderValue","header::map::Link","uri::port::Port","header::name::HdrName","header::map::ValueIter","version::Version","uri::authority::Authority","header::map::Drain","header::map::HashValue","uri::InvalidUriParts","header::map::ValueDrain","status::InvalidStatusCode","header::map::Values","header::map::OccupiedEntry","uri::ErrorKind","uri::InvalidUri","header::map::ValueIterMut","method::Method","uri::Parts","header::map::VacantEntry","header::value::HeaderValue","request::Parts","response::Response","header::map::GetAll","header::name::InvalidHeaderName","header::map::Entry","uri::builder::Builder","byte_str::ByteStr","error::Error","header::name::HeaderName","uri::path::PathAndQuery","header::map::ValuesMut","extensions::Extensions","uri::InvalidUriBytes","header::map::ExtraValue","header::name::Repr","header::map::Links","response::Builder","header::value::ToStrError","header::map::IntoIter","header::map::Cursor","header::map::Keys","status::StatusCode","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme","header::map::IterMut","header::map::HeaderMap","uri::Uri","request::Builder","<*const T as std::fmt::Debug>","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","response::Parts","uri::scheme::Protocol","method::InvalidMethod","header::map::Bucket","header::name::StandardHeader","header::map::Iter","header::name::Custom","request::Request"]},"header::map::ExtraValue":{"T":["uri::Uri","header::name::Custom","byte_str::ByteStr","status::StatusCode","uri::scheme::Scheme2","version::Version","uri::authority::Authority","header::map::Link","header::map::ExtraValue","header::name::MaybeLower","uri::scheme::Protocol","header::value::HeaderValue","method::Method","header::map::Links","header::map::HashValue","header::map::Bucket","header::map::Cursor","uri::path::PathAndQuery","header::name::StandardHeader","header::map::HeaderMap","uri::scheme::Scheme","<&mut T as std::fmt::Debug>","header::name::HeaderName","header::name::Repr"]},"header::map::GetAll":{"T":["header::map::Cursor","header::map::HashValue","header::map::GetAll","header::name::StandardHeader","<*mut T as std::fmt::Debug>","header::name::Custom","version::Version","header::name::Repr","header::map::HeaderMap","header::map::Link","uri::ErrorKind","byte_str::ByteStr"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv6Addr","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["uri::builder::Builder","status::InvalidStatusCode","<*mut T as std::fmt::Debug>","header::map::HeaderMap","uri::path::PathAndQuery","uri::scheme::Scheme2","uri::authority::Authority","uri::scheme::Protocol","header::map::Links","response::Parts","response::Response","response::Builder","request::Parts","header::name::InvalidHeaderNameBytes","header::map::OccupiedEntry","header::map::IterMut","header::name::Custom","extensions::Extensions","status::StatusCode","header::name::StandardHeader","header::map::ValueIterMut","header::value::InvalidHeaderValueBytes","header::value::ToStrError","header::map::Drain","header::map::ValueIter","header::name::InvalidHeaderName","method::Method","header::map::Entry","uri::port::Port","header::map::ValuesMut","uri::Uri","header::value::HeaderValue","header::map::IntoIter","header::map::Values","header::map::ExtraValue","method::InvalidMethod","header::value::InvalidHeaderValue","error::Never","byte_str::ByteStr","header::map::Cursor","header::map::VacantEntry","header::map::Bucket","request::Request","version::Version","uri::Parts","header::map::HashValue","header::map::Link","uri::InvalidUri","header::name::MaybeLower","header::name::HeaderName","header::name::HdrName","uri::ErrorKind","header::name::Repr","uri::InvalidUriBytes","header::map::GetAll","error::Error","uri::scheme::Scheme","uri::InvalidUriParts","request::Builder","header::map::ValueDrain","header::map::Keys","header::map::Iter"]},"header::map::Iter":{"T":["header::map::Drain","header::map::Iter","header::map::IterMut","header::map::ValueIterMut","<*const T as std::fmt::Debug>","header::map::ValueDrain"]},"header::map::IterMut":{"T":["header::map::Drain","<*const T as std::fmt::Debug>","header::map::Iter","header::map::IterMut","header::map::ValueDrain","header::map::ValueIterMut"]},"header::map::Keys":{"T":["method::Method","header::map::ValueIter","header::map::Keys","header::name::HeaderName","method::InvalidMethod","uri::port::Port","header::map::Bucket","status::StatusCode","<&mut T as std::fmt::Debug>","header::map::ValuesMut","header::value::ToStrError","header::map::HashValue","header::name::Custom","header::value::InvalidHeaderValueBytes","error::Never","uri::path::PathAndQuery","byte_str::ByteStr","header::map::Link","header::name::InvalidHeaderNameBytes","header::map::ValueDrain","header::name::Repr","error::Error","status::InvalidStatusCode","header::name::HdrName","header::map::IterMut","header::map::HeaderMap","uri::InvalidUriParts","response::Response","header::map::Drain","uri::scheme::Scheme2","uri::InvalidUri","request::Builder","request::Request","header::map::OccupiedEntry","header::map::IntoIter","header::map::Links","header::name::InvalidHeaderName","version::Version","header::map::GetAll","extensions::Extensions","header::map::ExtraValue","response::Parts","uri::authority::Authority","header::value::InvalidHeaderValue","header::map::Iter","uri::Parts","uri::InvalidUriBytes","header::map::Values","header::map::VacantEntry","response::Builder","header::name::StandardHeader","header::map::Cursor","request::Parts","uri::ErrorKind","uri::Uri","header::map::ValueIterMut","header::map::Entry","uri::scheme::Scheme","uri::scheme::Protocol","uri::builder::Builder","header::value::HeaderValue","header::name::MaybeLower"]},"header::map::OccupiedEntry":{"T":["method::Method","uri::scheme::Scheme2","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","request::Parts","uri::InvalidUriParts","header::map::Bucket","header::map::Links","header::map::HeaderMap","header::map::Values","header::map::ValueIter","status::StatusCode","header::value::ToStrError","header::value::HeaderValue","header::map::ExtraValue","<*const T as std::fmt::Debug>","uri::scheme::Scheme","uri::path::PathAndQuery","uri::port::Port","request::Request","header::name::Custom","response::Parts","header::name::HdrName","header::map::Drain","header::map::VacantEntry","response::Builder","uri::Parts","error::Error","uri::InvalidUri","header::map::IterMut","header::name::InvalidHeaderNameBytes","header::map::Keys","header::name::MaybeLower","uri::Uri","uri::ErrorKind","header::value::InvalidHeaderValue","method::InvalidMethod","header::map::ValueDrain","error::Never","header::map::HashValue","header::name::StandardHeader","header::map::ValuesMut","status::InvalidStatusCode","header::map::Cursor","request::Builder","header::map::GetAll","uri::InvalidUriBytes","uri::scheme::Protocol","version::Version","uri::authority::Authority","uri::builder::Builder","header::name::Repr","header::map::Entry","header::map::ValueIterMut","response::Response","header::map::IntoIter","header::name::HeaderName","header::map::Iter","extensions::Extensions","header::map::Link","byte_str::ByteStr","header::map::OccupiedEntry"]},"header::map::VacantEntry":{"T":["uri::scheme::Scheme","header::value::ToStrError","header::map::HashValue","header::value::InvalidHeaderValue","header::map::Drain","uri::ErrorKind","status::StatusCode","header::map::IterMut","header::map::ExtraValue","header::map::Iter","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::map::ValueIterMut","header::map::ValueIter","header::name::InvalidHeaderName","header::map::Values","<&T as std::fmt::Debug>","request::Request","header::value::HeaderValue","header::map::Bucket","uri::InvalidUriParts","uri::Parts","header::map::Keys","uri::authority::Authority","header::map::OccupiedEntry","header::map::Link","header::map::VacantEntry","uri::InvalidUriBytes","uri::port::Port","status::InvalidStatusCode","header::name::MaybeLower","header::name::StandardHeader","response::Builder","uri::scheme::Protocol","method::Method","method::InvalidMethod","response::Response","header::map::ValuesMut","version::Version","uri::scheme::Scheme2","header::map::ValueDrain","header::map::Links","extensions::Extensions","header::name::HdrName","header::name::Repr","request::Parts","header::name::Custom","header::map::HeaderMap","byte_str::ByteStr","header::map::GetAll","error::Never","header::name::InvalidHeaderNameBytes","request::Builder","header::map::Cursor","uri::Uri","header::map::Entry","response::Parts","uri::InvalidUri","header::map::IntoIter","uri::builder::Builder","error::Error","header::name::HeaderName"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","<*mut T as std::marker::Send>","header::map::Drain","header::map::Iter","header::map::ValueDrain","header::map::IterMut"]},"header::map::ValueIter":{"T":["header::map::VacantEntry","header::name::Repr","uri::port::Port","header::map::Links","header::value::ToStrError","uri::Uri","header::map::OccupiedEntry","header::name::MaybeLower","uri::scheme::Scheme","header::map::IntoIter","header::map::HashValue","version::Version","header::map::Drain","uri::InvalidUriParts","error::Never","uri::ErrorKind","<*const T as std::fmt::Debug>","uri::builder::Builder","header::name::Custom","header::map::IterMut","header::map::ValueIterMut","response::Parts","error::Error","uri::authority::Authority","header::map::Values","status::StatusCode","uri::scheme::Scheme2","response::Builder","header::name::InvalidHeaderName","method::InvalidMethod","header::map::ExtraValue","header::map::ValueDrain","header::map::ValuesMut","request::Parts","header::value::HeaderValue","byte_str::ByteStr","header::map::Keys","request::Request","header::map::GetAll","header::name::HeaderName","header::map::ValueIter","request::Builder","header::name::InvalidHeaderNameBytes","uri::path::PathAndQuery","header::value::InvalidHeaderValue","header::value::InvalidHeaderValueBytes","uri::scheme::Protocol","uri::Parts","header::map::Link","uri::InvalidUri","status::InvalidStatusCode","method::Method","header::map::HeaderMap","response::Response","header::map::Iter","header::name::StandardHeader","uri::InvalidUriBytes","header::map::Entry","extensions::Extensions","header::map::Cursor","header::map::Bucket","header::name::HdrName"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter","header::map::Drain","<*const T as std::marker::Send>","header::map::IterMut"]},"header::map::Values":{"T":["extensions::Extensions","error::Never","uri::InvalidUri","uri::Uri","header::map::ExtraValue","header::map::Cursor","method::Method","header::map::Drain","header::map::HeaderMap","<&T as std::fmt::Debug>","header::map::Bucket","header::map::ValueIter","version::Version","header::map::Iter","header::name::HeaderName","header::name::MaybeLower","uri::scheme::Protocol","uri::builder::Builder","header::map::GetAll","uri::ErrorKind","response::Builder","uri::Parts","header::map::IterMut","header::map::IntoIter","uri::scheme::Scheme","header::name::InvalidHeaderName","request::Request","header::value::HeaderValue","header::map::Keys","response::Parts","header::map::Links","method::InvalidMethod","header::map::HashValue","uri::path::PathAndQuery","header::name::HdrName","header::name::InvalidHeaderNameBytes","request::Parts","byte_str::ByteStr","header::map::ValuesMut","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","request::Builder","header::value::ToStrError","status::InvalidStatusCode","header::name::Repr","header::value::InvalidHeaderValue","header::map::Entry","header::map::ValueIterMut","header::name::Custom","header::name::StandardHeader","uri::InvalidUriBytes","response::Response","header::map::ValueDrain","header::map::Values","uri::authority::Authority","header::map::OccupiedEntry","uri::InvalidUriParts","uri::scheme::Scheme2","status::StatusCode","error::Error","header::map::Link","uri::port::Port"]},"header::map::ValuesMut":{"T":["header::name::InvalidHeaderNameBytes","<*const T as std::fmt::Debug>","error::Error","uri::scheme::Protocol","status::InvalidStatusCode","header::name::StandardHeader","header::map::ValuesMut","response::Builder","header::map::ValueIterMut","request::Request","header::map::Cursor","header::map::ValueDrain","header::map::ValueIter","request::Builder","status::StatusCode","uri::path::PathAndQuery","header::map::GetAll","header::map::OccupiedEntry","header::map::ExtraValue","response::Response","uri::scheme::Scheme2","header::name::Repr","extensions::Extensions","header::map::Bucket","header::map::Links","uri::scheme::Scheme","uri::ErrorKind","error::Never","uri::Parts","header::map::Values","method::Method","uri::authority::Authority","header::name::HeaderName","header::map::IterMut","header::map::IntoIter","header::map::Keys","header::map::Entry","uri::InvalidUriBytes","header::map::Iter","byte_str::ByteStr","header::map::HeaderMap","header::map::VacantEntry","header::value::InvalidHeaderValue","header::map::Drain","header::map::HashValue","version::Version","header::name::HdrName","uri::Uri","header::name::InvalidHeaderName","response::Parts","uri::InvalidUriParts","uri::InvalidUri","uri::builder::Builder","uri::port::Port","header::value::HeaderValue","method::InvalidMethod","header::value::ToStrError","header::map::Link","header::name::Custom","request::Parts","header::name::MaybeLower","header::value::InvalidHeaderValueBytes"]},"header::name::Repr":{"T":["version::Version","<*mut T as std::fmt::Debug>","header::name::Custom","header::name::Repr","byte_str::ByteStr","header::name::StandardHeader"]},"request::Request":{"T":["method::Method","header::map::HeaderMap","response::Builder","request::Builder","uri::builder::Builder","uri::Parts","response::Response","status::StatusCode","uri::Uri","version::Version","request::Request","extensions::Extensions"]},"response::Response":{"T":["uri::Uri","version::Version","method::Method","response::Response","extensions::Extensions","header::map::HeaderMap","response::Builder","uri::Parts","status::StatusCode","request::Builder","request::Request","uri::builder::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"uri::port::Port":{"T":["header::value::HeaderValue","uri::port::Port","uri::authority::Authority","uri::scheme::Scheme","<&T as std::convert::AsRef<U>>","method::Method"]},"uri::scheme::Scheme2":{"T":["method::Method","<&T as std::fmt::Debug>","uri::scheme::Protocol","header::name::MaybeLower","version::Version","header::name::Repr","uri::scheme::Scheme","header::map::Links","header::map::HashValue","header::map::Link","header::map::Cursor","byte_str::ByteStr","header::value::HeaderValue","uri::authority::Authority","uri::Uri","header::name::StandardHeader","header::map::ExtraValue","header::map::Bucket","header::name::HeaderName","uri::scheme::Scheme2","uri::path::PathAndQuery","header::map::HeaderMap","status::StatusCode","std::boxed::Box<byte_str::ByteStr>","header::name::Custom"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::Repr<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::Repr<T> as std::fmt::Debug>::fmt(p0, p1);
+<header::name::Repr<T>>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::Repr<T> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::name::Repr<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"header::map::Bucket":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","convert::HttpTryFrom","std::cmp::Eq"]},"header::name::Repr":{"T":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<header::name::Repr<T> as std::clone::Clone>::clone":{"T":["header::map::Danger","header::name::HeaderName","version::Version","status::StatusCode","uri::authority::Authority","header::map::Pos","header::map::HashValue","header::name::MaybeLower","method::Inner","header::map::Cursor","uri::scheme::Scheme","uri::scheme::Scheme2","uri::Uri","header::map::HeaderMap","uri::scheme::Protocol","version::Http","byte_str::ByteStr","header::map::ExtraValue","header::map::Links","header::map::Bucket","header::name::Repr","std::clone::impls::<impl std::clone::Clone for &mut T>","header::value::HeaderValue","header::name::Custom","uri::path::PathAndQuery","header::map::Link","method::Method","header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for &T>"]},"header::map::Bucket":{"T":["uri::Uri","method::Method","header::map::Link","uri::authority::Authority","header::name::MaybeLower","header::map::Links","header::value::HeaderValue","header::map::Cursor","status::StatusCode","uri::scheme::Protocol","<&mut T as std::fmt::Debug>","header::map::Bucket","header::name::HeaderName","header::name::Repr","uri::scheme::Scheme2","header::name::StandardHeader","header::map::ExtraValue","uri::path::PathAndQuery","header::map::HashValue","uri::scheme::Scheme","header::map::HeaderMap","byte_str::ByteStr","version::Version","header::name::Custom"]},"header::map::ExtraValue":{"T":["header::name::Custom","uri::scheme::Protocol","header::map::Links","uri::authority::Authority","uri::Uri","uri::scheme::Scheme2","header::name::StandardHeader","status::StatusCode","header::name::MaybeLower","header::map::HeaderMap","header::map::Cursor","byte_str::ByteStr","uri::scheme::Scheme","header::name::Repr","header::map::Link","header::map::Bucket","<*mut T as std::fmt::Debug>","header::value::HeaderValue","method::Method","version::Version","uri::path::PathAndQuery","header::map::HashValue","header::name::HeaderName","header::map::ExtraValue"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::StandardHeader","header::name::Custom","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","version::Version","header::name::Repr"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::scheme::Scheme2":{"T":["uri::scheme::Protocol","std::boxed::Box<byte_str::ByteStr>","uri::Uri","byte_str::ByteStr","header::map::Link","header::map::HeaderMap","header::name::HeaderName","uri::authority::Authority","uri::path::PathAndQuery","header::name::Custom","method::Method","header::map::Links","header::map::Cursor","header::name::StandardHeader","uri::scheme::Scheme","header::name::MaybeLower","<*mut T as std::fmt::Debug>","version::Version","status::StatusCode","header::value::HeaderValue","header::map::HashValue","uri::scheme::Scheme2","header::name::Repr","header::map::Bucket","header::map::ExtraValue"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
+p0.clone();
+<header::name::Repr<T> as std::clone::Clone>::clone(p0);
+crate::<header::name::Repr<T> as std::clone::Clone>::clone(p0);
+<header::name::Repr<T>>::clone(p0);
-----------------
src/header/name.rs <header::name::Repr<T> as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{"<header::name::Repr<T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::cmp::Eq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"header::name::Repr":{"T":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<header::name::Repr<T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["version::Version","std::cmp::impls::<impl std::cmp::Eq for &mut A>","status::StatusCode","uri::scheme::Scheme","uri::authority::Authority","header::map::HeaderMap","header::name::Repr","header::map::Cursor","header::map::HashValue","uri::ErrorKind","header::name::Custom","std::cmp::impls::<impl std::cmp::Eq for &A>","method::Inner","header::value::HeaderValue","version::Http","uri::path::PathAndQuery","uri::Uri","method::Method","header::name::StandardHeader","header::map::Link","byte_str::ByteStr","header::name::HeaderName"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv4Addr","std::net::Ipv6Addr"]},"header::name::Repr":{"T":["header::name::Custom","version::Version","header::name::Repr","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","byte_str::ByteStr","header::name::StandardHeader"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
+p0.assert_receiver_is_total_eq();
+<header::name::Repr<T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::name::Repr<T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::name::Repr<T>>::assert_receiver_is_total_eq(p0);
-----------------
src/header/name.rs <header::name::Repr<T> as std::cmp::PartialEq>::eq
deps:{"<header::name::Repr<T> as std::cmp::PartialEq>::eq":{"T":["std::cmp::PartialEq","std::marker::Sized"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["convert::HttpTryFrom","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<header::name::Repr<T> as std::cmp::PartialEq>::eq":{"T":["header::map::GetAll","header::map::HeaderMap","version::Version","header::map::Link","version::Http","uri::ErrorKind","header::name::Custom","header::map::Cursor","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::HashValue","byte_str::ByteStr","method::Inner","header::name::StandardHeader","header::name::Repr"]},"header::map::GetAll":{"T":["uri::ErrorKind","header::map::HeaderMap","header::name::Custom","header::map::Link","header::map::GetAll","header::map::HashValue","header::map::Cursor","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","byte_str::ByteStr","header::name::Repr","version::Version","header::name::StandardHeader"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","header::value::HeaderValue","std::net::Ipv4Addr","std::net::Ipv6Addr"]},"header::name::Repr":{"T":["header::name::Custom","header::name::StandardHeader","byte_str::ByteStr","std::clone::impls::<impl std::clone::Clone for *const T>","version::Version","header::name::Repr"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
+p0.eq(p1);
+<header::name::Repr<T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::name::Repr<T> as std::cmp::PartialEq>::eq(p0, p1);
+<header::name::Repr<T>>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::Repr<T> as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::Repr<T> as std::hash::Hash>::hash":{"T":["std::hash::Hash","std::marker::Sized"],"__H":["std::marker::Sized","std::hash::Hasher"]},"header::name::Repr":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::hash::Hash","std::clone::Clone","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::Repr<T> as std::hash::Hash>::hash":{"T":["header::name::HdrName","version::Http","uri::scheme::Scheme","header::value::HeaderValue","version::Version","header::name::StandardHeader","byte_str::ByteStr","header::name::HeaderName","method::Method","header::name::MaybeLower","header::name::Repr","method::Inner","status::StatusCode","uri::authority::Authority","std::hash::impls::<impl std::hash::Hash for &mut T>","std::hash::impls::<impl std::hash::Hash for &T>","uri::Uri","header::name::Custom"],"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]},"header::name::Repr":{"T":["version::Version","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","byte_str::ByteStr","header::name::StandardHeader","header::name::Custom","header::name::Repr"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<header::name::Repr<T> as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::Repr<T> as std::hash::Hash>::hash(p0, p1);
+<header::name::Repr<T>>::hash(p0, p1);
-----------------
src/header/name.rs <header::name::Custom as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::Custom as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::Custom as std::fmt::Debug>::fmt(p0, p1);
+<header::name::Custom>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::Custom as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
+p0.clone();
+<header::name::Custom as std::clone::Clone>::clone(p0);
+crate::<header::name::Custom as std::clone::Clone>::clone(p0);
+<header::name::Custom>::clone(p0);
-----------------
src/header/name.rs <header::name::Custom as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
+p0.assert_receiver_is_total_eq();
+<header::name::Custom as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::name::Custom as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::name::Custom>::assert_receiver_is_total_eq(p0);
-----------------
src/header/name.rs <header::name::Custom as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
+p0.eq(p1);
+<header::name::Custom as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::name::Custom as std::cmp::PartialEq>::eq(p0, p1);
+<header::name::Custom>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::MaybeLower<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::MaybeLower<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::MaybeLower<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::MaybeLower<'a> as std::fmt::Debug>::fmt(p0, p1);
+<header::name::MaybeLower<'a>>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::MaybeLower<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::MaybeLower<'a>
+p0.clone();
+<header::name::MaybeLower<'a> as std::clone::Clone>::clone(p0);
+crate::<header::name::MaybeLower<'a> as std::clone::Clone>::clone(p0);
+<header::name::MaybeLower<'a>>::clone(p0);
-----------------
src/header/name.rs <header::name::InvalidHeaderNameBytes as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderNameBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::InvalidHeaderNameBytes as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::InvalidHeaderNameBytes as std::fmt::Debug>::fmt(p0, p1);
+<header::name::InvalidHeaderNameBytes>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::StandardHeader as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::StandardHeader as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::StandardHeader as std::fmt::Debug>::fmt(p0, p1);
+<header::name::StandardHeader>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::StandardHeader as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+p0.clone();
+<header::name::StandardHeader as std::clone::Clone>::clone(p0);
+crate::<header::name::StandardHeader as std::clone::Clone>::clone(p0);
+<header::name::StandardHeader>::clone(p0);
-----------------
src/header/name.rs <header::name::StandardHeader as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+p0.assert_receiver_is_total_eq();
+<header::name::StandardHeader as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<header::name::StandardHeader as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<header::name::StandardHeader>::assert_receiver_is_total_eq(p0);
-----------------
src/header/name.rs <header::name::StandardHeader as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+p0.eq(p1);
+<header::name::StandardHeader as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::name::StandardHeader as std::cmp::PartialEq>::eq(p0, p1);
+<header::name::StandardHeader>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::StandardHeader as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::StandardHeader as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::StandardHeader as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<header::name::StandardHeader as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::StandardHeader as std::hash::Hash>::hash(p0, p1);
+<header::name::StandardHeader>::hash(p0, p1);
-----------------
src/header/name.rs header::name::StandardHeader::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+p0.as_str();
+header::name::StandardHeader::as_str(p0);
+crate::header::name::StandardHeader::as_str(p0);
+<header::name::StandardHeader>::as_str(p0);
-----------------
src/header/name.rs <header::name::HdrName<'a> as std::convert::From<header::name::StandardHeader>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+<header::name::HdrName<'a> as std::convert::From<header::name::StandardHeader>>::from(p0);
+crate::<header::name::HdrName<'a> as std::convert::From<header::name::StandardHeader>>::from(p0);
+<header::name::HdrName<'a>>::from(p0);
-----------------
src/header/name.rs header::name::HeaderName::from_bytes
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+header::name::HeaderName::from_bytes(p0);
+crate::header::name::HeaderName::from_bytes(p0);
+<header::name::HeaderName>::from_bytes(p0);
-----------------
src/header/name.rs header::name::HeaderName::from_lowercase
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+header::name::HeaderName::from_lowercase(p0);
+crate::header::name::HeaderName::from_lowercase(p0);
+<header::name::HeaderName>::from_lowercase(p0);
-----------------
src/header/name.rs header::name::HeaderName::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+header::name::HeaderName::from_static(&p0);
+crate::header::name::HeaderName::from_static(&p0);
+<header::name::HeaderName>::from_static(&p0);
-----------------
src/header/name.rs header::name::HeaderName::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.as_str();
+header::name::HeaderName::as_str(p0);
+crate::header::name::HeaderName::as_str(p0);
+<header::name::HeaderName>::as_str(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<header::name::HeaderName as std::str::FromStr>::from_str(&p0);
+crate::<header::name::HeaderName as std::str::FromStr>::from_str(&p0);
+<header::name::HeaderName>::from_str(&p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::AsRef<str>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.as_ref();
+<header::name::HeaderName as std::convert::AsRef<str>>::as_ref(p0);
+crate::<header::name::HeaderName as std::convert::AsRef<str>>::as_ref(p0);
+<header::name::HeaderName>::as_ref(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::AsRef<[u8]>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.as_ref();
+<header::name::HeaderName as std::convert::AsRef<[u8]>>::as_ref(p0);
+crate::<header::name::HeaderName as std::convert::AsRef<[u8]>>::as_ref(p0);
+<header::name::HeaderName>::as_ref(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::borrow::Borrow<str>>::borrow
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.borrow();
+<header::name::HeaderName as std::borrow::Borrow<str>>::borrow(p0);
+crate::<header::name::HeaderName as std::borrow::Borrow<str>>::borrow(p0);
+<header::name::HeaderName>::borrow(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::HeaderName as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::HeaderName as std::fmt::Debug>::fmt(p0, p1);
+<header::name::HeaderName>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::HeaderName as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::name::HeaderName as std::fmt::Display>::fmt(p0, p1);
+crate::<header::name::HeaderName as std::fmt::Display>::fmt(p0, p1);
+<header::name::HeaderName>::fmt(p0, p1);
-----------------
src/header/name.rs header::name::InvalidHeaderName::new
deps:{}
candidates:{}
+header::name::InvalidHeaderName::new();
+crate::header::name::InvalidHeaderName::new();
+<header::name::InvalidHeaderName>::new();
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::From<&'a header::name::HeaderName>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+<header::name::HeaderName as std::convert::From<&'a header::name::HeaderName>>::from(p0);
+crate::<header::name::HeaderName as std::convert::From<&'a header::name::HeaderName>>::from(p0);
+<header::name::HeaderName>::from(p0);
-----------------
src/header/name.rs header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from":{"T":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::Repr<T>
+header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from(p0);
+crate::header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/header/name.rs header::name::<impl std::convert::From<header::name::Custom> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::Custom
+header::name::<impl std::convert::From<header::name::Custom> for bytes::Bytes>::from(p0);
+crate::header::name::<impl std::convert::From<header::name::Custom> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/header/name.rs header::name::<impl std::convert::From<header::name::HeaderName> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+header::name::<impl std::convert::From<header::name::HeaderName> for bytes::Bytes>::from(p0);
+crate::header::name::<impl std::convert::From<header::name::HeaderName> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as convert::HttpTryFrom<&'a header::name::HeaderName>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+<header::name::HeaderName as convert::HttpTryFrom<&'a header::name::HeaderName>>::try_from(p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<&'a header::name::HeaderName>>::try_from(p0);
+<header::name::HeaderName>::try_from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<header::name::HeaderName as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<header::name::HeaderName>::try_from(&p0);
-----------------
src/header/name.rs <header::name::HeaderName as convert::HttpTryFrom<&'a std::string::String>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+<header::name::HeaderName as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+<header::name::HeaderName>::try_from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<header::name::HeaderName as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<header::name::HeaderName>::try_from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<header::name::HeaderName as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<header::name::HeaderName>::try_from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::From<header::name::StandardHeader>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::StandardHeader
+<header::name::HeaderName as std::convert::From<header::name::StandardHeader>>::from(p0);
+crate::<header::name::HeaderName as std::convert::From<header::name::StandardHeader>>::from(p0);
+<header::name::HeaderName>::from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::From<header::name::Custom>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::Custom
+<header::name::HeaderName as std::convert::From<header::name::Custom>>::from(p0);
+crate::<header::name::HeaderName as std::convert::From<header::name::Custom>>::from(p0);
+<header::name::HeaderName>::from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::PartialEq<&'a header::name::HeaderName>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.eq(p1);
+<header::name::HeaderName as std::cmp::PartialEq<&'a header::name::HeaderName>>::eq(p0, p1);
+crate::<header::name::HeaderName as std::cmp::PartialEq<&'a header::name::HeaderName>>::eq(p0, p1);
+<header::name::HeaderName>::eq(p0, p1);
-----------------
src/header/name.rs <&'a header::name::HeaderName as std::cmp::PartialEq<header::name::HeaderName>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.eq(p1);
+<&'a header::name::HeaderName as std::cmp::PartialEq<header::name::HeaderName>>::eq(p0, p1);
+crate::<&'a header::name::HeaderName as std::cmp::PartialEq<header::name::HeaderName>>::eq(p0, p1);
+<&'a header::name::HeaderName>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<header::name::HeaderName as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<header::name::HeaderName as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<header::name::HeaderName>::eq(p0, &p1);
-----------------
src/header/name.rs header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.eq(p1);
+header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for str>::eq(&p0, p1);
+crate::header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::PartialEq<&'a str>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & "a"; // None+&'a str
+p0.eq(p1);
+<header::name::HeaderName as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+crate::<header::name::HeaderName as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+<header::name::HeaderName>::eq(p0, p1);
-----------------
src/header/name.rs header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+p0.eq(p1);
+header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for &'a str>::eq(p0, p1);
+crate::header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::InvalidHeaderName as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::name::InvalidHeaderName as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::name::InvalidHeaderName as std::fmt::Debug>::fmt(p0, p1);
+<header::name::InvalidHeaderName>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::InvalidHeaderName as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderName
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::name::InvalidHeaderName as std::fmt::Display>::fmt(p0, p1);
+crate::<header::name::InvalidHeaderName as std::fmt::Display>::fmt(p0, p1);
+<header::name::InvalidHeaderName>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::InvalidHeaderName as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderName
+p0.description();
+<header::name::InvalidHeaderName as std::error::Error>::description(p0);
+crate::<header::name::InvalidHeaderName as std::error::Error>::description(p0);
+<header::name::InvalidHeaderName>::description(p0);
-----------------
src/header/name.rs <header::name::InvalidHeaderNameBytes as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderNameBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::name::InvalidHeaderNameBytes as std::fmt::Display>::fmt(p0, p1);
+crate::<header::name::InvalidHeaderNameBytes as std::fmt::Display>::fmt(p0, p1);
+<header::name::InvalidHeaderNameBytes>::fmt(p0, p1);
-----------------
src/header/name.rs <header::name::InvalidHeaderNameBytes as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderNameBytes
+p0.description();
+<header::name::InvalidHeaderNameBytes as std::error::Error>::description(p0);
+crate::<header::name::InvalidHeaderNameBytes as std::error::Error>::description(p0);
+<header::name::InvalidHeaderNameBytes>::description(p0);
-----------------
src/header/name.rs header::name::HdrName::<'a>::custom
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = true; // None+bool
+header::name::HdrName::<'a>::custom(p0, p1);
+crate::header::name::HdrName::<'a>::custom(p0, p1);
+<header::name::HdrName<'a>>::custom(p0, p1);
-----------------
src/header/name.rs header::name::HdrName::<'a>::from_bytes
'a
deps:{"header::name::HdrName::<'a>::from_bytes":{"F":["std::marker::Sized","std::ops::FnOnce"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"header::name::HdrName::<'a>::from_bytes":{"F":["core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::panic::AssertUnwindSafe<F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+header::name::HdrName::<'a>::from_bytes(p0, p1);
+crate::header::name::HdrName::<'a>::from_bytes(p0, p1);
+<header::name::HdrName<'a>>::from_bytes(p0, p1);
-----------------
src/header/name.rs header::name::HdrName::<'a>::from_static
'a
deps:{"header::name::HdrName::<'a>::from_static":{"F":["std::ops::FnOnce","std::marker::Sized"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"header::name::HdrName::<'a>::from_static":{"F":["std::panic::AssertUnwindSafe<F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = "sample"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+header::name::HdrName::<'a>::from_static(&p0, p1);
+crate::header::name::HdrName::<'a>::from_static(&p0, p1);
+<header::name::HdrName<'a>>::from_static(&p0, p1);
-----------------
src/header/name.rs <header::name::HeaderName as std::convert::From<header::name::HdrName<'a>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HdrName<'a>
+<header::name::HeaderName as std::convert::From<header::name::HdrName<'a>>>::from(p0);
+crate::<header::name::HeaderName as std::convert::From<header::name::HdrName<'a>>>::from(p0);
+<header::name::HeaderName>::from(p0);
-----------------
src/header/name.rs <header::name::HeaderName as std::cmp::PartialEq<header::name::HdrName<'a>>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::HeaderName
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::name::HdrName<'a>
+p0.eq(p1);
+<header::name::HeaderName as std::cmp::PartialEq<header::name::HdrName<'a>>>::eq(p0, p1);
+crate::<header::name::HeaderName as std::cmp::PartialEq<header::name::HdrName<'a>>>::eq(p0, p1);
+<header::name::HeaderName>::eq(p0, p1);
-----------------
src/header/name.rs <header::name::Custom as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::Custom as std::hash::Hash>::hash":{"H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::Custom as std::hash::Hash>::hash":{"H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::Custom
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<header::name::Custom as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::Custom as std::hash::Hash>::hash(p0, p1);
+<header::name::Custom>::hash(p0, p1);
-----------------
src/header/name.rs <header::name::MaybeLower<'a> as std::hash::Hash>::hash
'a
deps:{"<&mut H as std::hash::Hasher>":{},"<header::name::MaybeLower<'a> as std::hash::Hash>::hash":{"H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::name::MaybeLower<'a> as std::hash::Hash>::hash":{"H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::name::MaybeLower<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<header::name::MaybeLower<'a> as std::hash::Hash>::hash(p0, p1);
+crate::<header::name::MaybeLower<'a> as std::hash::Hash>::hash(p0, p1);
+<header::name::MaybeLower<'a>>::hash(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.clone();
+<header::value::HeaderValue as std::clone::Clone>::clone(p0);
+crate::<header::value::HeaderValue as std::clone::Clone>::clone(p0);
+<header::value::HeaderValue>::clone(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<header::value::HeaderValue as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<header::value::HeaderValue as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<header::value::HeaderValue as std::hash::Hash>::hash(p0, p1);
+crate::<header::value::HeaderValue as std::hash::Hash>::hash(p0, p1);
+<header::value::HeaderValue>::hash(p0, p1);
-----------------
src/header/value.rs <header::value::InvalidHeaderValueBytes as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValueBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::value::InvalidHeaderValueBytes as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::value::InvalidHeaderValueBytes as std::fmt::Debug>::fmt(p0, p1);
+<header::value::InvalidHeaderValueBytes>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::ToStrError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::ToStrError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::value::ToStrError as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::value::ToStrError as std::fmt::Debug>::fmt(p0, p1);
+<header::value::ToStrError>::fmt(p0, p1);
-----------------
src/header/value.rs header::value::HeaderValue::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+header::value::HeaderValue::from_static(&p0);
+crate::header::value::HeaderValue::from_static(&p0);
+<header::value::HeaderValue>::from_static(&p0);
-----------------
src/header/value.rs header::value::HeaderValue::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+header::value::HeaderValue::from_str(&p0);
+crate::header::value::HeaderValue::from_str(&p0);
+<header::value::HeaderValue>::from_str(&p0);
-----------------
src/header/value.rs header::value::HeaderValue::from_name
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+header::value::HeaderValue::from_name(p0);
+crate::header::value::HeaderValue::from_name(p0);
+<header::value::HeaderValue>::from_name(p0);
-----------------
src/header/value.rs header::value::HeaderValue::from_bytes
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+header::value::HeaderValue::from_bytes(p0);
+crate::header::value::HeaderValue::from_bytes(p0);
+<header::value::HeaderValue>::from_bytes(p0);
-----------------
src/header/value.rs header::value::HeaderValue::from_shared
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+header::value::HeaderValue::from_shared(p0);
+crate::header::value::HeaderValue::from_shared(p0);
+<header::value::HeaderValue>::from_shared(p0);
-----------------
src/header/value.rs header::value::HeaderValue::from_shared_unchecked
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+header::value::HeaderValue::from_shared_unchecked(p0);
+crate::header::value::HeaderValue::from_shared_unchecked(p0);
+<header::value::HeaderValue>::from_shared_unchecked(p0);
-----------------
src/header/value.rs header::value::HeaderValue::try_from
deps:{"header::value::HeaderValue::try_from":{"T":["std::convert::Into","std::convert::AsRef","std::marker::Sized"]}}
candidates:{"header::value::HeaderValue::try_from":{"T":["header::name::HeaderName"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+header::value::HeaderValue::try_from(p0);
+crate::header::value::HeaderValue::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs header::value::HeaderValue::to_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.to_str();
+header::value::HeaderValue::to_str(p0);
+crate::header::value::HeaderValue::to_str(p0);
+<header::value::HeaderValue>::to_str(p0);
-----------------
src/header/value.rs header::value::HeaderValue::len
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.len();
+header::value::HeaderValue::len(p0);
+crate::header::value::HeaderValue::len(p0);
+<header::value::HeaderValue>::len(p0);
-----------------
src/header/value.rs header::value::HeaderValue::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.is_empty();
+header::value::HeaderValue::is_empty(p0);
+crate::header::value::HeaderValue::is_empty(p0);
+<header::value::HeaderValue>::is_empty(p0);
-----------------
src/header/value.rs header::value::HeaderValue::as_bytes
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.as_bytes();
+header::value::HeaderValue::as_bytes(p0);
+crate::header::value::HeaderValue::as_bytes(p0);
+<header::value::HeaderValue>::as_bytes(p0);
-----------------
src/header/value.rs header::value::HeaderValue::set_sensitive
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = true; // None+bool
+p0.set_sensitive(p1);
+header::value::HeaderValue::set_sensitive(p0, p1);
+crate::header::value::HeaderValue::set_sensitive(p0, p1);
+<header::value::HeaderValue>::set_sensitive(p0, p1);
-----------------
src/header/value.rs header::value::HeaderValue::is_sensitive
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.is_sensitive();
+header::value::HeaderValue::is_sensitive(p0);
+crate::header::value::HeaderValue::is_sensitive(p0);
+<header::value::HeaderValue>::is_sensitive(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::AsRef<[u8]>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.as_ref();
+<header::value::HeaderValue as std::convert::AsRef<[u8]>>::as_ref(p0);
+crate::<header::value::HeaderValue as std::convert::AsRef<[u8]>>::as_ref(p0);
+<header::value::HeaderValue>::as_ref(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::value::HeaderValue as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::value::HeaderValue as std::fmt::Debug>::fmt(p0, p1);
+<header::value::HeaderValue>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<header::name::HeaderName>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+<header::value::HeaderValue as std::convert::From<header::name::HeaderName>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<header::name::HeaderName>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<u16>>::from
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+<header::value::HeaderValue as std::convert::From<u16>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<u16>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<u16>>::try_from
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+<header::value::HeaderValue as convert::HttpTryFrom<u16>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<u16>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<i16>>::from
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+<header::value::HeaderValue as std::convert::From<i16>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<i16>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<i16>>::try_from
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+<header::value::HeaderValue as convert::HttpTryFrom<i16>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<i16>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<u32>>::from
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+<header::value::HeaderValue as std::convert::From<u32>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<u32>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<u32>>::try_from
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+<header::value::HeaderValue as convert::HttpTryFrom<u32>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<u32>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<i32>>::from
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+<header::value::HeaderValue as std::convert::From<i32>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<i32>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<i32>>::try_from
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+<header::value::HeaderValue as convert::HttpTryFrom<i32>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<i32>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<u64>>::from
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+<header::value::HeaderValue as std::convert::From<u64>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<u64>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<u64>>::try_from
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+<header::value::HeaderValue as convert::HttpTryFrom<u64>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<u64>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<i64>>::from
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+<header::value::HeaderValue as std::convert::From<i64>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<i64>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<i64>>::try_from
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+<header::value::HeaderValue as convert::HttpTryFrom<i64>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<i64>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<usize>>::from
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+<header::value::HeaderValue as std::convert::From<usize>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<usize>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<usize>>::try_from
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+<header::value::HeaderValue as convert::HttpTryFrom<usize>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<usize>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<isize>>::from
deps:{}
candidates:{}
let mut p0 = 0isize; // None+isize
+<header::value::HeaderValue as std::convert::From<isize>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<isize>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<isize>>::try_from
deps:{}
candidates:{}
let mut p0 = 0isize; // None+isize
+<header::value::HeaderValue as convert::HttpTryFrom<isize>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<isize>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<header::value::HeaderValue as std::str::FromStr>::from_str(&p0);
+crate::<header::value::HeaderValue as std::str::FromStr>::from_str(&p0);
+<header::value::HeaderValue>::from_str(&p0);
-----------------
src/header/value.rs header::value::<impl std::convert::From<header::value::HeaderValue> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+header::value::<impl std::convert::From<header::value::HeaderValue> for bytes::Bytes>::from(p0);
+crate::header::value::<impl std::convert::From<header::value::HeaderValue> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::convert::From<&'a header::value::HeaderValue>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+<header::value::HeaderValue as std::convert::From<&'a header::value::HeaderValue>>::from(p0);
+crate::<header::value::HeaderValue as std::convert::From<&'a header::value::HeaderValue>>::from(p0);
+<header::value::HeaderValue>::from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<&'a header::value::HeaderValue>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+<header::value::HeaderValue as convert::HttpTryFrom<&'a header::value::HeaderValue>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<&'a header::value::HeaderValue>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<header::value::HeaderValue as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<header::value::HeaderValue>::try_from(&p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<&'a std::string::String>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+<header::value::HeaderValue as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<header::value::HeaderValue as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<std::string::String>>::try_from
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<header::value::HeaderValue as convert::HttpTryFrom<std::string::String>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<std::string::String>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<header::value::HeaderValue as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as convert::HttpTryFrom<header::name::HeaderName>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+<header::value::HeaderValue as convert::HttpTryFrom<header::name::HeaderName>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<header::name::HeaderName>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/header/value.rs <header::value::InvalidHeaderValue as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValue
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<header::value::InvalidHeaderValue as std::fmt::Debug>::fmt(p0, p1);
+crate::<header::value::InvalidHeaderValue as std::fmt::Debug>::fmt(p0, p1);
+<header::value::InvalidHeaderValue>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::InvalidHeaderValue as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValue
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::value::InvalidHeaderValue as std::fmt::Display>::fmt(p0, p1);
+crate::<header::value::InvalidHeaderValue as std::fmt::Display>::fmt(p0, p1);
+<header::value::InvalidHeaderValue>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::InvalidHeaderValue as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValue
+p0.description();
+<header::value::InvalidHeaderValue as std::error::Error>::description(p0);
+crate::<header::value::InvalidHeaderValue as std::error::Error>::description(p0);
+<header::value::InvalidHeaderValue>::description(p0);
-----------------
src/header/value.rs <header::value::InvalidHeaderValueBytes as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValueBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::value::InvalidHeaderValueBytes as std::fmt::Display>::fmt(p0, p1);
+crate::<header::value::InvalidHeaderValueBytes as std::fmt::Display>::fmt(p0, p1);
+<header::value::InvalidHeaderValueBytes>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::InvalidHeaderValueBytes as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValueBytes
+p0.description();
+<header::value::InvalidHeaderValueBytes as std::error::Error>::description(p0);
+crate::<header::value::InvalidHeaderValueBytes as std::error::Error>::description(p0);
+<header::value::InvalidHeaderValueBytes>::description(p0);
-----------------
src/header/value.rs <header::value::ToStrError as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::ToStrError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<header::value::ToStrError as std::fmt::Display>::fmt(p0, p1);
+crate::<header::value::ToStrError as std::fmt::Display>::fmt(p0, p1);
+<header::value::ToStrError>::fmt(p0, p1);
-----------------
src/header/value.rs <header::value::ToStrError as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::ToStrError
+p0.description();
+<header::value::ToStrError as std::error::Error>::description(p0);
+crate::<header::value::ToStrError as std::error::Error>::description(p0);
+<header::value::ToStrError>::description(p0);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+<header::value::HeaderValue as std::cmp::PartialEq>::eq(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialEq>::eq(p0, p1);
+<header::value::HeaderValue>::eq(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+<header::value::HeaderValue as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<header::value::HeaderValue>::partial_cmp(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.cmp(p1);
+<header::value::HeaderValue as std::cmp::Ord>::cmp(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::Ord>::cmp(p0, p1);
+<header::value::HeaderValue>::cmp(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<header::value::HeaderValue as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<header::value::HeaderValue as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<header::value::HeaderValue>::eq(p0, &p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialEq<[u8]>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.eq(p1);
+<header::value::HeaderValue as std::cmp::PartialEq<[u8]>>::eq(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialEq<[u8]>>::eq(p0, p1);
+<header::value::HeaderValue>::eq(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialOrd<str>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = "sample"; // None+&str
+p0.partial_cmp(&p1);
+<header::value::HeaderValue as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+crate::<header::value::HeaderValue as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+<header::value::HeaderValue>::partial_cmp(p0, &p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialOrd<[u8]>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.partial_cmp(p1);
+<header::value::HeaderValue as std::cmp::PartialOrd<[u8]>>::partial_cmp(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialOrd<[u8]>>::partial_cmp(p0, p1);
+<header::value::HeaderValue>::partial_cmp(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for str>::eq(&p0, p1);
+crate::header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for [u8]>::eq
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for [u8]>::eq(p0, p1);
+crate::header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for [u8]>::eq(p0, p1);
+<[u8]>::eq(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for str>::partial_cmp
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for str>::partial_cmp(&p0, p1);
+crate::header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for str>::partial_cmp(&p0, p1);
+<str>::partial_cmp(&p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for [u8]>::partial_cmp
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for [u8]>::partial_cmp(p0, p1);
+crate::header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for [u8]>::partial_cmp(p0, p1);
+<[u8]>::partial_cmp(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialEq<std::string::String>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.eq(p1);
+<header::value::HeaderValue as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+<header::value::HeaderValue>::eq(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialOrd<std::string::String>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.partial_cmp(p1);
+<header::value::HeaderValue as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+<header::value::HeaderValue>::partial_cmp(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for std::string::String>::eq
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for std::string::String>::eq(p0, p1);
+crate::header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for std::string::String>::eq(p0, p1);
+<std::string::String>::eq(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for std::string::String>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for std::string::String>::partial_cmp(p0, p1);
+crate::header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for std::string::String>::partial_cmp(p0, p1);
+<std::string::String>::partial_cmp(p0, p1);
-----------------
src/header/value.rs <&'a header::value::HeaderValue as std::cmp::PartialEq<header::value::HeaderValue>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+<&'a header::value::HeaderValue as std::cmp::PartialEq<header::value::HeaderValue>>::eq(p0, p1);
+crate::<&'a header::value::HeaderValue as std::cmp::PartialEq<header::value::HeaderValue>>::eq(p0, p1);
+<&'a header::value::HeaderValue>::eq(p0, p1);
-----------------
src/header/value.rs <&'a header::value::HeaderValue as std::cmp::PartialOrd<header::value::HeaderValue>>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+<&'a header::value::HeaderValue as std::cmp::PartialOrd<header::value::HeaderValue>>::partial_cmp(p0, p1);
+crate::<&'a header::value::HeaderValue as std::cmp::PartialOrd<header::value::HeaderValue>>::partial_cmp(p0, p1);
+<&'a header::value::HeaderValue>::partial_cmp(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq
'a
deps:{"<*mut T as std::fmt::Debug>":{},"<header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq":{"header::value::HeaderValue":["std::cmp::PartialEq"]},"header::map::GetAll":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","convert::HttpTryFrom","std::clone::Clone","std::cmp::PartialEq"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq":{"header::value::HeaderValue":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","header::map::GetAll","header::map::Link","uri::ErrorKind","header::name::StandardHeader","header::map::HashValue","version::Http","header::name::Repr","header::map::Cursor","header::name::Custom","header::map::HeaderMap","method::Inner","version::Version","byte_str::ByteStr"]},"header::map::GetAll":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","version::Version","header::map::HashValue","header::name::Custom","header::map::GetAll","header::name::Repr","header::map::Link","byte_str::ByteStr","uri::ErrorKind","header::map::Cursor","header::map::HeaderMap","header::name::StandardHeader"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","header::value::HeaderValue"]},"header::name::Repr":{"T":["byte_str::ByteStr","header::name::Custom","header::name::Repr","std::clone::impls::<impl std::clone::Clone for *const T>","version::Version","header::name::StandardHeader"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & & MaybeUninit::uninit().assume_init(); // T
+p0.eq(p1);
+<header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq(p0, p1);
+<header::value::HeaderValue>::eq(p0, p1);
-----------------
src/header/value.rs <header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp
'a
deps:{"<header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp":{"header::value::HeaderValue":["std::cmp::PartialOrd"]},"std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialOrd for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialOrd for *mut T>":{}}
candidates:{"<header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp":{"header::value::HeaderValue":["std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>","byte_str::ByteStr","version::Version","version::Http","status::StatusCode"]},"std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialOrd for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialOrd for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
let mut p1 = & & MaybeUninit::uninit().assume_init(); // T
+p0.partial_cmp(p1);
+<header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp(p0, p1);
+crate::<header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp(p0, p1);
+<header::value::HeaderValue>::partial_cmp(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.eq(p1);
+header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for &'a str>::eq(p0, p1);
+crate::header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/header/value.rs header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for &'a str>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+p0.partial_cmp(p1);
+header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for &'a str>::partial_cmp(p0, p1);
+crate::header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for &'a str>::partial_cmp(p0, p1);
+<&'a str>::partial_cmp(p0, p1);
-----------------
src/method.rs <method::Method as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.clone();
+<method::Method as std::clone::Clone>::clone(p0);
+crate::<method::Method as std::clone::Clone>::clone(p0);
+<method::Method>::clone(p0);
-----------------
src/method.rs <method::Method as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.eq(p1);
+<method::Method as std::cmp::PartialEq>::eq(p0, p1);
+crate::<method::Method as std::cmp::PartialEq>::eq(p0, p1);
+<method::Method>::eq(p0, p1);
-----------------
src/method.rs <method::Method as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.assert_receiver_is_total_eq();
+<method::Method as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<method::Method as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<method::Method>::assert_receiver_is_total_eq(p0);
-----------------
src/method.rs <method::Method as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<method::Method as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<method::Method as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<method::Method as std::hash::Hash>::hash(p0, p1);
+crate::<method::Method as std::hash::Hash>::hash(p0, p1);
+<method::Method>::hash(p0, p1);
-----------------
src/method.rs <method::Inner as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Inner
+p0.clone();
+<method::Inner as std::clone::Clone>::clone(p0);
+crate::<method::Inner as std::clone::Clone>::clone(p0);
+<method::Inner>::clone(p0);
-----------------
src/method.rs <method::Inner as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Inner
let mut p1 = & MaybeUninit::uninit().assume_init(); // method::Inner
+p0.eq(p1);
+<method::Inner as std::cmp::PartialEq>::eq(p0, p1);
+crate::<method::Inner as std::cmp::PartialEq>::eq(p0, p1);
+<method::Inner>::eq(p0, p1);
-----------------
src/method.rs <method::Inner as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Inner
+p0.assert_receiver_is_total_eq();
+<method::Inner as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<method::Inner as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<method::Inner>::assert_receiver_is_total_eq(p0);
-----------------
src/method.rs <method::Inner as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<method::Inner as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<method::Inner as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Inner
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<method::Inner as std::hash::Hash>::hash(p0, p1);
+crate::<method::Inner as std::hash::Hash>::hash(p0, p1);
+<method::Inner>::hash(p0, p1);
-----------------
src/method.rs method::Method::from_bytes
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+method::Method::from_bytes(p0);
+crate::method::Method::from_bytes(p0);
+<method::Method>::from_bytes(p0);
-----------------
src/method.rs method::Method::extension_inline
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+method::Method::extension_inline(p0);
+crate::method::Method::extension_inline(p0);
+<method::Method>::extension_inline(p0);
-----------------
src/method.rs method::Method::is_safe
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.is_safe();
+method::Method::is_safe(p0);
+crate::method::Method::is_safe(p0);
+<method::Method>::is_safe(p0);
-----------------
src/method.rs method::Method::is_idempotent
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.is_idempotent();
+method::Method::is_idempotent(p0);
+crate::method::Method::is_idempotent(p0);
+<method::Method>::is_idempotent(p0);
-----------------
src/method.rs method::Method::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.as_str();
+method::Method::as_str(p0);
+crate::method::Method::as_str(p0);
+<method::Method>::as_str(p0);
-----------------
src/method.rs <method::Method as std::convert::AsRef<str>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.as_ref();
+<method::Method as std::convert::AsRef<str>>::as_ref(p0);
+crate::<method::Method as std::convert::AsRef<str>>::as_ref(p0);
+<method::Method>::as_ref(p0);
-----------------
src/method.rs <method::Method as std::cmp::PartialEq<&'a method::Method>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = & & MaybeUninit::uninit().assume_init(); // method::Method
+p0.eq(p1);
+<method::Method as std::cmp::PartialEq<&'a method::Method>>::eq(p0, p1);
+crate::<method::Method as std::cmp::PartialEq<&'a method::Method>>::eq(p0, p1);
+<method::Method>::eq(p0, p1);
-----------------
src/method.rs <&'a method::Method as std::cmp::PartialEq<method::Method>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.eq(p1);
+<&'a method::Method as std::cmp::PartialEq<method::Method>>::eq(p0, p1);
+crate::<&'a method::Method as std::cmp::PartialEq<method::Method>>::eq(p0, p1);
+<&'a method::Method>::eq(p0, p1);
-----------------
src/method.rs <method::Method as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<method::Method as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<method::Method as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<method::Method>::eq(p0, &p1);
-----------------
src/method.rs method::<impl std::cmp::PartialEq<method::Method> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.eq(p1);
+method::<impl std::cmp::PartialEq<method::Method> for str>::eq(&p0, p1);
+crate::method::<impl std::cmp::PartialEq<method::Method> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/method.rs <method::Method as std::cmp::PartialEq<&'a str>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = & "a"; // None+&'a str
+p0.eq(p1);
+<method::Method as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+crate::<method::Method as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+<method::Method>::eq(p0, p1);
-----------------
src/method.rs method::<impl std::cmp::PartialEq<method::Method> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // method::Method
+p0.eq(p1);
+method::<impl std::cmp::PartialEq<method::Method> for &'a str>::eq(p0, p1);
+crate::method::<impl std::cmp::PartialEq<method::Method> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/method.rs <method::Method as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<method::Method as std::fmt::Debug>::fmt(p0, p1);
+crate::<method::Method as std::fmt::Debug>::fmt(p0, p1);
+<method::Method>::fmt(p0, p1);
-----------------
src/method.rs <method::Method as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<method::Method as std::fmt::Display>::fmt(p0, p1);
+crate::<method::Method as std::fmt::Display>::fmt(p0, p1);
+<method::Method>::fmt(p0, p1);
-----------------
src/method.rs <method::Method as std::default::Default>::default
deps:{}
candidates:{}
+<method::Method as std::default::Default>::default();
+crate::<method::Method as std::default::Default>::default();
+<method::Method>::default();
-----------------
src/method.rs <method::Method as std::convert::From<&'a method::Method>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+<method::Method as std::convert::From<&'a method::Method>>::from(p0);
+crate::<method::Method as std::convert::From<&'a method::Method>>::from(p0);
+<method::Method>::from(p0);
-----------------
src/method.rs <method::Method as convert::HttpTryFrom<&'a method::Method>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::Method
+<method::Method as convert::HttpTryFrom<&'a method::Method>>::try_from(p0);
+crate::<method::Method as convert::HttpTryFrom<&'a method::Method>>::try_from(p0);
+<method::Method>::try_from(p0);
-----------------
src/method.rs <method::Method as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<method::Method as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<method::Method as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<method::Method>::try_from(p0);
-----------------
src/method.rs <method::Method as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<method::Method as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<method::Method as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<method::Method>::try_from(&p0);
-----------------
src/method.rs <method::Method as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<method::Method as std::str::FromStr>::from_str(&p0);
+crate::<method::Method as std::str::FromStr>::from_str(&p0);
+<method::Method>::from_str(&p0);
-----------------
src/method.rs method::InvalidMethod::new
deps:{}
candidates:{}
+method::InvalidMethod::new();
+crate::method::InvalidMethod::new();
+<method::InvalidMethod>::new();
-----------------
src/method.rs <method::InvalidMethod as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::InvalidMethod
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<method::InvalidMethod as std::fmt::Debug>::fmt(p0, p1);
+crate::<method::InvalidMethod as std::fmt::Debug>::fmt(p0, p1);
+<method::InvalidMethod>::fmt(p0, p1);
-----------------
src/method.rs <method::InvalidMethod as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::InvalidMethod
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<method::InvalidMethod as std::fmt::Display>::fmt(p0, p1);
+crate::<method::InvalidMethod as std::fmt::Display>::fmt(p0, p1);
+<method::InvalidMethod>::fmt(p0, p1);
-----------------
src/method.rs <method::InvalidMethod as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // method::InvalidMethod
+p0.description();
+<method::InvalidMethod as std::error::Error>::description(p0);
+crate::<method::InvalidMethod as std::error::Error>::description(p0);
+<method::InvalidMethod>::description(p0);
-----------------
src/request.rs <request::Builder as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<request::Builder as std::fmt::Debug>::fmt(p0, p1);
+crate::<request::Builder as std::fmt::Debug>::fmt(p0, p1);
+<request::Builder>::fmt(p0, p1);
-----------------
src/request.rs request::Request::<()>::builder
deps:{}
candidates:{}
+request::Request::<()>::builder();
+crate::request::Request::<()>::builder();
+<request::Request<()>>::builder();
-----------------
src/request.rs request::Request::<()>::get
deps:{"request::Request::<()>::get":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::get":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::get(p0);
+crate::request::Request::<()>::get(p0);
+<request::Request<()>>::get(p0);
-----------------
src/request.rs request::Request::<()>::put
deps:{"request::Request::<()>::put":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::put":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::put(p0);
+crate::request::Request::<()>::put(p0);
+<request::Request<()>>::put(p0);
-----------------
src/request.rs request::Request::<()>::post
deps:{"request::Request::<()>::post":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::post":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::post(p0);
+crate::request::Request::<()>::post(p0);
+<request::Request<()>>::post(p0);
-----------------
src/request.rs request::Request::<()>::delete
deps:{"request::Request::<()>::delete":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::delete":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::delete(p0);
+crate::request::Request::<()>::delete(p0);
+<request::Request<()>>::delete(p0);
-----------------
src/request.rs request::Request::<()>::options
deps:{"request::Request::<()>::options":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::options":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::options(p0);
+crate::request::Request::<()>::options(p0);
+<request::Request<()>>::options(p0);
-----------------
src/request.rs request::Request::<()>::head
deps:{"request::Request::<()>::head":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::head":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::head(p0);
+crate::request::Request::<()>::head(p0);
+<request::Request<()>>::head(p0);
-----------------
src/request.rs request::Request::<()>::connect
deps:{"request::Request::<()>::connect":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::connect":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::connect(p0);
+crate::request::Request::<()>::connect(p0);
+<request::Request<()>>::connect(p0);
-----------------
src/request.rs request::Request::<()>::patch
deps:{"request::Request::<()>::patch":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::patch":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::patch(p0);
+crate::request::Request::<()>::patch(p0);
+<request::Request<()>>::patch(p0);
-----------------
src/request.rs request::Request::<()>::trace
deps:{"request::Request::<()>::trace":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Request::<()>::trace":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<()>::trace(p0);
+crate::request::Request::<()>::trace(p0);
+<request::Request<()>>::trace(p0);
-----------------
src/request.rs request::Request::<T>::new
deps:{"request::Request::<T>::new":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::new":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<T>::new(p0);
+crate::request::Request::<T>::new(p0);
+<request::Request<T>>::new(p0);
-----------------
src/request.rs request::Request::<T>::from_parts
deps:{"request::Request::<T>::from_parts":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::from_parts":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // request::Parts
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+request::Request::<T>::from_parts(p0, p1);
+crate::request::Request::<T>::from_parts(p0, p1);
+<request::Request<T>>::from_parts(p0, p1);
-----------------
src/request.rs request::Request::<T>::method
deps:{"request::Request::<T>::method":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::method":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.method();
+request::Request::<T>::method(p0);
+crate::request::Request::<T>::method(p0);
+<request::Request<T>>::method(p0);
-----------------
src/request.rs request::Request::<T>::method_mut
deps:{"request::Request::<T>::method_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::method_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.method_mut();
+request::Request::<T>::method_mut(p0);
+crate::request::Request::<T>::method_mut(p0);
+<request::Request<T>>::method_mut(p0);
-----------------
src/request.rs request::Request::<T>::uri
deps:{"request::Request::<T>::uri":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::uri":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.uri();
+request::Request::<T>::uri(p0);
+crate::request::Request::<T>::uri(p0);
+<request::Request<T>>::uri(p0);
-----------------
src/request.rs request::Request::<T>::uri_mut
deps:{"request::Request::<T>::uri_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::uri_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.uri_mut();
+request::Request::<T>::uri_mut(p0);
+crate::request::Request::<T>::uri_mut(p0);
+<request::Request<T>>::uri_mut(p0);
-----------------
src/request.rs request::Request::<T>::version
deps:{"request::Request::<T>::version":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::version":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.version();
+request::Request::<T>::version(p0);
+crate::request::Request::<T>::version(p0);
+<request::Request<T>>::version(p0);
-----------------
src/request.rs request::Request::<T>::version_mut
deps:{"request::Request::<T>::version_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::version_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.version_mut();
+request::Request::<T>::version_mut(p0);
+crate::request::Request::<T>::version_mut(p0);
+<request::Request<T>>::version_mut(p0);
-----------------
src/request.rs request::Request::<T>::headers
deps:{"request::Request::<T>::headers":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::headers":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.headers();
+request::Request::<T>::headers(p0);
+crate::request::Request::<T>::headers(p0);
+<request::Request<T>>::headers(p0);
-----------------
src/request.rs request::Request::<T>::headers_mut
deps:{"request::Request::<T>::headers_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::headers_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.headers_mut();
+request::Request::<T>::headers_mut(p0);
+crate::request::Request::<T>::headers_mut(p0);
+<request::Request<T>>::headers_mut(p0);
-----------------
src/request.rs request::Request::<T>::extensions
deps:{"request::Request::<T>::extensions":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::extensions":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.extensions();
+request::Request::<T>::extensions(p0);
+crate::request::Request::<T>::extensions(p0);
+<request::Request<T>>::extensions(p0);
-----------------
src/request.rs request::Request::<T>::extensions_mut
deps:{"request::Request::<T>::extensions_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::extensions_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.extensions_mut();
+request::Request::<T>::extensions_mut(p0);
+crate::request::Request::<T>::extensions_mut(p0);
+<request::Request<T>>::extensions_mut(p0);
-----------------
src/request.rs request::Request::<T>::body
deps:{"request::Request::<T>::body":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::body":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.body();
+request::Request::<T>::body(p0);
+crate::request::Request::<T>::body(p0);
+<request::Request<T>>::body(p0);
-----------------
src/request.rs request::Request::<T>::body_mut
deps:{"request::Request::<T>::body_mut":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::body_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.body_mut();
+request::Request::<T>::body_mut(p0);
+crate::request::Request::<T>::body_mut(p0);
+<request::Request<T>>::body_mut(p0);
-----------------
src/request.rs request::Request::<T>::into_body
deps:{"request::Request::<T>::into_body":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::into_body":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.into_body();
+request::Request::<T>::into_body(p0);
+crate::request::Request::<T>::into_body(p0);
+<request::Request<T>>::into_body(p0);
-----------------
src/request.rs request::Request::<T>::into_parts
deps:{"request::Request::<T>::into_parts":{"T":["std::marker::Sized"]}}
candidates:{"request::Request::<T>::into_parts":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // request::Request<T>
+p0.into_parts();
+request::Request::<T>::into_parts(p0);
+crate::request::Request::<T>::into_parts(p0);
+<request::Request<T>>::into_parts(p0);
-----------------
src/request.rs request::Request::<T>::map
deps:{"request::Request::<T>::map":{"F":["std::marker::Sized","std::ops::FnOnce"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"request::Request::<T>::map":{"F":["core::str::CharEscapeUnicode","std::panic::AssertUnwindSafe<F>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // request::Request<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map(p1);
+request::Request::<T>::map(p0, p1);
+crate::request::Request::<T>::map(p0, p1);
+<request::Request<T>>::map(p0, p1);
-----------------
src/request.rs <request::Request<T> as std::default::Default>::default
deps:{"<request::Request<T> as std::default::Default>::default":{"T":["std::default::Default","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","convert::HttpTryFrom","std::marker::Sized"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<request::Request<T> as std::default::Default>::default":{"T":["request::Request","extensions::IdHasher","request::Builder","uri::Parts","response::Builder","uri::builder::Builder","uri::Uri","extensions::Extensions","method::Method","response::Response","version::Version","header::map::HeaderMap","status::StatusCode"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","header::value::HeaderValue"]},"request::Request":{"T":["extensions::Extensions","version::Version","request::Request","response::Builder","method::Method","request::Builder","uri::Uri","status::StatusCode","uri::Parts","response::Response","uri::builder::Builder","header::map::HeaderMap"]},"response::Response":{"T":["version::Version","uri::builder::Builder","uri::Parts","request::Request","response::Builder","status::StatusCode","request::Builder","uri::Uri","response::Response","extensions::Extensions","method::Method","header::map::HeaderMap"]}}
+<request::Request<T> as std::default::Default>::default();
+crate::<request::Request<T> as std::default::Default>::default();
+<request::Request<T>>::default();
-----------------
src/request.rs <request::Request<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<request::Request<T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Bucket":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized","std::marker::Send"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::marker::Sized","convert::HttpTryFrom","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::marker::Send","std::fmt::Debug","std::marker::Sync"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::hash::Hash"]},"request::Request":{"T":["std::fmt::Debug","std::default::Default","std::marker::Sized"]},"response::Response":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<request::Request<T> as std::fmt::Debug>::fmt":{"T":["header::map::Drain","header::map::IterMut","version::Version","header::map::IntoIter","uri::InvalidUriBytes","header::name::MaybeLower","header::map::ValuesMut","header::map::ValueDrain","header::map::ValueIterMut","header::name::HeaderName","header::map::HashValue","byte_str::ByteStr","error::Never","header::name::InvalidHeaderName","response::Builder","status::StatusCode","header::map::VacantEntry","header::map::Bucket","header::map::Keys","uri::port::Port","header::name::StandardHeader","request::Builder","header::name::Custom","header::value::InvalidHeaderValue","header::value::ToStrError","header::map::Iter","header::value::InvalidHeaderValueBytes","uri::scheme::Protocol","status::InvalidStatusCode","header::map::Links","header::map::HeaderMap","response::Parts","uri::ErrorKind","uri::scheme::Scheme2","header::map::ExtraValue","header::map::ValueIter","uri::Uri","header::name::HdrName","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme","<*mut T as std::fmt::Debug>","response::Response","request::Parts","request::Request","uri::InvalidUriParts","header::map::OccupiedEntry","method::InvalidMethod","method::Method","uri::builder::Builder","header::map::Cursor","header::map::Link","uri::path::PathAndQuery","header::value::HeaderValue","<*const T as std::fmt::Debug>","error::Error","uri::authority::Authority","uri::InvalidUri","header::map::Entry","header::map::Values","header::name::Repr","extensions::Extensions","uri::Parts","header::map::GetAll"]},"header::map::Bucket":{"T":["header::name::Repr","<*const T as std::fmt::Debug>","uri::scheme::Protocol","byte_str::ByteStr","uri::Uri","version::Version","uri::path::PathAndQuery","header::map::Link","uri::scheme::Scheme2","method::Method","header::map::ExtraValue","header::name::MaybeLower","header::name::HeaderName","status::StatusCode","header::value::HeaderValue","uri::authority::Authority","header::name::Custom","uri::scheme::Scheme","header::map::HashValue","header::map::HeaderMap","header::map::Cursor","header::map::Links","header::name::StandardHeader","header::map::Bucket"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::Drain","header::map::IterMut","<*mut T as std::marker::Sync>"]},"header::map::Entry":{"T":["request::Parts","header::map::Bucket","header::map::ValueIterMut","header::map::Entry","header::map::Link","header::name::MaybeLower","header::map::HashValue","byte_str::ByteStr","request::Request","header::map::IntoIter","header::map::ExtraValue","response::Builder","header::map::ValueIter","response::Response","uri::InvalidUri","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","header::map::VacantEntry","error::Never","uri::InvalidUriParts","status::InvalidStatusCode","header::name::HeaderName","header::value::ToStrError","header::map::ValueDrain","header::name::Repr","uri::InvalidUriBytes","response::Parts","header::name::InvalidHeaderNameBytes","uri::Uri","header::map::HeaderMap","header::map::GetAll","extensions::Extensions","method::Method","uri::scheme::Scheme","error::Error","header::value::InvalidHeaderValue","uri::Parts","<*const T as std::fmt::Debug>","header::map::Links","header::map::OccupiedEntry","method::InvalidMethod","uri::builder::Builder","uri::scheme::Scheme2","header::map::Drain","uri::port::Port","header::map::Cursor","header::map::Values","header::name::Custom","uri::authority::Authority","uri::scheme::Protocol","request::Builder","uri::path::PathAndQuery","header::value::HeaderValue","header::name::StandardHeader","header::name::HdrName","header::map::IterMut","header::map::Iter","header::map::ValuesMut","uri::ErrorKind","version::Version","status::StatusCode","header::map::Keys"]},"header::map::ExtraValue":{"T":["header::map::Bucket","status::StatusCode","header::name::HeaderName","header::name::MaybeLower","header::map::HeaderMap","uri::scheme::Scheme","header::map::ExtraValue","uri::path::PathAndQuery","header::map::Cursor","header::name::Custom","header::map::Link","byte_str::ByteStr","uri::Uri","header::map::Links","uri::scheme::Scheme2","<&mut T as std::fmt::Debug>","uri::scheme::Protocol","header::map::HashValue","version::Version","header::name::Repr","method::Method","header::value::HeaderValue","header::name::StandardHeader","uri::authority::Authority"]},"header::map::GetAll":{"T":["uri::ErrorKind","header::name::StandardHeader","header::map::HeaderMap","header::map::GetAll","byte_str::ByteStr","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::map::Link","header::map::Cursor","version::Version","header::name::Custom","header::map::HashValue","header::name::Repr"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","header::value::HeaderValue","std::net::Ipv4Addr"]},"header::map::IntoIter":{"T":["header::map::Entry","uri::InvalidUriBytes","header::name::MaybeLower","header::map::OccupiedEntry","<&T as std::fmt::Debug>","status::InvalidStatusCode","header::value::InvalidHeaderValue","error::Never","header::name::Repr","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","uri::Parts","header::map::IterMut","uri::authority::Authority","header::map::IntoIter","uri::builder::Builder","header::name::HeaderName","uri::ErrorKind","header::map::ValueDrain","header::map::HeaderMap","uri::scheme::Scheme","header::name::HdrName","error::Error","header::map::Bucket","header::map::Keys","header::name::StandardHeader","uri::InvalidUriParts","header::map::Link","header::map::Values","response::Response","uri::port::Port","header::map::HashValue","header::map::ValuesMut","header::map::Links","response::Parts","header::map::ValueIter","method::Method","request::Builder","uri::scheme::Scheme2","status::StatusCode","header::name::InvalidHeaderName","header::map::Iter","request::Request","uri::scheme::Protocol","header::value::HeaderValue","response::Builder","header::name::Custom","header::value::ToStrError","extensions::Extensions","request::Parts","header::map::Drain","uri::InvalidUri","header::map::VacantEntry","header::map::ValueIterMut","byte_str::ByteStr","version::Version","uri::Uri","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","method::InvalidMethod","header::map::GetAll","header::map::Cursor"]},"header::map::Iter":{"T":["header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::Iter","header::map::IterMut"]},"header::map::IterMut":{"T":["header::map::IterMut","header::map::Drain","header::map::ValueIterMut","<*mut T as std::marker::Sync>","header::map::ValueDrain","header::map::Iter"]},"header::map::Keys":{"T":["header::map::ValueIter","status::InvalidStatusCode","header::map::Cursor","uri::InvalidUriParts","header::value::InvalidHeaderValue","header::map::Values","header::map::Drain","uri::ErrorKind","uri::authority::Authority","header::value::ToStrError","header::map::IterMut","uri::Parts","header::map::GetAll","header::map::Keys","byte_str::ByteStr","header::map::Entry","uri::scheme::Protocol","header::value::InvalidHeaderValueBytes","uri::InvalidUri","error::Never","uri::scheme::Scheme2","header::map::OccupiedEntry","header::map::ValueDrain","request::Parts","header::map::VacantEntry","header::map::Links","header::map::Bucket","uri::scheme::Scheme","uri::Uri","uri::InvalidUriBytes","request::Builder","header::map::Link","header::map::Iter","uri::builder::Builder","method::InvalidMethod","header::map::IntoIter","header::map::ExtraValue","header::map::HeaderMap","status::StatusCode","header::map::ValueIterMut","error::Error","header::name::Custom","uri::path::PathAndQuery","header::name::InvalidHeaderName","header::name::InvalidHeaderNameBytes","header::name::HeaderName","response::Parts","header::value::HeaderValue","header::name::HdrName","version::Version","request::Request","response::Builder","header::name::StandardHeader","header::map::ValuesMut","<*mut T as std::fmt::Debug>","response::Response","uri::port::Port","extensions::Extensions","header::name::MaybeLower","method::Method","header::map::HashValue","header::name::Repr"]},"header::map::OccupiedEntry":{"T":["status::StatusCode","header::name::Repr","header::map::HeaderMap","response::Parts","header::map::IntoIter","method::Method","status::InvalidStatusCode","uri::scheme::Protocol","header::map::HashValue","uri::authority::Authority","header::value::InvalidHeaderValue","header::map::Cursor","version::Version","header::map::Links","uri::path::PathAndQuery","uri::InvalidUri","uri::InvalidUriBytes","uri::Parts","header::map::Bucket","request::Request","request::Builder","error::Error","uri::ErrorKind","method::InvalidMethod","header::map::Drain","response::Builder","header::map::ValueIterMut","error::Never","uri::scheme::Scheme","header::name::MaybeLower","header::value::ToStrError","uri::builder::Builder","header::name::HdrName","header::map::Iter","<*mut T as std::fmt::Debug>","uri::Uri","header::name::Custom","header::map::ExtraValue","header::map::Link","header::map::OccupiedEntry","uri::port::Port","header::name::InvalidHeaderName","header::map::ValuesMut","request::Parts","header::map::Values","header::map::ValueDrain","header::name::StandardHeader","uri::InvalidUriParts","byte_str::ByteStr","uri::scheme::Scheme2","header::name::InvalidHeaderNameBytes","header::map::Keys","header::map::VacantEntry","header::name::HeaderName","extensions::Extensions","response::Response","header::map::IterMut","header::map::Entry","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::map::GetAll"]},"header::map::VacantEntry":{"T":["header::map::Keys","uri::port::Port","header::value::InvalidHeaderValueBytes","uri::InvalidUri","header::name::Custom","header::map::Links","header::name::InvalidHeaderName","request::Request","uri::scheme::Scheme2","header::map::Entry","header::map::GetAll","header::value::InvalidHeaderValue","method::InvalidMethod","uri::path::PathAndQuery","status::InvalidStatusCode","header::map::Link","header::name::InvalidHeaderNameBytes","uri::authority::Authority","request::Parts","header::name::MaybeLower","header::name::HdrName","error::Never","uri::ErrorKind","header::map::ValueIterMut","uri::builder::Builder","header::value::HeaderValue","header::map::VacantEntry","extensions::Extensions","uri::Uri","response::Builder","uri::scheme::Protocol","header::map::OccupiedEntry","header::name::HeaderName","header::map::IterMut","uri::scheme::Scheme","response::Response","error::Error","status::StatusCode","header::map::Bucket","header::map::HashValue","header::map::Iter","header::map::Drain","header::name::Repr","byte_str::ByteStr","header::value::ToStrError","header::map::IntoIter","uri::Parts","header::map::ExtraValue","header::map::HeaderMap","header::map::ValuesMut","header::map::Values","uri::InvalidUriBytes","method::Method","response::Parts","header::map::ValueDrain","version::Version","request::Builder","header::map::ValueIter","header::map::Cursor","header::name::StandardHeader","<&T as std::fmt::Debug>","uri::InvalidUriParts"]},"header::map::ValueDrain":{"T":["header::map::Iter","header::map::Drain","header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::IterMut"]},"header::map::ValueIter":{"T":["header::value::InvalidHeaderValue","error::Never","method::InvalidMethod","uri::path::PathAndQuery","error::Error","uri::Uri","request::Request","header::map::VacantEntry","header::map::Entry","header::value::InvalidHeaderValueBytes","<&T as std::fmt::Debug>","header::name::InvalidHeaderName","header::map::Drain","header::value::HeaderValue","version::Version","status::InvalidStatusCode","header::map::Values","uri::authority::Authority","extensions::Extensions","response::Parts","status::StatusCode","header::name::MaybeLower","header::name::StandardHeader","header::map::Link","header::map::HashValue","uri::port::Port","header::map::ValueIter","header::map::Iter","uri::InvalidUriParts","uri::scheme::Protocol","request::Parts","method::Method","header::map::GetAll","header::map::ValueIterMut","header::name::Repr","uri::InvalidUri","header::name::InvalidHeaderNameBytes","request::Builder","response::Response","header::value::ToStrError","response::Builder","header::name::Custom","uri::builder::Builder","header::map::Cursor","header::map::IterMut","header::map::Keys","uri::scheme::Scheme","header::map::HeaderMap","uri::ErrorKind","byte_str::ByteStr","uri::InvalidUriBytes","uri::scheme::Scheme2","header::map::ValueDrain","header::map::ExtraValue","header::map::Links","header::map::Bucket","header::name::HeaderName","uri::Parts","header::map::ValuesMut","header::name::HdrName","header::map::IntoIter","header::map::OccupiedEntry"]},"header::map::ValueIterMut":{"T":["header::map::ValueDrain","header::map::Iter","header::map::Drain","<*mut T as std::marker::Send>","header::map::IterMut","header::map::ValueIterMut"]},"header::map::Values":{"T":["extensions::Extensions","header::map::Iter","header::name::HeaderName","header::map::IterMut","header::value::ToStrError","header::map::ValueIterMut","header::value::InvalidHeaderValue","header::map::Values","uri::InvalidUriBytes","header::map::OccupiedEntry","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","header::map::ValuesMut","method::Method","header::map::ValueIter","error::Error","uri::port::Port","uri::scheme::Scheme2","uri::path::PathAndQuery","<&mut T as std::fmt::Debug>","header::name::HdrName","uri::authority::Authority","header::map::ExtraValue","header::name::InvalidHeaderName","header::map::Drain","uri::scheme::Protocol","header::map::Bucket","header::map::GetAll","header::map::HeaderMap","header::map::VacantEntry","status::StatusCode","request::Parts","uri::InvalidUri","uri::builder::Builder","version::Version","uri::InvalidUriParts","header::name::StandardHeader","uri::ErrorKind","uri::Uri","header::value::InvalidHeaderValueBytes","response::Response","uri::Parts","header::value::HeaderValue","header::map::ValueDrain","method::InvalidMethod","error::Never","header::map::Link","response::Builder","byte_str::ByteStr","header::map::Keys","request::Request","header::name::Custom","header::map::HashValue","status::InvalidStatusCode","response::Parts","header::map::Links","uri::scheme::Scheme","header::map::Cursor","header::map::IntoIter","request::Builder","header::name::Repr","header::map::Entry"]},"header::map::ValuesMut":{"T":["header::value::HeaderValue","header::map::ExtraValue","header::name::HdrName","status::StatusCode","uri::Uri","header::name::Custom","method::Method","header::map::IterMut","header::name::MaybeLower","uri::Parts","header::name::InvalidHeaderName","header::map::Keys","uri::InvalidUriBytes","version::Version","uri::builder::Builder","header::map::IntoIter","method::InvalidMethod","request::Builder","uri::scheme::Scheme2","header::map::Iter","error::Never","header::value::ToStrError","uri::InvalidUriParts","header::map::Drain","header::name::StandardHeader","header::map::ValueIterMut","response::Builder","header::name::InvalidHeaderNameBytes","header::map::VacantEntry","header::map::Bucket","uri::InvalidUri","header::map::Links","request::Request","header::name::HeaderName","header::map::Entry","header::map::ValueIter","uri::port::Port","header::map::Cursor","uri::ErrorKind","byte_str::ByteStr","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::value::InvalidHeaderValue","request::Parts","response::Parts","header::map::HashValue","uri::scheme::Scheme","uri::scheme::Protocol","uri::authority::Authority","header::map::Link","header::map::ValuesMut","header::map::ValueDrain","header::map::Values","error::Error","header::map::GetAll","<*mut T as std::fmt::Debug>","header::name::Repr","header::map::HeaderMap","status::InvalidStatusCode","extensions::Extensions","response::Response","header::map::OccupiedEntry"]},"header::name::Repr":{"T":["version::Version","header::name::StandardHeader","header::name::Repr","byte_str::ByteStr","<*const T as std::fmt::Debug>","header::name::Custom"]},"request::Request":{"T":["uri::Parts","uri::Uri","uri::builder::Builder","response::Response","response::Builder","method::Method","version::Version","header::map::HeaderMap","status::StatusCode","request::Request","request::Builder","extensions::Extensions"]},"response::Response":{"T":["request::Request","extensions::Extensions","uri::Parts","status::StatusCode","uri::builder::Builder","header::map::HeaderMap","uri::Uri","response::Builder","request::Builder","version::Version","response::Response","method::Method"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["uri::authority::Authority","uri::port::Port","uri::scheme::Scheme","method::Method","<&T as std::convert::AsRef<U>>","header::value::HeaderValue"]},"uri::scheme::Scheme2":{"T":["uri::scheme::Scheme","header::name::HeaderName","uri::scheme::Scheme2","uri::authority::Authority","header::name::StandardHeader","header::map::Bucket","status::StatusCode","version::Version","uri::Uri","header::map::Link","uri::scheme::Protocol","header::name::Custom","header::map::HashValue","header::map::HeaderMap","header::value::HeaderValue","uri::path::PathAndQuery","header::map::ExtraValue","method::Method","header::map::Cursor","header::name::Repr","std::clone::impls::<impl std::clone::Clone for &mut T>","byte_str::ByteStr","header::name::MaybeLower","std::boxed::Box<byte_str::ByteStr>","header::map::Links"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Request<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<request::Request<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<request::Request<T> as std::fmt::Debug>::fmt(p0, p1);
+<request::Request<T>>::fmt(p0, p1);
-----------------
src/request.rs request::Parts::new
deps:{}
candidates:{}
+request::Parts::new();
+crate::request::Parts::new();
+<request::Parts>::new();
-----------------
src/request.rs <request::Parts as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Parts
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<request::Parts as std::fmt::Debug>::fmt(p0, p1);
+crate::<request::Parts as std::fmt::Debug>::fmt(p0, p1);
+<request::Parts>::fmt(p0, p1);
-----------------
src/request.rs request::Builder::new
deps:{}
candidates:{}
+request::Builder::new();
+crate::request::Builder::new();
+<request::Builder>::new();
-----------------
src/request.rs request::Builder::method
deps:{"request::Builder::method":{"T":["std::marker::Sized"],"method::Method":["convert::HttpTryFrom"]}}
candidates:{"request::Builder::method":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.method(p1);
+request::Builder::method(p0, p1);
+crate::request::Builder::method(p0, p1);
+<request::Builder>::method(p0, p1);
-----------------
src/request.rs request::Builder::method_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Builder
+p0.method_ref();
+request::Builder::method_ref(p0);
+crate::request::Builder::method_ref(p0);
+<request::Builder>::method_ref(p0);
-----------------
src/request.rs request::Builder::uri
deps:{"request::Builder::uri":{"T":["std::marker::Sized"],"uri::Uri":["convert::HttpTryFrom"]}}
candidates:{"request::Builder::uri":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.uri(p1);
+request::Builder::uri(p0, p1);
+crate::request::Builder::uri(p0, p1);
+<request::Builder>::uri(p0, p1);
-----------------
src/request.rs request::Builder::uri_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Builder
+p0.uri_ref();
+request::Builder::uri_ref(p0);
+crate::request::Builder::uri_ref(p0);
+<request::Builder>::uri_ref(p0);
-----------------
src/request.rs request::Builder::version
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // version::Version
+p0.version(p1);
+request::Builder::version(p0, p1);
+crate::request::Builder::version(p0, p1);
+<request::Builder>::version(p0, p1);
-----------------
src/request.rs request::Builder::header
deps:{"request::Builder::header":{"K":["std::marker::Sized"],"V":["std::marker::Sized"],"header::name::HeaderName":["convert::HttpTryFrom"],"header::value::HeaderValue":["convert::HttpTryFrom"]}}
candidates:{"request::Builder::header":{"K":["RUG_ANY"],"V":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // V
+p0.header(p1, p2);
+request::Builder::header(p0, p1, p2);
+crate::request::Builder::header(p0, p1, p2);
+<request::Builder>::header(p0, p1, p2);
-----------------
src/request.rs request::Builder::headers_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // request::Builder
+p0.headers_ref();
+request::Builder::headers_ref(p0);
+crate::request::Builder::headers_ref(p0);
+<request::Builder>::headers_ref(p0);
-----------------
src/request.rs request::Builder::headers_mut
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
+p0.headers_mut();
+request::Builder::headers_mut(p0);
+crate::request::Builder::headers_mut(p0);
+<request::Builder>::headers_mut(p0);
-----------------
src/request.rs request::Builder::extension
deps:{"request::Builder::extension":{"T":["std::marker::Sized","std::marker::Sync","std::any::Any","std::marker::Send"]}}
candidates:{"request::Builder::extension":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extension(p1);
+request::Builder::extension(p0, p1);
+crate::request::Builder::extension(p0, p1);
+<request::Builder>::extension(p0, p1);
-----------------
src/request.rs request::Builder::take_parts
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
+p0.take_parts();
+request::Builder::take_parts(p0);
+crate::request::Builder::take_parts(p0);
+<request::Builder>::take_parts(p0);
-----------------
src/request.rs request::Builder::body
deps:{"request::Builder::body":{"T":["std::marker::Sized"]}}
candidates:{"request::Builder::body":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // request::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.body(p1);
+request::Builder::body(p0, p1);
+crate::request::Builder::body(p0, p1);
+<request::Builder>::body(p0, p1);
-----------------
src/request.rs <request::Builder as std::default::Default>::default
deps:{}
candidates:{}
+<request::Builder as std::default::Default>::default();
+crate::<request::Builder as std::default::Default>::default();
+<request::Builder>::default();
-----------------
src/response.rs <response::Builder as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<response::Builder as std::fmt::Debug>::fmt(p0, p1);
+crate::<response::Builder as std::fmt::Debug>::fmt(p0, p1);
+<response::Builder>::fmt(p0, p1);
-----------------
src/response.rs response::Response::<()>::builder
deps:{}
candidates:{}
+response::Response::<()>::builder();
+crate::response::Response::<()>::builder();
+<response::Response<()>>::builder();
-----------------
src/response.rs response::Response::<T>::new
deps:{"response::Response::<T>::new":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::new":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+response::Response::<T>::new(p0);
+crate::response::Response::<T>::new(p0);
+<response::Response<T>>::new(p0);
-----------------
src/response.rs response::Response::<T>::from_parts
deps:{"response::Response::<T>::from_parts":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::from_parts":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // response::Parts
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+response::Response::<T>::from_parts(p0, p1);
+crate::response::Response::<T>::from_parts(p0, p1);
+<response::Response<T>>::from_parts(p0, p1);
-----------------
src/response.rs response::Response::<T>::status
deps:{"response::Response::<T>::status":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::status":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.status();
+response::Response::<T>::status(p0);
+crate::response::Response::<T>::status(p0);
+<response::Response<T>>::status(p0);
-----------------
src/response.rs response::Response::<T>::status_mut
deps:{"response::Response::<T>::status_mut":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::status_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.status_mut();
+response::Response::<T>::status_mut(p0);
+crate::response::Response::<T>::status_mut(p0);
+<response::Response<T>>::status_mut(p0);
-----------------
src/response.rs response::Response::<T>::version
deps:{"response::Response::<T>::version":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::version":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.version();
+response::Response::<T>::version(p0);
+crate::response::Response::<T>::version(p0);
+<response::Response<T>>::version(p0);
-----------------
src/response.rs response::Response::<T>::version_mut
deps:{"response::Response::<T>::version_mut":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::version_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.version_mut();
+response::Response::<T>::version_mut(p0);
+crate::response::Response::<T>::version_mut(p0);
+<response::Response<T>>::version_mut(p0);
-----------------
src/response.rs response::Response::<T>::headers
deps:{"response::Response::<T>::headers":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::headers":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.headers();
+response::Response::<T>::headers(p0);
+crate::response::Response::<T>::headers(p0);
+<response::Response<T>>::headers(p0);
-----------------
src/response.rs response::Response::<T>::headers_mut
deps:{"response::Response::<T>::headers_mut":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::headers_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.headers_mut();
+response::Response::<T>::headers_mut(p0);
+crate::response::Response::<T>::headers_mut(p0);
+<response::Response<T>>::headers_mut(p0);
-----------------
src/response.rs response::Response::<T>::extensions
deps:{"response::Response::<T>::extensions":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::extensions":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.extensions();
+response::Response::<T>::extensions(p0);
+crate::response::Response::<T>::extensions(p0);
+<response::Response<T>>::extensions(p0);
-----------------
src/response.rs response::Response::<T>::extensions_mut
deps:{"response::Response::<T>::extensions_mut":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::extensions_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.extensions_mut();
+response::Response::<T>::extensions_mut(p0);
+crate::response::Response::<T>::extensions_mut(p0);
+<response::Response<T>>::extensions_mut(p0);
-----------------
src/response.rs response::Response::<T>::body
deps:{"response::Response::<T>::body":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::body":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.body();
+response::Response::<T>::body(p0);
+crate::response::Response::<T>::body(p0);
+<response::Response<T>>::body(p0);
-----------------
src/response.rs response::Response::<T>::body_mut
deps:{"response::Response::<T>::body_mut":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::body_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.body_mut();
+response::Response::<T>::body_mut(p0);
+crate::response::Response::<T>::body_mut(p0);
+<response::Response<T>>::body_mut(p0);
-----------------
src/response.rs response::Response::<T>::into_body
deps:{"response::Response::<T>::into_body":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::into_body":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.into_body();
+response::Response::<T>::into_body(p0);
+crate::response::Response::<T>::into_body(p0);
+<response::Response<T>>::into_body(p0);
-----------------
src/response.rs response::Response::<T>::into_parts
deps:{"response::Response::<T>::into_parts":{"T":["std::marker::Sized"]}}
candidates:{"response::Response::<T>::into_parts":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // response::Response<T>
+p0.into_parts();
+response::Response::<T>::into_parts(p0);
+crate::response::Response::<T>::into_parts(p0);
+<response::Response<T>>::into_parts(p0);
-----------------
src/response.rs response::Response::<T>::map
deps:{"response::Response::<T>::map":{"F":["std::marker::Sized","std::ops::FnOnce"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"response::Response::<T>::map":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","std::panic::AssertUnwindSafe<F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // response::Response<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map(p1);
+response::Response::<T>::map(p0, p1);
+crate::response::Response::<T>::map(p0, p1);
+<response::Response<T>>::map(p0, p1);
-----------------
src/response.rs <response::Response<T> as std::default::Default>::default
deps:{"<response::Response<T> as std::default::Default>::default":{"T":["std::marker::Sized","std::default::Default"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","convert::HttpTryFrom","std::cmp::Eq"]},"request::Request":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]},"response::Response":{"T":["std::default::Default","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<response::Response<T> as std::default::Default>::default":{"T":["status::StatusCode","request::Request","response::Builder","request::Builder","version::Version","uri::Parts","extensions::IdHasher","response::Response","method::Method","extensions::Extensions","uri::Uri","uri::builder::Builder","header::map::HeaderMap"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv4Addr","std::net::Ipv6Addr","header::value::HeaderValue"]},"request::Request":{"T":["uri::Uri","request::Request","header::map::HeaderMap","status::StatusCode","response::Builder","method::Method","extensions::Extensions","request::Builder","uri::Parts","response::Response","uri::builder::Builder","version::Version"]},"response::Response":{"T":["uri::Uri","extensions::Extensions","version::Version","request::Request","status::StatusCode","uri::builder::Builder","uri::Parts","response::Response","header::map::HeaderMap","response::Builder","method::Method","request::Builder"]}}
+<response::Response<T> as std::default::Default>::default();
+crate::<response::Response<T> as std::default::Default>::default();
+<response::Response<T>>::default();
-----------------
src/response.rs <response::Response<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<response::Response<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::Drain":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::Entry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::GetAll":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"header::map::HeaderMap":{"T":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","convert::HttpTryFrom","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Send","std::marker::Sync"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::clone::Clone","std::hash::Hash","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"request::Request":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"response::Response":{"T":["std::fmt::Debug","std::marker::Sized","std::default::Default"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<response::Response<T> as std::fmt::Debug>::fmt":{"T":["uri::InvalidUriParts","header::value::InvalidHeaderValue","uri::authority::Authority","method::InvalidMethod","uri::scheme::Scheme","header::map::Bucket","extensions::Extensions","method::Method","uri::builder::Builder","header::map::ExtraValue","header::map::VacantEntry","<&mut T as std::fmt::Debug>","header::map::ValueDrain","header::map::ValueIterMut","response::Response","uri::InvalidUriBytes","header::name::StandardHeader","header::name::Repr","header::map::Cursor","header::value::HeaderValue","request::Request","header::name::InvalidHeaderNameBytes","header::map::Link","status::StatusCode","uri::scheme::Scheme2","uri::scheme::Protocol","header::map::Drain","header::name::HeaderName","uri::path::PathAndQuery","header::map::IterMut","header::map::Iter","header::map::Values","error::Error","version::Version","error::Never","header::value::InvalidHeaderValueBytes","header::map::ValuesMut","uri::Uri","header::map::HeaderMap","uri::InvalidUri","header::name::MaybeLower","header::map::Entry","header::map::HashValue","request::Parts","status::InvalidStatusCode","byte_str::ByteStr","response::Parts","header::name::InvalidHeaderName","header::map::ValueIter","request::Builder","header::name::Custom","header::map::OccupiedEntry","header::map::Links","header::map::Keys","response::Builder","header::map::IntoIter","header::value::ToStrError","uri::ErrorKind","<*mut T as std::fmt::Debug>","uri::port::Port","uri::Parts","header::map::GetAll","header::name::HdrName"]},"header::map::Bucket":{"T":["header::name::Repr","header::map::Link","std::clone::impls::<impl std::clone::Clone for *mut T>","uri::scheme::Scheme2","header::map::Cursor","uri::Uri","method::Method","header::name::MaybeLower","byte_str::ByteStr","uri::authority::Authority","header::map::Bucket","header::map::HashValue","header::name::StandardHeader","header::map::HeaderMap","uri::path::PathAndQuery","version::Version","header::map::ExtraValue","header::name::HeaderName","header::value::HeaderValue","uri::scheme::Scheme","status::StatusCode","uri::scheme::Protocol","header::name::Custom","header::map::Links"]},"header::map::Drain":{"T":["header::map::Drain","<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::IterMut","header::map::Iter","header::map::ValueDrain"]},"header::map::Entry":{"T":["extensions::Extensions","request::Parts","header::map::ValueIter","response::Response","header::map::HeaderMap","method::Method","uri::Parts","uri::scheme::Scheme2","header::map::Keys","header::value::ToStrError","<&T as std::fmt::Debug>","uri::InvalidUriParts","uri::path::PathAndQuery","header::map::Values","header::map::Link","header::map::Cursor","header::name::Custom","header::map::HashValue","header::map::ExtraValue","error::Error","uri::InvalidUri","header::map::Iter","uri::authority::Authority","status::StatusCode","header::map::IntoIter","status::InvalidStatusCode","header::map::Entry","header::name::InvalidHeaderName","request::Request","request::Builder","header::map::ValueIterMut","uri::Uri","uri::InvalidUriBytes","header::name::StandardHeader","uri::builder::Builder","error::Never","header::value::InvalidHeaderValueBytes","uri::ErrorKind","uri::scheme::Protocol","header::map::ValueDrain","header::name::InvalidHeaderNameBytes","header::value::InvalidHeaderValue","header::name::HdrName","header::name::HeaderName","response::Builder","header::map::Bucket","header::map::VacantEntry","header::map::IterMut","header::map::OccupiedEntry","version::Version","header::map::Links","header::map::ValuesMut","header::name::MaybeLower","header::map::Drain","response::Parts","header::map::GetAll","method::InvalidMethod","header::name::Repr","uri::scheme::Scheme","uri::port::Port","byte_str::ByteStr","header::value::HeaderValue"]},"header::map::ExtraValue":{"T":["header::name::Repr","uri::authority::Authority","byte_str::ByteStr","version::Version","uri::scheme::Protocol","header::map::ExtraValue","header::map::HeaderMap","header::map::Links","header::value::HeaderValue","header::map::Bucket","header::name::Custom","method::Method","header::map::Cursor","uri::scheme::Scheme2","uri::Uri","uri::scheme::Scheme","status::StatusCode","<&mut T as std::fmt::Debug>","uri::path::PathAndQuery","header::map::Link","header::name::MaybeLower","header::name::StandardHeader","header::name::HeaderName","header::map::HashValue"]},"header::map::GetAll":{"T":["header::name::Custom","header::name::StandardHeader","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","uri::ErrorKind","version::Version","header::map::HashValue","header::map::Link","byte_str::ByteStr","header::map::GetAll","header::map::HeaderMap","header::name::Repr","header::map::Cursor"]},"header::map::HeaderMap":{"T":["header::value::HeaderValue","std::net::Ipv4Addr","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["header::map::GetAll","header::value::InvalidHeaderValue","header::map::Keys","header::map::ValuesMut","version::Version","header::value::ToStrError","header::map::Link","header::map::HashValue","uri::path::PathAndQuery","header::map::Drain","header::name::InvalidHeaderName","header::map::IterMut","uri::scheme::Scheme2","method::InvalidMethod","uri::port::Port","status::InvalidStatusCode","uri::InvalidUriParts","uri::scheme::Protocol","status::StatusCode","header::map::Values","uri::Parts","header::name::HeaderName","request::Builder","header::map::OccupiedEntry","response::Response","uri::InvalidUriBytes","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme","header::value::HeaderValue","response::Builder","response::Parts","header::map::Cursor","<*mut T as std::fmt::Debug>","request::Request","header::name::HdrName","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::map::Entry","header::map::VacantEntry","header::map::Iter","uri::authority::Authority","header::map::Links","extensions::Extensions","request::Parts","header::name::Custom","uri::Uri","uri::InvalidUri","header::map::HeaderMap","error::Never","header::map::ValueDrain","header::map::ValueIterMut","header::map::ExtraValue","header::name::Repr","uri::builder::Builder","header::map::IntoIter","method::Method","header::name::MaybeLower","header::map::Bucket","header::name::StandardHeader","uri::ErrorKind","byte_str::ByteStr","error::Error"]},"header::map::Iter":{"T":["<*mut T as std::fmt::Debug>","header::map::Iter","header::map::IterMut","header::map::Drain","header::map::ValueIterMut","header::map::ValueDrain"]},"header::map::IterMut":{"T":["<*const T as std::marker::Sync>","header::map::Drain","header::map::ValueIterMut","header::map::Iter","header::map::IterMut","header::map::ValueDrain"]},"header::map::Keys":{"T":["method::InvalidMethod","header::value::InvalidHeaderValue","<&mut T as std::fmt::Debug>","version::Version","uri::port::Port","header::map::ValueDrain","header::map::Link","header::name::InvalidHeaderName","header::map::HashValue","header::map::Cursor","response::Builder","uri::InvalidUriParts","status::InvalidStatusCode","header::map::Links","header::map::Bucket","error::Never","uri::scheme::Protocol","header::name::HeaderName","header::name::Custom","method::Method","uri::builder::Builder","status::StatusCode","header::name::Repr","uri::Parts","header::map::Drain","header::map::OccupiedEntry","header::map::Iter","uri::InvalidUriBytes","header::map::ValuesMut","header::map::ExtraValue","header::value::HeaderValue","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::value::ToStrError","header::map::IntoIter","response::Response","request::Builder","header::map::Keys","byte_str::ByteStr","header::map::GetAll","header::name::InvalidHeaderNameBytes","request::Parts","request::Request","header::name::StandardHeader","header::map::HeaderMap","uri::ErrorKind","response::Parts","uri::authority::Authority","header::map::Entry","error::Error","header::map::VacantEntry","header::map::IterMut","uri::Uri","extensions::Extensions","uri::scheme::Scheme","uri::path::PathAndQuery","header::name::MaybeLower","header::map::ValueIterMut","header::map::Values","header::name::HdrName","uri::InvalidUri","uri::scheme::Scheme2"]},"header::map::OccupiedEntry":{"T":["header::map::ExtraValue","uri::Uri","header::map::HeaderMap","header::map::Cursor","method::InvalidMethod","header::name::MaybeLower","uri::authority::Authority","uri::scheme::Protocol","uri::scheme::Scheme2","version::Version","uri::InvalidUriParts","byte_str::ByteStr","uri::port::Port","response::Builder","header::name::HdrName","header::name::HeaderName","<*const T as std::fmt::Debug>","uri::builder::Builder","header::map::Keys","response::Response","header::map::Link","header::map::Drain","status::StatusCode","uri::path::PathAndQuery","status::InvalidStatusCode","header::value::ToStrError","method::Method","header::map::ValueIter","header::map::Values","error::Never","header::map::IterMut","header::map::OccupiedEntry","uri::ErrorKind","header::map::GetAll","header::name::InvalidHeaderNameBytes","uri::InvalidUriBytes","header::name::Custom","request::Request","uri::Parts","header::map::Bucket","header::map::IntoIter","uri::scheme::Scheme","header::map::ValuesMut","header::value::InvalidHeaderValue","uri::InvalidUri","request::Builder","header::map::Iter","header::map::Links","header::map::VacantEntry","request::Parts","header::map::Entry","header::name::InvalidHeaderName","header::map::ValueIterMut","header::value::HeaderValue","header::name::StandardHeader","header::name::Repr","extensions::Extensions","header::value::InvalidHeaderValueBytes","error::Error","header::map::ValueDrain","header::map::HashValue","response::Parts"]},"header::map::VacantEntry":{"T":["uri::Parts","header::map::ValueIterMut","error::Error","header::map::ValueDrain","uri::Uri","header::map::Links","header::map::IntoIter","request::Parts","version::Version","uri::ErrorKind","uri::scheme::Scheme2","header::map::Values","uri::scheme::Protocol","error::Never","uri::InvalidUri","header::value::HeaderValue","uri::InvalidUriBytes","header::name::HeaderName","uri::port::Port","uri::builder::Builder","header::name::StandardHeader","header::map::Keys","header::name::MaybeLower","header::map::OccupiedEntry","request::Request","uri::InvalidUriParts","header::map::Entry","header::map::Cursor","status::InvalidStatusCode","header::map::ValuesMut","header::name::Custom","response::Response","method::InvalidMethod","header::map::HashValue","header::map::ExtraValue","header::map::Iter","header::map::Bucket","byte_str::ByteStr","header::map::VacantEntry","uri::path::PathAndQuery","header::map::IterMut","method::Method","uri::authority::Authority","request::Builder","header::map::Drain","header::name::HdrName","header::map::Link","extensions::Extensions","header::name::InvalidHeaderNameBytes","response::Parts","header::name::InvalidHeaderName","response::Builder","header::map::ValueIter","header::value::InvalidHeaderValue","header::value::ToStrError","header::map::GetAll","header::map::HeaderMap","status::StatusCode","<*mut T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","uri::scheme::Scheme","header::name::Repr"]},"header::map::ValueDrain":{"T":["<*const T as std::marker::Sync>","header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut","header::map::IterMut","header::map::Drain"]},"header::map::ValueIter":{"T":["version::Version","header::value::ToStrError","uri::scheme::Scheme2","header::map::Bucket","header::map::Values","uri::InvalidUriBytes","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","status::StatusCode","header::name::Repr","request::Builder","method::Method","method::InvalidMethod","status::InvalidStatusCode","extensions::Extensions","header::map::Links","uri::InvalidUriParts","header::map::ValueIter","uri::ErrorKind","header::name::HdrName","request::Request","byte_str::ByteStr","header::name::Custom","header::name::MaybeLower","header::name::StandardHeader","uri::Parts","uri::Uri","header::map::Cursor","<&mut T as std::fmt::Debug>","header::map::OccupiedEntry","header::map::ValueIterMut","response::Parts","header::map::IterMut","header::map::ValueDrain","request::Parts","header::map::Iter","header::map::GetAll","header::map::ValuesMut","header::map::ExtraValue","header::name::InvalidHeaderName","header::map::HashValue","uri::authority::Authority","header::value::InvalidHeaderValue","error::Error","header::value::HeaderValue","header::map::IntoIter","header::map::Drain","response::Builder","error::Never","header::map::HeaderMap","header::map::Keys","uri::InvalidUri","uri::scheme::Scheme","uri::path::PathAndQuery","uri::builder::Builder","response::Response","uri::port::Port","header::map::Link","header::name::HeaderName","header::map::Entry"]},"header::map::ValueIterMut":{"T":["<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter"]},"header::map::Values":{"T":["header::name::StandardHeader","uri::scheme::Scheme2","header::map::OccupiedEntry","header::map::Link","request::Parts","error::Never","status::StatusCode","header::name::MaybeLower","uri::Parts","header::map::IterMut","header::name::HeaderName","method::Method","header::value::HeaderValue","uri::ErrorKind","header::map::Cursor","header::map::ValuesMut","uri::authority::Authority","request::Request","header::map::GetAll","uri::Uri","uri::path::PathAndQuery","uri::InvalidUri","version::Version","header::name::InvalidHeaderName","header::map::Entry","uri::scheme::Protocol","header::name::InvalidHeaderNameBytes","uri::scheme::Scheme","byte_str::ByteStr","extensions::Extensions","header::map::Drain","header::name::Custom","uri::InvalidUriParts","uri::InvalidUriBytes","header::map::Iter","header::map::IntoIter","header::map::HashValue","header::map::ValueIterMut","response::Response","header::name::HdrName","header::map::Keys","method::InvalidMethod","header::value::InvalidHeaderValueBytes","header::map::ValueDrain","error::Error","header::map::ExtraValue","uri::builder::Builder","response::Parts","header::value::ToStrError","header::map::ValueIter","header::name::Repr","header::map::Values","header::map::VacantEntry","request::Builder","header::map::Links","response::Builder","header::map::Bucket","header::value::InvalidHeaderValue","<*mut T as std::fmt::Debug>","status::InvalidStatusCode","uri::port::Port","header::map::HeaderMap"]},"header::map::ValuesMut":{"T":["header::map::Link","uri::Parts","uri::scheme::Scheme","error::Error","header::map::Keys","request::Parts","header::map::ValueIterMut","header::map::OccupiedEntry","header::name::HdrName","header::map::Links","response::Parts","uri::port::Port","header::map::ValueIter","status::InvalidStatusCode","header::map::Drain","uri::scheme::Scheme2","header::map::ExtraValue","uri::scheme::Protocol","header::map::GetAll","uri::authority::Authority","header::map::Entry","header::map::ValuesMut","header::value::ToStrError","header::value::InvalidHeaderValue","header::name::Custom","method::Method","header::value::InvalidHeaderValueBytes","uri::InvalidUriBytes","method::InvalidMethod","request::Builder","header::map::Iter","header::value::HeaderValue","uri::InvalidUri","header::map::Values","header::map::VacantEntry","header::name::InvalidHeaderNameBytes","version::Version","header::name::MaybeLower","header::map::HeaderMap","header::map::Bucket","uri::path::PathAndQuery","header::name::InvalidHeaderName","extensions::Extensions","header::name::StandardHeader","uri::Uri","header::map::Cursor","header::map::HashValue","header::map::ValueDrain","response::Builder","<*mut T as std::fmt::Debug>","header::name::Repr","header::map::IntoIter","header::name::HeaderName","response::Response","error::Never","header::map::IterMut","status::StatusCode","uri::InvalidUriParts","byte_str::ByteStr","uri::ErrorKind","uri::builder::Builder","request::Request"]},"header::name::Repr":{"T":["header::name::StandardHeader","std::clone::impls::<impl std::clone::Clone for *const T>","version::Version","header::name::Custom","header::name::Repr","byte_str::ByteStr"]},"request::Request":{"T":["version::Version","status::StatusCode","request::Builder","method::Method","request::Request","uri::builder::Builder","uri::Parts","response::Builder","response::Response","extensions::Extensions","uri::Uri","header::map::HeaderMap"]},"response::Response":{"T":["uri::builder::Builder","request::Request","method::Method","uri::Parts","extensions::Extensions","request::Builder","header::map::HeaderMap","uri::Uri","response::Response","version::Version","response::Builder","status::StatusCode"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::scheme::Scheme","uri::authority::Authority","<&T as std::fmt::Debug>","header::value::HeaderValue","method::Method","uri::port::Port"]},"uri::scheme::Scheme2":{"T":["uri::authority::Authority","method::Method","header::name::HeaderName","header::name::StandardHeader","header::map::Bucket","std::clone::impls::<impl std::clone::Clone for &mut T>","header::map::Cursor","uri::Uri","header::map::HeaderMap","uri::scheme::Scheme2","header::map::Links","uri::path::PathAndQuery","uri::scheme::Protocol","header::value::HeaderValue","uri::scheme::Scheme","header::map::HashValue","header::name::Repr","header::map::ExtraValue","version::Version","std::boxed::Box<byte_str::ByteStr>","status::StatusCode","header::name::MaybeLower","header::name::Custom","header::map::Link","byte_str::ByteStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Response<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<response::Response<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<response::Response<T> as std::fmt::Debug>::fmt(p0, p1);
+<response::Response<T>>::fmt(p0, p1);
-----------------
src/response.rs response::Parts::new
deps:{}
candidates:{}
+response::Parts::new();
+crate::response::Parts::new();
+<response::Parts>::new();
-----------------
src/response.rs <response::Parts as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Parts
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<response::Parts as std::fmt::Debug>::fmt(p0, p1);
+crate::<response::Parts as std::fmt::Debug>::fmt(p0, p1);
+<response::Parts>::fmt(p0, p1);
-----------------
src/response.rs response::Builder::new
deps:{}
candidates:{}
+response::Builder::new();
+crate::response::Builder::new();
+<response::Builder>::new();
-----------------
src/response.rs response::Builder::status
deps:{"response::Builder::status":{"T":["std::marker::Sized"],"status::StatusCode":["convert::HttpTryFrom"]}}
candidates:{"response::Builder::status":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.status(p1);
+response::Builder::status(p0, p1);
+crate::response::Builder::status(p0, p1);
+<response::Builder>::status(p0, p1);
-----------------
src/response.rs response::Builder::version
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // version::Version
+p0.version(p1);
+response::Builder::version(p0, p1);
+crate::response::Builder::version(p0, p1);
+<response::Builder>::version(p0, p1);
-----------------
src/response.rs response::Builder::header
deps:{"response::Builder::header":{"K":["std::marker::Sized"],"V":["std::marker::Sized"],"header::name::HeaderName":["convert::HttpTryFrom"],"header::value::HeaderValue":["convert::HttpTryFrom"]}}
candidates:{"response::Builder::header":{"K":["RUG_ANY"],"V":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // K
let mut p2 = MaybeUninit::uninit().assume_init(); // V
+p0.header(p1, p2);
+response::Builder::header(p0, p1, p2);
+crate::response::Builder::header(p0, p1, p2);
+<response::Builder>::header(p0, p1, p2);
-----------------
src/response.rs response::Builder::headers_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // response::Builder
+p0.headers_ref();
+response::Builder::headers_ref(p0);
+crate::response::Builder::headers_ref(p0);
+<response::Builder>::headers_ref(p0);
-----------------
src/response.rs response::Builder::headers_mut
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
+p0.headers_mut();
+response::Builder::headers_mut(p0);
+crate::response::Builder::headers_mut(p0);
+<response::Builder>::headers_mut(p0);
-----------------
src/response.rs response::Builder::extension
deps:{"response::Builder::extension":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::any::Any"]}}
candidates:{"response::Builder::extension":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extension(p1);
+response::Builder::extension(p0, p1);
+crate::response::Builder::extension(p0, p1);
+<response::Builder>::extension(p0, p1);
-----------------
src/response.rs response::Builder::take_parts
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
+p0.take_parts();
+response::Builder::take_parts(p0);
+crate::response::Builder::take_parts(p0);
+<response::Builder>::take_parts(p0);
-----------------
src/response.rs response::Builder::body
deps:{"response::Builder::body":{"T":["std::marker::Sized"]}}
candidates:{"response::Builder::body":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // response::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.body(p1);
+response::Builder::body(p0, p1);
+crate::response::Builder::body(p0, p1);
+<response::Builder>::body(p0, p1);
-----------------
src/response.rs <response::Builder as std::default::Default>::default
deps:{}
candidates:{}
+<response::Builder as std::default::Default>::default();
+crate::<response::Builder as std::default::Default>::default();
+<response::Builder>::default();
-----------------
src/status.rs <status::StatusCode as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.clone();
+<status::StatusCode as std::clone::Clone>::clone(p0);
+crate::<status::StatusCode as std::clone::Clone>::clone(p0);
+<status::StatusCode>::clone(p0);
-----------------
src/status.rs <status::StatusCode as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.eq(p1);
+<status::StatusCode as std::cmp::PartialEq>::eq(p0, p1);
+crate::<status::StatusCode as std::cmp::PartialEq>::eq(p0, p1);
+<status::StatusCode>::eq(p0, p1);
-----------------
src/status.rs <status::StatusCode as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.assert_receiver_is_total_eq();
+<status::StatusCode as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<status::StatusCode as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<status::StatusCode>::assert_receiver_is_total_eq(p0);
-----------------
src/status.rs <status::StatusCode as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.partial_cmp(p1);
+<status::StatusCode as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<status::StatusCode as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<status::StatusCode>::partial_cmp(p0, p1);
-----------------
src/status.rs <status::StatusCode as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.cmp(p1);
+<status::StatusCode as std::cmp::Ord>::cmp(p0, p1);
+crate::<status::StatusCode as std::cmp::Ord>::cmp(p0, p1);
+<status::StatusCode>::cmp(p0, p1);
-----------------
src/status.rs <status::StatusCode as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<status::StatusCode as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<status::StatusCode as std::hash::Hash>::hash":{"__H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<status::StatusCode as std::hash::Hash>::hash(p0, p1);
+crate::<status::StatusCode as std::hash::Hash>::hash(p0, p1);
+<status::StatusCode>::hash(p0, p1);
-----------------
src/status.rs status::StatusCode::from_u16
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+status::StatusCode::from_u16(p0);
+crate::status::StatusCode::from_u16(p0);
+<status::StatusCode>::from_u16(p0);
-----------------
src/status.rs status::StatusCode::from_bytes
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+status::StatusCode::from_bytes(p0);
+crate::status::StatusCode::from_bytes(p0);
+<status::StatusCode>::from_bytes(p0);
-----------------
src/status.rs status::StatusCode::as_u16
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.as_u16();
+status::StatusCode::as_u16(p0);
+crate::status::StatusCode::as_u16(p0);
+<status::StatusCode>::as_u16(p0);
-----------------
src/status.rs status::StatusCode::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.as_str();
+status::StatusCode::as_str(p0);
+crate::status::StatusCode::as_str(p0);
+<status::StatusCode>::as_str(p0);
-----------------
src/status.rs status::StatusCode::canonical_reason
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.canonical_reason();
+status::StatusCode::canonical_reason(p0);
+crate::status::StatusCode::canonical_reason(p0);
+<status::StatusCode>::canonical_reason(p0);
-----------------
src/status.rs status::StatusCode::is_informational
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.is_informational();
+status::StatusCode::is_informational(p0);
+crate::status::StatusCode::is_informational(p0);
+<status::StatusCode>::is_informational(p0);
-----------------
src/status.rs status::StatusCode::is_success
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.is_success();
+status::StatusCode::is_success(p0);
+crate::status::StatusCode::is_success(p0);
+<status::StatusCode>::is_success(p0);
-----------------
src/status.rs status::StatusCode::is_redirection
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.is_redirection();
+status::StatusCode::is_redirection(p0);
+crate::status::StatusCode::is_redirection(p0);
+<status::StatusCode>::is_redirection(p0);
-----------------
src/status.rs status::StatusCode::is_client_error
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.is_client_error();
+status::StatusCode::is_client_error(p0);
+crate::status::StatusCode::is_client_error(p0);
+<status::StatusCode>::is_client_error(p0);
-----------------
src/status.rs status::StatusCode::is_server_error
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.is_server_error();
+status::StatusCode::is_server_error(p0);
+crate::status::StatusCode::is_server_error(p0);
+<status::StatusCode>::is_server_error(p0);
-----------------
src/status.rs <status::StatusCode as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<status::StatusCode as std::fmt::Debug>::fmt(p0, p1);
+crate::<status::StatusCode as std::fmt::Debug>::fmt(p0, p1);
+<status::StatusCode>::fmt(p0, p1);
-----------------
src/status.rs <status::StatusCode as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<status::StatusCode as std::fmt::Display>::fmt(p0, p1);
+crate::<status::StatusCode as std::fmt::Display>::fmt(p0, p1);
+<status::StatusCode>::fmt(p0, p1);
-----------------
src/status.rs <status::StatusCode as std::default::Default>::default
deps:{}
candidates:{}
+<status::StatusCode as std::default::Default>::default();
+crate::<status::StatusCode as std::default::Default>::default();
+<status::StatusCode>::default();
-----------------
src/status.rs <status::StatusCode as std::cmp::PartialEq<u16>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
let mut p1 = & 0u16; // None+u16
+p0.eq(p1);
+<status::StatusCode as std::cmp::PartialEq<u16>>::eq(p0, p1);
+crate::<status::StatusCode as std::cmp::PartialEq<u16>>::eq(p0, p1);
+<status::StatusCode>::eq(p0, p1);
-----------------
src/status.rs status::<impl std::cmp::PartialEq<status::StatusCode> for u16>::eq
deps:{}
candidates:{}
let mut p0 = & 0u16; // None+u16
let mut p1 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+p0.eq(p1);
+status::<impl std::cmp::PartialEq<status::StatusCode> for u16>::eq(p0, p1);
+crate::status::<impl std::cmp::PartialEq<status::StatusCode> for u16>::eq(p0, p1);
+<u16>::eq(p0, p1);
-----------------
src/status.rs status::<impl std::convert::From<status::StatusCode> for u16>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // status::StatusCode
+status::<impl std::convert::From<status::StatusCode> for u16>::from(p0);
+crate::status::<impl std::convert::From<status::StatusCode> for u16>::from(p0);
+<u16>::from(p0);
-----------------
src/status.rs <status::StatusCode as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<status::StatusCode as std::str::FromStr>::from_str(&p0);
+crate::<status::StatusCode as std::str::FromStr>::from_str(&p0);
+<status::StatusCode>::from_str(&p0);
-----------------
src/status.rs <status::StatusCode as std::convert::From<&'a status::StatusCode>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+<status::StatusCode as std::convert::From<&'a status::StatusCode>>::from(p0);
+crate::<status::StatusCode as std::convert::From<&'a status::StatusCode>>::from(p0);
+<status::StatusCode>::from(p0);
-----------------
src/status.rs <status::StatusCode as convert::HttpTryFrom<&'a status::StatusCode>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::StatusCode
+<status::StatusCode as convert::HttpTryFrom<&'a status::StatusCode>>::try_from(p0);
+crate::<status::StatusCode as convert::HttpTryFrom<&'a status::StatusCode>>::try_from(p0);
+<status::StatusCode>::try_from(p0);
-----------------
src/status.rs <status::StatusCode as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<status::StatusCode as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<status::StatusCode as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<status::StatusCode>::try_from(p0);
-----------------
src/status.rs <status::StatusCode as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<status::StatusCode as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<status::StatusCode as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<status::StatusCode>::try_from(&p0);
-----------------
src/status.rs <status::StatusCode as convert::HttpTryFrom<u16>>::try_from
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+<status::StatusCode as convert::HttpTryFrom<u16>>::try_from(p0);
+crate::<status::StatusCode as convert::HttpTryFrom<u16>>::try_from(p0);
+<status::StatusCode>::try_from(p0);
-----------------
src/status.rs status::InvalidStatusCode::new
deps:{}
candidates:{}
+status::InvalidStatusCode::new();
+crate::status::InvalidStatusCode::new();
+<status::InvalidStatusCode>::new();
-----------------
src/status.rs <status::InvalidStatusCode as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::InvalidStatusCode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<status::InvalidStatusCode as std::fmt::Debug>::fmt(p0, p1);
+crate::<status::InvalidStatusCode as std::fmt::Debug>::fmt(p0, p1);
+<status::InvalidStatusCode>::fmt(p0, p1);
-----------------
src/status.rs <status::InvalidStatusCode as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::InvalidStatusCode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<status::InvalidStatusCode as std::fmt::Display>::fmt(p0, p1);
+crate::<status::InvalidStatusCode as std::fmt::Display>::fmt(p0, p1);
+<status::InvalidStatusCode>::fmt(p0, p1);
-----------------
src/status.rs <status::InvalidStatusCode as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // status::InvalidStatusCode
+p0.description();
+<status::InvalidStatusCode as std::error::Error>::description(p0);
+crate::<status::InvalidStatusCode as std::error::Error>::description(p0);
+<status::InvalidStatusCode>::description(p0);
-----------------
src/version.rs <version::Version as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Version
+p0.eq(p1);
+<version::Version as std::cmp::PartialEq>::eq(p0, p1);
+crate::<version::Version as std::cmp::PartialEq>::eq(p0, p1);
+<version::Version>::eq(p0, p1);
-----------------
src/version.rs <version::Version as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Version
+p0.partial_cmp(p1);
+<version::Version as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<version::Version as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<version::Version>::partial_cmp(p0, p1);
-----------------
src/version.rs <version::Version as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
+p0.clone();
+<version::Version as std::clone::Clone>::clone(p0);
+crate::<version::Version as std::clone::Clone>::clone(p0);
+<version::Version>::clone(p0);
-----------------
src/version.rs <version::Version as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
+p0.assert_receiver_is_total_eq();
+<version::Version as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<version::Version as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<version::Version>::assert_receiver_is_total_eq(p0);
-----------------
src/version.rs <version::Version as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Version
+p0.cmp(p1);
+<version::Version as std::cmp::Ord>::cmp(p0, p1);
+crate::<version::Version as std::cmp::Ord>::cmp(p0, p1);
+<version::Version>::cmp(p0, p1);
-----------------
src/version.rs <version::Version as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<version::Version as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<version::Version as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<version::Version as std::hash::Hash>::hash(p0, p1);
+crate::<version::Version as std::hash::Hash>::hash(p0, p1);
+<version::Version>::hash(p0, p1);
-----------------
src/version.rs <version::Http as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Http
+p0.eq(p1);
+<version::Http as std::cmp::PartialEq>::eq(p0, p1);
+crate::<version::Http as std::cmp::PartialEq>::eq(p0, p1);
+<version::Http>::eq(p0, p1);
-----------------
src/version.rs <version::Http as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Http
+p0.partial_cmp(p1);
+<version::Http as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<version::Http as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<version::Http>::partial_cmp(p0, p1);
-----------------
src/version.rs <version::Http as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
+p0.clone();
+<version::Http as std::clone::Clone>::clone(p0);
+crate::<version::Http as std::clone::Clone>::clone(p0);
+<version::Http>::clone(p0);
-----------------
src/version.rs <version::Http as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
+p0.assert_receiver_is_total_eq();
+<version::Http as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<version::Http as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<version::Http>::assert_receiver_is_total_eq(p0);
-----------------
src/version.rs <version::Http as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
let mut p1 = & MaybeUninit::uninit().assume_init(); // version::Http
+p0.cmp(p1);
+<version::Http as std::cmp::Ord>::cmp(p0, p1);
+crate::<version::Http as std::cmp::Ord>::cmp(p0, p1);
+<version::Http>::cmp(p0, p1);
-----------------
src/version.rs <version::Http as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<version::Http as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<version::Http as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Http
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<version::Http as std::hash::Hash>::hash(p0, p1);
+crate::<version::Http as std::hash::Hash>::hash(p0, p1);
+<version::Http>::hash(p0, p1);
-----------------
src/version.rs <version::Version as std::default::Default>::default
deps:{}
candidates:{}
+<version::Version as std::default::Default>::default();
+crate::<version::Version as std::default::Default>::default();
+<version::Version>::default();
-----------------
src/version.rs <version::Version as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // version::Version
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<version::Version as std::fmt::Debug>::fmt(p0, p1);
+crate::<version::Version as std::fmt::Debug>::fmt(p0, p1);
+<version::Version>::fmt(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.clone();
+<uri::authority::Authority as std::clone::Clone>::clone(p0);
+crate::<uri::authority::Authority as std::clone::Clone>::clone(p0);
+<uri::authority::Authority>::clone(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::empty
deps:{}
candidates:{}
+uri::authority::Authority::empty();
+crate::uri::authority::Authority::empty();
+<uri::authority::Authority>::empty();
-----------------
src/uri/authority.rs uri::authority::Authority::from_shared
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+uri::authority::Authority::from_shared(p0);
+crate::uri::authority::Authority::from_shared(p0);
+<uri::authority::Authority>::from_shared(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+uri::authority::Authority::from_static(&p0);
+crate::uri::authority::Authority::from_static(&p0);
+<uri::authority::Authority>::from_static(&p0);
-----------------
src/uri/authority.rs uri::authority::Authority::parse
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+uri::authority::Authority::parse(p0);
+crate::uri::authority::Authority::parse(p0);
+<uri::authority::Authority>::parse(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::parse_non_empty
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+uri::authority::Authority::parse_non_empty(p0);
+crate::uri::authority::Authority::parse_non_empty(p0);
+<uri::authority::Authority>::parse_non_empty(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::host
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.host();
+uri::authority::Authority::host(p0);
+crate::uri::authority::Authority::host(p0);
+<uri::authority::Authority>::host(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::port
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.port();
+uri::authority::Authority::port(p0);
+crate::uri::authority::Authority::port(p0);
+<uri::authority::Authority>::port(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::port_part
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.port_part();
+uri::authority::Authority::port_part(p0);
+crate::uri::authority::Authority::port_part(p0);
+<uri::authority::Authority>::port_part(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::port_u16
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.port_u16();
+uri::authority::Authority::port_u16(p0);
+crate::uri::authority::Authority::port_u16(p0);
+<uri::authority::Authority>::port_u16(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.as_str();
+uri::authority::Authority::as_str(p0);
+crate::uri::authority::Authority::as_str(p0);
+<uri::authority::Authority>::as_str(p0);
-----------------
src/uri/authority.rs uri::authority::Authority::into_bytes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.into_bytes();
+uri::authority::Authority::into_bytes(p0);
+crate::uri::authority::Authority::into_bytes(p0);
+<uri::authority::Authority>::into_bytes(p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::convert::AsRef<str>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.as_ref();
+<uri::authority::Authority as std::convert::AsRef<str>>::as_ref(p0);
+crate::<uri::authority::Authority as std::convert::AsRef<str>>::as_ref(p0);
+<uri::authority::Authority>::as_ref(p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.eq(p1);
+<uri::authority::Authority as std::cmp::PartialEq>::eq(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialEq>::eq(p0, p1);
+<uri::authority::Authority>::eq(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<uri::authority::Authority as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<uri::authority::Authority as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<uri::authority::Authority>::eq(p0, &p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.eq(p1);
+uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for str>::eq(&p0, p1);
+crate::uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.eq(p1);
+uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for &'a str>::eq(p0, p1);
+crate::uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialEq<&'a str>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & "a"; // None+&'a str
+p0.eq(p1);
+<uri::authority::Authority as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+<uri::authority::Authority>::eq(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialEq<std::string::String>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.eq(p1);
+<uri::authority::Authority as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+<uri::authority::Authority>::eq(p0, p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for std::string::String>::eq
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.eq(p1);
+uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for std::string::String>::eq(p0, p1);
+crate::uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for std::string::String>::eq(p0, p1);
+<std::string::String>::eq(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.partial_cmp(p1);
+<uri::authority::Authority as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<uri::authority::Authority>::partial_cmp(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialOrd<str>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = "sample"; // None+&str
+p0.partial_cmp(&p1);
+<uri::authority::Authority as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+crate::<uri::authority::Authority as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+<uri::authority::Authority>::partial_cmp(p0, &p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for str>::partial_cmp
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.partial_cmp(p1);
+uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for str>::partial_cmp(&p0, p1);
+crate::uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for str>::partial_cmp(&p0, p1);
+<str>::partial_cmp(&p0, p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for &'a str>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.partial_cmp(p1);
+uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for &'a str>::partial_cmp(p0, p1);
+crate::uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for &'a str>::partial_cmp(p0, p1);
+<&'a str>::partial_cmp(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialOrd<&'a str>>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & "a"; // None+&'a str
+p0.partial_cmp(p1);
+<uri::authority::Authority as std::cmp::PartialOrd<&'a str>>::partial_cmp(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialOrd<&'a str>>::partial_cmp(p0, p1);
+<uri::authority::Authority>::partial_cmp(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::cmp::PartialOrd<std::string::String>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.partial_cmp(p1);
+<uri::authority::Authority as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+crate::<uri::authority::Authority as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+<uri::authority::Authority>::partial_cmp(p0, p1);
-----------------
src/uri/authority.rs uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for std::string::String>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+p0.partial_cmp(p1);
+uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for std::string::String>::partial_cmp(p0, p1);
+crate::uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for std::string::String>::partial_cmp(p0, p1);
+<std::string::String>::partial_cmp(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<uri::authority::Authority as std::hash::Hash>::hash":{"H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<uri::authority::Authority as std::hash::Hash>::hash":{"H":["extensions::IdHasher","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<uri::authority::Authority as std::hash::Hash>::hash(p0, p1);
+crate::<uri::authority::Authority as std::hash::Hash>::hash(p0, p1);
+<uri::authority::Authority>::hash(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<uri::authority::Authority as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<uri::authority::Authority as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<uri::authority::Authority>::try_from(p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<uri::authority::Authority as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<uri::authority::Authority as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<uri::authority::Authority>::try_from(p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::authority::Authority as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<uri::authority::Authority as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<uri::authority::Authority>::try_from(&p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::authority::Authority as std::str::FromStr>::from_str(&p0);
+crate::<uri::authority::Authority as std::str::FromStr>::from_str(&p0);
+<uri::authority::Authority>::from_str(&p0);
-----------------
src/uri/authority.rs uri::authority::<impl std::convert::From<uri::authority::Authority> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+uri::authority::<impl std::convert::From<uri::authority::Authority> for bytes::Bytes>::from(p0);
+crate::uri::authority::<impl std::convert::From<uri::authority::Authority> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::authority::Authority as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::authority::Authority as std::fmt::Debug>::fmt(p0, p1);
+<uri::authority::Authority>::fmt(p0, p1);
-----------------
src/uri/authority.rs <uri::authority::Authority as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::authority::Authority
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::authority::Authority as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::authority::Authority as std::fmt::Display>::fmt(p0, p1);
+<uri::authority::Authority>::fmt(p0, p1);
-----------------
src/uri/builder.rs <uri::builder::Builder as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::builder::Builder
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::builder::Builder as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::builder::Builder as std::fmt::Debug>::fmt(p0, p1);
+<uri::builder::Builder>::fmt(p0, p1);
-----------------
src/uri/builder.rs uri::builder::Builder::new
deps:{}
candidates:{}
+uri::builder::Builder::new();
+crate::uri::builder::Builder::new();
+<uri::builder::Builder>::new();
-----------------
src/uri/builder.rs uri::builder::Builder::scheme
deps:{"uri::builder::Builder::scheme":{"T":["std::marker::Sized"],"uri::scheme::Scheme":["convert::HttpTryFrom"]}}
candidates:{"uri::builder::Builder::scheme":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // uri::builder::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.scheme(p1);
+uri::builder::Builder::scheme(p0, p1);
+crate::uri::builder::Builder::scheme(p0, p1);
+<uri::builder::Builder>::scheme(p0, p1);
-----------------
src/uri/builder.rs uri::builder::Builder::authority
deps:{"uri::builder::Builder::authority":{"T":["std::marker::Sized"],"uri::authority::Authority":["convert::HttpTryFrom"]}}
candidates:{"uri::builder::Builder::authority":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // uri::builder::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.authority(p1);
+uri::builder::Builder::authority(p0, p1);
+crate::uri::builder::Builder::authority(p0, p1);
+<uri::builder::Builder>::authority(p0, p1);
-----------------
src/uri/builder.rs uri::builder::Builder::path_and_query
deps:{"uri::builder::Builder::path_and_query":{"T":["std::marker::Sized"],"uri::path::PathAndQuery":["convert::HttpTryFrom"]}}
candidates:{"uri::builder::Builder::path_and_query":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // uri::builder::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.path_and_query(p1);
+uri::builder::Builder::path_and_query(p0, p1);
+crate::uri::builder::Builder::path_and_query(p0, p1);
+<uri::builder::Builder>::path_and_query(p0, p1);
-----------------
src/uri/builder.rs uri::builder::Builder::build
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // uri::builder::Builder
+p0.build();
+uri::builder::Builder::build(p0);
+crate::uri::builder::Builder::build(p0);
+<uri::builder::Builder>::build(p0);
-----------------
src/uri/builder.rs uri::builder::Builder::map
deps:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"uri::builder::Builder::map":{"F":["std::marker::Sized","std::ops::FnOnce"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"uri::builder::Builder::map":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::panic::AssertUnwindSafe<F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // uri::builder::Builder
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map(p1);
+uri::builder::Builder::map(p0, p1);
+crate::uri::builder::Builder::map(p0, p1);
+<uri::builder::Builder>::map(p0, p1);
-----------------
src/uri/builder.rs <uri::builder::Builder as std::default::Default>::default
deps:{}
candidates:{}
+<uri::builder::Builder as std::default::Default>::default();
+crate::<uri::builder::Builder as std::default::Default>::default();
+<uri::builder::Builder>::default();
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.clone();
+<uri::path::PathAndQuery as std::clone::Clone>::clone(p0);
+crate::<uri::path::PathAndQuery as std::clone::Clone>::clone(p0);
+<uri::path::PathAndQuery>::clone(p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::from_shared
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+uri::path::PathAndQuery::from_shared(p0);
+crate::uri::path::PathAndQuery::from_shared(p0);
+<uri::path::PathAndQuery>::from_shared(p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+uri::path::PathAndQuery::from_static(&p0);
+crate::uri::path::PathAndQuery::from_static(&p0);
+<uri::path::PathAndQuery>::from_static(&p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::empty
deps:{}
candidates:{}
+uri::path::PathAndQuery::empty();
+crate::uri::path::PathAndQuery::empty();
+<uri::path::PathAndQuery>::empty();
-----------------
src/uri/path.rs uri::path::PathAndQuery::slash
deps:{}
candidates:{}
+uri::path::PathAndQuery::slash();
+crate::uri::path::PathAndQuery::slash();
+<uri::path::PathAndQuery>::slash();
-----------------
src/uri/path.rs uri::path::PathAndQuery::star
deps:{}
candidates:{}
+uri::path::PathAndQuery::star();
+crate::uri::path::PathAndQuery::star();
+<uri::path::PathAndQuery>::star();
-----------------
src/uri/path.rs uri::path::PathAndQuery::path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.path();
+uri::path::PathAndQuery::path(p0);
+crate::uri::path::PathAndQuery::path(p0);
+<uri::path::PathAndQuery>::path(p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::query
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.query();
+uri::path::PathAndQuery::query(p0);
+crate::uri::path::PathAndQuery::query(p0);
+<uri::path::PathAndQuery>::query(p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.as_str();
+uri::path::PathAndQuery::as_str(p0);
+crate::uri::path::PathAndQuery::as_str(p0);
+<uri::path::PathAndQuery>::as_str(p0);
-----------------
src/uri/path.rs uri::path::PathAndQuery::into_bytes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.into_bytes();
+uri::path::PathAndQuery::into_bytes(p0);
+crate::uri::path::PathAndQuery::into_bytes(p0);
+<uri::path::PathAndQuery>::into_bytes(p0);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<uri::path::PathAndQuery as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<uri::path::PathAndQuery as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<uri::path::PathAndQuery>::try_from(p0);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<uri::path::PathAndQuery as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<uri::path::PathAndQuery as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<uri::path::PathAndQuery>::try_from(p0);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::path::PathAndQuery as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<uri::path::PathAndQuery as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<uri::path::PathAndQuery>::try_from(&p0);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::path::PathAndQuery as std::str::FromStr>::from_str(&p0);
+crate::<uri::path::PathAndQuery as std::str::FromStr>::from_str(&p0);
+<uri::path::PathAndQuery>::from_str(&p0);
-----------------
src/uri/path.rs uri::path::<impl std::convert::From<uri::path::PathAndQuery> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+uri::path::<impl std::convert::From<uri::path::PathAndQuery> for bytes::Bytes>::from(p0);
+crate::uri::path::<impl std::convert::From<uri::path::PathAndQuery> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::path::PathAndQuery as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::path::PathAndQuery as std::fmt::Debug>::fmt(p0, p1);
+<uri::path::PathAndQuery>::fmt(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::path::PathAndQuery as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::path::PathAndQuery as std::fmt::Display>::fmt(p0, p1);
+<uri::path::PathAndQuery>::fmt(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.eq(p1);
+<uri::path::PathAndQuery as std::cmp::PartialEq>::eq(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialEq>::eq(p0, p1);
+<uri::path::PathAndQuery>::eq(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<uri::path::PathAndQuery as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<uri::path::PathAndQuery>::eq(p0, &p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.eq(p1);
+uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for &'a str>::eq(p0, p1);
+crate::uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialEq<&'a str>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & "a"; // None+&'a str
+p0.eq(p1);
+<uri::path::PathAndQuery as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+<uri::path::PathAndQuery>::eq(p0, p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.eq(p1);
+uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for str>::eq(&p0, p1);
+crate::uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialEq<std::string::String>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.eq(p1);
+<uri::path::PathAndQuery as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialEq<std::string::String>>::eq(p0, p1);
+<uri::path::PathAndQuery>::eq(p0, p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for std::string::String>::eq
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.eq(p1);
+uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for std::string::String>::eq(p0, p1);
+crate::uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for std::string::String>::eq(p0, p1);
+<std::string::String>::eq(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.partial_cmp(p1);
+<uri::path::PathAndQuery as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<uri::path::PathAndQuery>::partial_cmp(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialOrd<str>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = "sample"; // None+&str
+p0.partial_cmp(&p1);
+<uri::path::PathAndQuery as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialOrd<str>>::partial_cmp(p0, &p1);
+<uri::path::PathAndQuery>::partial_cmp(p0, &p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for str>::partial_cmp
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.partial_cmp(p1);
+uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for str>::partial_cmp(&p0, p1);
+crate::uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for str>::partial_cmp(&p0, p1);
+<str>::partial_cmp(&p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialOrd<&'a str>>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & "a"; // None+&'a str
+p0.partial_cmp(p1);
+<uri::path::PathAndQuery as std::cmp::PartialOrd<&'a str>>::partial_cmp(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialOrd<&'a str>>::partial_cmp(p0, p1);
+<uri::path::PathAndQuery>::partial_cmp(p0, p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for &'a str>::partial_cmp
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.partial_cmp(p1);
+uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for &'a str>::partial_cmp(p0, p1);
+crate::uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for &'a str>::partial_cmp(p0, p1);
+<&'a str>::partial_cmp(p0, p1);
-----------------
src/uri/path.rs <uri::path::PathAndQuery as std::cmp::PartialOrd<std::string::String>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
let mut p1 = & std::string::String::new(); // None+std::string::String
+p0.partial_cmp(p1);
+<uri::path::PathAndQuery as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+crate::<uri::path::PathAndQuery as std::cmp::PartialOrd<std::string::String>>::partial_cmp(p0, p1);
+<uri::path::PathAndQuery>::partial_cmp(p0, p1);
-----------------
src/uri/path.rs uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for std::string::String>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+p0.partial_cmp(p1);
+uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for std::string::String>::partial_cmp(p0, p1);
+crate::uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for std::string::String>::partial_cmp(p0, p1);
+<std::string::String>::partial_cmp(p0, p1);
-----------------
src/uri/port.rs uri::port::Port::<T>::as_u16
deps:{"uri::port::Port::<T>::as_u16":{"T":["std::marker::Sized"]}}
candidates:{"uri::port::Port::<T>::as_u16":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
+p0.as_u16();
+uri::port::Port::<T>::as_u16(p0);
+crate::uri::port::Port::<T>::as_u16(p0);
+<uri::port::Port<T>>::as_u16(p0);
-----------------
src/uri/port.rs uri::port::Port::<T>::from_str
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]},"uri::port::Port::<T>::from_str":{"T":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"uri::port::Port":{"T":["uri::authority::Authority","uri::scheme::Scheme","uri::port::Port","<&mut T as std::fmt::Debug>","header::value::HeaderValue","method::Method"]},"uri::port::Port::<T>::from_str":{"T":["header::value::HeaderValue","method::Method","uri::port::Port","uri::scheme::Scheme","uri::authority::Authority","<&T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+uri::port::Port::<T>::from_str(p0);
+crate::uri::port::Port::<T>::from_str(p0);
+<uri::port::Port<T>>::from_str(p0);
-----------------
src/uri/port.rs uri::port::Port::<T>::as_str
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"uri::port::Port":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]},"uri::port::Port::<T>::as_str":{"T":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"uri::port::Port":{"T":["uri::authority::Authority","header::value::HeaderValue","uri::port::Port","method::Method","uri::scheme::Scheme","<&T as std::convert::AsRef<U>>"]},"uri::port::Port::<T>::as_str":{"T":["header::value::HeaderValue","uri::scheme::Scheme","uri::port::Port","method::Method","<&T as std::convert::AsRef<U>>","uri::authority::Authority","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
+p0.as_str();
+uri::port::Port::<T>::as_str(p0);
+crate::uri::port::Port::<T>::as_str(p0);
+<uri::port::Port<T>>::as_str(p0);
-----------------
src/uri/port.rs <uri::port::Port<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<uri::port::Port<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","convert::HttpTryFrom","std::fmt::Debug","std::marker::Sized"]},"header::map::IntoIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized","std::marker::Send"]},"header::map::Keys":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::OccupiedEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::VacantEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueDrain":{"T":["std::marker::Sized","std::marker::Send","std::marker::Sync","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::Values":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValuesMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::name::Repr":{"T":["std::clone::Clone","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"request::Request":{"T":["std::marker::Sized","std::fmt::Debug","std::default::Default"]},"response::Response":{"T":["std::default::Default","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<uri::port::Port<T> as std::fmt::Debug>::fmt":{"T":["response::Response","uri::authority::Authority","status::StatusCode","header::map::IterMut","uri::port::Port","header::map::OccupiedEntry","method::InvalidMethod","header::map::Bucket","uri::Uri","header::map::HashValue","header::value::InvalidHeaderValueBytes","header::name::StandardHeader","<&mut T as std::fmt::Debug>","header::name::HdrName","header::map::VacantEntry","method::Method","uri::InvalidUri","header::map::ValueIter","status::InvalidStatusCode","header::map::ValuesMut","header::map::Link","header::map::Drain","error::Error","uri::scheme::Protocol","uri::builder::Builder","header::name::InvalidHeaderNameBytes","uri::InvalidUriBytes","header::map::Values","response::Parts","header::map::Links","request::Builder","uri::path::PathAndQuery","header::map::Iter","uri::ErrorKind","extensions::Extensions","header::value::HeaderValue","request::Request","header::name::HeaderName","header::map::ExtraValue","header::name::MaybeLower","response::Builder","header::map::ValueIterMut","header::name::Custom","request::Parts","version::Version","header::name::InvalidHeaderName","header::map::IntoIter","uri::Parts","header::map::GetAll","uri::scheme::Scheme2","uri::InvalidUriParts","<&T as std::fmt::Debug>","error::Never","header::name::Repr","header::map::Cursor","header::map::Entry","header::map::HeaderMap","uri::scheme::Scheme","byte_str::ByteStr","header::map::ValueDrain","header::value::InvalidHeaderValue","header::value::ToStrError","header::map::Keys"]},"header::map::Bucket":{"T":["method::Method","uri::authority::Authority","header::map::Bucket","uri::Uri","header::name::MaybeLower","header::name::StandardHeader","header::map::HashValue","header::name::Custom","header::map::Cursor","byte_str::ByteStr","header::map::Link","header::map::ExtraValue","header::value::HeaderValue","uri::scheme::Scheme2","uri::scheme::Protocol","status::StatusCode","version::Version","header::map::HeaderMap","header::name::Repr","<&T as std::fmt::Debug>","header::name::HeaderName","header::map::Links","uri::path::PathAndQuery","uri::scheme::Scheme"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::Drain","<*mut T as std::marker::Send>","header::map::ValueIterMut","header::map::Iter"]},"header::map::Entry":{"T":["header::value::InvalidHeaderValueBytes","header::name::Custom","header::map::Link","header::name::MaybeLower","header::map::Links","method::Method","header::map::ValuesMut","header::map::GetAll","header::map::HeaderMap","uri::ErrorKind","extensions::Extensions","header::map::ValueDrain","response::Response","header::value::InvalidHeaderValue","header::name::HeaderName","uri::Uri","request::Request","header::map::Values","header::map::Drain","header::map::IntoIter","header::map::Cursor","header::name::InvalidHeaderNameBytes","uri::InvalidUri","header::map::Entry","<*const T as std::fmt::Debug>","error::Never","header::map::Bucket","header::name::HdrName","uri::scheme::Scheme","method::InvalidMethod","error::Error","uri::scheme::Scheme2","header::value::ToStrError","header::map::VacantEntry","header::map::ValueIter","request::Builder","uri::scheme::Protocol","header::name::StandardHeader","uri::port::Port","header::map::IterMut","header::map::ExtraValue","uri::Parts","uri::InvalidUriBytes","uri::path::PathAndQuery","header::map::HashValue","byte_str::ByteStr","header::map::ValueIterMut","status::StatusCode","response::Builder","header::map::Iter","header::name::Repr","status::InvalidStatusCode","request::Parts","response::Parts","header::map::Keys","header::map::OccupiedEntry","uri::authority::Authority","version::Version","uri::builder::Builder","header::name::InvalidHeaderName","header::value::HeaderValue","uri::InvalidUriParts"]},"header::map::ExtraValue":{"T":["version::Version","method::Method","header::map::Link","header::name::MaybeLower","header::map::Links","header::map::ExtraValue","uri::authority::Authority","header::map::Bucket","header::map::HeaderMap","byte_str::ByteStr","uri::Uri","<&T as std::fmt::Debug>","uri::path::PathAndQuery","header::name::StandardHeader","status::StatusCode","header::value::HeaderValue","header::map::Cursor","uri::scheme::Scheme2","header::name::HeaderName","header::name::Repr","header::map::HashValue","uri::scheme::Protocol","header::name::Custom","uri::scheme::Scheme"]},"header::map::GetAll":{"T":["header::map::Link","header::map::Cursor","version::Version","header::map::GetAll","header::map::HashValue","byte_str::ByteStr","header::name::Custom","header::name::StandardHeader","uri::ErrorKind","<*mut T as std::fmt::Debug>","header::name::Repr","header::map::HeaderMap"]},"header::map::HeaderMap":{"T":["std::net::Ipv6Addr","header::value::HeaderValue","std::net::Ipv4Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::map::IntoIter":{"T":["<&mut T as std::fmt::Debug>","uri::port::Port","header::name::HdrName","status::StatusCode","uri::authority::Authority","response::Response","response::Parts","method::Method","header::value::InvalidHeaderValue","header::map::ValuesMut","uri::scheme::Scheme2","uri::Parts","header::map::ValueIterMut","request::Request","header::map::ValueDrain","header::map::IntoIter","request::Builder","header::map::GetAll","header::name::Repr","uri::InvalidUriParts","header::name::InvalidHeaderName","header::map::HeaderMap","header::map::OccupiedEntry","header::name::InvalidHeaderNameBytes","error::Error","uri::path::PathAndQuery","header::map::Entry","header::name::Custom","header::map::HashValue","header::map::Bucket","header::map::IterMut","uri::Uri","header::map::ExtraValue","uri::scheme::Scheme","header::name::HeaderName","header::map::Drain","header::value::InvalidHeaderValueBytes","header::map::ValueIter","header::map::Links","uri::builder::Builder","uri::InvalidUri","request::Parts","header::map::VacantEntry","header::value::ToStrError","header::map::Iter","byte_str::ByteStr","header::name::StandardHeader","uri::InvalidUriBytes","status::InvalidStatusCode","header::map::Values","uri::ErrorKind","extensions::Extensions","version::Version","uri::scheme::Protocol","header::value::HeaderValue","header::map::Link","header::map::Keys","error::Never","header::name::MaybeLower","response::Builder","method::InvalidMethod","header::map::Cursor"]},"header::map::Iter":{"T":["<*const T as std::marker::Sync>","header::map::IterMut","header::map::Iter","header::map::ValueIterMut","header::map::Drain","header::map::ValueDrain"]},"header::map::IterMut":{"T":["<*mut T as std::marker::Send>","header::map::Drain","header::map::IterMut","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter"]},"header::map::Keys":{"T":["header::map::Link","request::Parts","uri::authority::Authority","extensions::Extensions","header::name::InvalidHeaderName","header::map::Drain","header::map::ExtraValue","uri::InvalidUriBytes","header::map::GetAll","header::map::ValueDrain","header::map::ValuesMut","error::Error","header::name::Repr","uri::port::Port","response::Parts","error::Never","<&T as std::fmt::Debug>","header::map::Entry","header::map::Links","header::map::Iter","header::map::IterMut","request::Request","uri::path::PathAndQuery","uri::builder::Builder","header::value::HeaderValue","header::map::OccupiedEntry","uri::Uri","header::value::ToStrError","uri::scheme::Scheme2","header::map::HashValue","method::Method","header::name::HeaderName","response::Builder","uri::InvalidUriParts","uri::InvalidUri","header::value::InvalidHeaderValue","header::map::HeaderMap","header::map::ValueIter","header::map::Values","header::map::Bucket","uri::scheme::Protocol","method::InvalidMethod","header::value::InvalidHeaderValueBytes","uri::ErrorKind","header::name::HdrName","header::name::StandardHeader","header::map::IntoIter","status::StatusCode","version::Version","header::name::MaybeLower","response::Response","header::map::VacantEntry","header::name::InvalidHeaderNameBytes","header::name::Custom","uri::Parts","request::Builder","uri::scheme::Scheme","header::map::Keys","header::map::ValueIterMut","header::map::Cursor","byte_str::ByteStr","status::InvalidStatusCode"]},"header::map::OccupiedEntry":{"T":["uri::path::PathAndQuery","uri::Uri","method::InvalidMethod","header::value::InvalidHeaderValueBytes","uri::InvalidUriBytes","header::value::InvalidHeaderValue","header::map::Values","header::name::StandardHeader","header::map::Link","header::map::ValuesMut","header::name::HeaderName","error::Never","header::name::Custom","uri::authority::Authority","header::map::HashValue","uri::Parts","header::map::Keys","header::map::Bucket","response::Parts","uri::port::Port","header::map::Links","request::Request","uri::builder::Builder","response::Builder","request::Parts","header::map::VacantEntry","header::map::HeaderMap","uri::InvalidUriParts","header::value::HeaderValue","uri::ErrorKind","response::Response","header::map::ValueIter","header::map::ValueDrain","byte_str::ByteStr","<&mut T as std::fmt::Debug>","version::Version","header::map::GetAll","header::map::Iter","header::map::Cursor","request::Builder","error::Error","header::name::Repr","header::map::ExtraValue","header::map::ValueIterMut","status::StatusCode","header::map::Drain","header::name::MaybeLower","header::map::OccupiedEntry","status::InvalidStatusCode","header::name::InvalidHeaderNameBytes","extensions::Extensions","uri::InvalidUri","uri::scheme::Protocol","method::Method","uri::scheme::Scheme2","header::map::IterMut","uri::scheme::Scheme","header::map::IntoIter","header::name::InvalidHeaderName","header::name::HdrName","header::value::ToStrError","header::map::Entry"]},"header::map::VacantEntry":{"T":["uri::scheme::Scheme2","header::name::MaybeLower","uri::authority::Authority","header::map::Links","header::value::HeaderValue","header::map::ValueDrain","extensions::Extensions","request::Parts","uri::InvalidUriBytes","header::map::ValuesMut","uri::Parts","header::name::HdrName","byte_str::ByteStr","header::map::HashValue","header::map::IterMut","header::name::Repr","uri::ErrorKind","header::name::Custom","header::name::InvalidHeaderNameBytes","header::name::StandardHeader","header::map::Cursor","header::map::IntoIter","uri::scheme::Scheme","version::Version","method::InvalidMethod","uri::InvalidUri","status::InvalidStatusCode","header::name::InvalidHeaderName","header::map::OccupiedEntry","header::map::Bucket","header::map::Values","header::map::HeaderMap","response::Parts","header::map::Drain","header::value::ToStrError","header::name::HeaderName","<*const T as std::fmt::Debug>","response::Response","header::value::InvalidHeaderValue","uri::InvalidUriParts","error::Error","header::map::Entry","request::Builder","uri::path::PathAndQuery","response::Builder","header::map::Iter","method::Method","status::StatusCode","error::Never","header::map::ValueIterMut","header::map::ExtraValue","header::map::Link","header::map::ValueIter","request::Request","uri::builder::Builder","uri::scheme::Protocol","header::map::Keys","uri::port::Port","header::map::VacantEntry","uri::Uri","header::map::GetAll","header::value::InvalidHeaderValueBytes"]},"header::map::ValueDrain":{"T":["header::map::Drain","header::map::ValueDrain","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Iter","header::map::IterMut"]},"header::map::ValueIter":{"T":["uri::InvalidUriBytes","response::Builder","header::map::HeaderMap","header::map::Iter","header::map::ValueDrain","header::map::Values","byte_str::ByteStr","header::map::GetAll","uri::ErrorKind","error::Error","uri::builder::Builder","extensions::Extensions","header::value::InvalidHeaderValue","uri::InvalidUriParts","status::InvalidStatusCode","response::Parts","header::map::Bucket","header::value::ToStrError","header::map::ValueIter","uri::port::Port","header::name::Repr","header::name::HdrName","method::Method","header::map::Link","uri::Parts","<&T as std::fmt::Debug>","header::value::InvalidHeaderValueBytes","header::map::VacantEntry","header::name::StandardHeader","header::name::HeaderName","header::map::ValueIterMut","status::StatusCode","header::map::Entry","uri::scheme::Scheme","header::map::IntoIter","header::map::Keys","uri::scheme::Scheme2","header::name::Custom","request::Request","uri::path::PathAndQuery","version::Version","uri::authority::Authority","header::map::Cursor","header::name::InvalidHeaderNameBytes","response::Response","header::map::ValuesMut","method::InvalidMethod","header::map::IterMut","error::Never","header::map::ExtraValue","header::name::InvalidHeaderName","header::name::MaybeLower","uri::scheme::Protocol","request::Builder","header::map::OccupiedEntry","header::map::HashValue","header::map::Drain","header::map::Links","header::value::HeaderValue","uri::Uri","uri::InvalidUri","request::Parts"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","<*mut T as std::marker::Send>","header::map::ValueIterMut","header::map::ValueDrain","header::map::Drain","header::map::Iter"]},"header::map::Values":{"T":["<*mut T as std::fmt::Debug>","header::map::Values","header::map::OccupiedEntry","header::map::IntoIter","header::map::Drain","header::name::HeaderName","status::StatusCode","header::map::HeaderMap","header::map::VacantEntry","uri::authority::Authority","header::map::Link","uri::InvalidUriParts","header::name::Custom","byte_str::ByteStr","header::name::StandardHeader","header::map::Bucket","header::map::ValuesMut","uri::port::Port","header::value::ToStrError","request::Request","response::Builder","header::map::ExtraValue","uri::InvalidUriBytes","method::Method","header::map::HashValue","version::Version","header::map::IterMut","header::name::MaybeLower","uri::path::PathAndQuery","header::name::HdrName","header::name::Repr","method::InvalidMethod","status::InvalidStatusCode","header::value::InvalidHeaderValueBytes","header::value::HeaderValue","uri::ErrorKind","uri::InvalidUri","header::map::Links","header::name::InvalidHeaderNameBytes","header::map::ValueIterMut","header::map::ValueDrain","uri::scheme::Scheme","request::Parts","error::Error","request::Builder","header::value::InvalidHeaderValue","uri::scheme::Scheme2","response::Parts","extensions::Extensions","uri::Parts","header::map::Cursor","error::Never","header::map::GetAll","uri::builder::Builder","header::map::Entry","header::map::Iter","uri::scheme::Protocol","uri::Uri","response::Response","header::name::InvalidHeaderName","header::map::ValueIter","header::map::Keys"]},"header::map::ValuesMut":{"T":["method::InvalidMethod","header::map::IntoIter","header::map::IterMut","header::map::Link","header::name::InvalidHeaderName","header::map::OccupiedEntry","byte_str::ByteStr","header::name::HeaderName","request::Builder","header::name::HdrName","response::Response","header::map::ValueIterMut","header::map::Drain","<*const T as std::fmt::Debug>","uri::Uri","header::value::InvalidHeaderValue","header::map::Cursor","uri::ErrorKind","header::name::Custom","header::map::GetAll","header::value::ToStrError","header::map::HeaderMap","header::map::Entry","header::name::StandardHeader","uri::InvalidUri","header::map::Bucket","uri::InvalidUriParts","header::map::Iter","uri::port::Port","header::name::Repr","response::Parts","error::Error","header::name::InvalidHeaderNameBytes","request::Request","header::map::Links","version::Version","header::map::Keys","uri::authority::Authority","header::name::MaybeLower","header::map::ValuesMut","header::map::ExtraValue","status::InvalidStatusCode","uri::scheme::Protocol","error::Never","header::map::Values","status::StatusCode","extensions::Extensions","header::value::InvalidHeaderValueBytes","uri::path::PathAndQuery","header::map::HashValue","uri::InvalidUriBytes","uri::Parts","method::Method","uri::scheme::Scheme2","header::map::ValueIter","header::map::ValueDrain","response::Builder","header::value::HeaderValue","uri::builder::Builder","request::Parts","uri::scheme::Scheme","header::map::VacantEntry"]},"header::name::Repr":{"T":["header::name::Repr","header::name::StandardHeader","header::name::Custom","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","version::Version","byte_str::ByteStr"]},"request::Request":{"T":["header::map::HeaderMap","version::Version","status::StatusCode","request::Request","extensions::Extensions","request::Builder","uri::builder::Builder","uri::Parts","response::Builder","uri::Uri","response::Response","method::Method"]},"response::Response":{"T":["version::Version","request::Request","request::Builder","response::Builder","method::Method","header::map::HeaderMap","uri::Parts","status::StatusCode","uri::Uri","response::Response","uri::builder::Builder","extensions::Extensions"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::port::Port":{"T":["uri::scheme::Scheme","uri::port::Port","header::value::HeaderValue","<&T as std::fmt::Debug>","uri::authority::Authority","method::Method"]},"uri::scheme::Scheme2":{"T":["header::map::Link","version::Version","header::name::Repr","uri::authority::Authority","uri::scheme::Scheme2","header::name::MaybeLower","header::map::HashValue","byte_str::ByteStr","method::Method","header::name::StandardHeader","header::map::ExtraValue","header::name::HeaderName","uri::path::PathAndQuery","uri::scheme::Scheme","header::map::Bucket","header::name::Custom","uri::scheme::Protocol","header::map::Links","header::map::HeaderMap","status::StatusCode","header::value::HeaderValue","std::boxed::Box<byte_str::ByteStr>","std::clone::impls::<impl std::clone::Clone for *mut T>","header::map::Cursor","uri::Uri"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::port::Port<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::port::Port<T> as std::fmt::Debug>::fmt(p0, p1);
+<uri::port::Port<T>>::fmt(p0, p1);
-----------------
src/uri/port.rs <uri::port::Port<T> as std::fmt::Display>::fmt
deps:{"<uri::port::Port<T> as std::fmt::Display>::fmt":{"T":["std::marker::Sized"]}}
candidates:{"<uri::port::Port<T> as std::fmt::Display>::fmt":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::port::Port<T> as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::port::Port<T> as std::fmt::Display>::fmt(p0, p1);
+<uri::port::Port<T>>::fmt(p0, p1);
-----------------
src/uri/port.rs uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from
deps:{"uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from":{"T":["std::marker::Sized"]}}
candidates:{"uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
+uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from(p0);
+crate::uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from(p0);
+<u16>::from(p0);
-----------------
src/uri/port.rs <uri::port::Port<T> as std::convert::AsRef<str>>::as_ref
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<uri::port::Port<T> as std::convert::AsRef<str>>::as_ref":{"T":["std::marker::Sized","std::convert::AsRef"]},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<uri::port::Port<T> as std::convert::AsRef<str>>::as_ref":{"T":["uri::authority::Authority","method::Method","uri::scheme::Scheme","uri::port::Port","<&T as std::convert::AsRef<U>>","header::value::HeaderValue"]},"uri::port::Port":{"T":["uri::scheme::Scheme","header::value::HeaderValue","method::Method","uri::authority::Authority","<&mut T as std::fmt::Debug>","uri::port::Port"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
+p0.as_ref();
+<uri::port::Port<T> as std::convert::AsRef<str>>::as_ref(p0);
+crate::<uri::port::Port<T> as std::convert::AsRef<str>>::as_ref(p0);
+<uri::port::Port<T>>::as_ref(p0);
-----------------
src/uri/port.rs <uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq
deps:{"<uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq":{"T":["std::marker::Sized"],"U":["std::marker::Sized"]}}
candidates:{"<uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq":{"T":["RUG_ANY"],"U":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<U>
+p0.eq(p1);
+<uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq(p0, p1);
+crate::<uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq(p0, p1);
+<uri::port::Port<T>>::eq(p0, p1);
-----------------
src/uri/port.rs <uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq
deps:{"<uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq":{"T":["std::marker::Sized"]}}
candidates:{"<uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
let mut p1 = & 0u16; // None+u16
+p0.eq(p1);
+<uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq(p0, p1);
+crate::<uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq(p0, p1);
+<uri::port::Port<T>>::eq(p0, p1);
-----------------
src/uri/port.rs uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq
deps:{"uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq":{"T":["std::marker::Sized"]}}
candidates:{"uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq":{"T":["RUG_ANY"]}}
let mut p0 = & 0u16; // None+u16
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::port::Port<T>
+p0.eq(p1);
+uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq(p0, p1);
+crate::uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq(p0, p1);
+<u16>::eq(p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.clone();
+<uri::scheme::Scheme as std::clone::Clone>::clone(p0);
+crate::<uri::scheme::Scheme as std::clone::Clone>::clone(p0);
+<uri::scheme::Scheme>::clone(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme2<T> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<uri::scheme::Scheme2<T> as std::clone::Clone>::clone":{"T":["std::marker::Sized","std::clone::Clone"]},"header::map::Bucket":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"header::map::ExtraValue":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"header::map::HeaderMap":{"T":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","convert::HttpTryFrom","std::marker::Sized","std::cmp::Eq"]},"header::name::Repr":{"T":["std::fmt::Debug","std::cmp::Eq","std::hash::Hash","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::scheme::Scheme2":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<uri::scheme::Scheme2<T> as std::clone::Clone>::clone":{"T":["version::Http","version::Version","header::map::Pos","header::name::HeaderName","method::Inner","header::map::Cursor","status::StatusCode","header::map::Danger","uri::authority::Authority","header::map::ExtraValue","header::map::Link","header::map::Bucket","std::clone::impls::<impl std::clone::Clone for &mut T>","header::name::Repr","header::map::HeaderMap","header::map::Links","uri::Uri","uri::scheme::Scheme","method::Method","header::name::MaybeLower","header::name::StandardHeader","header::map::HashValue","byte_str::ByteStr","uri::scheme::Scheme2","uri::path::PathAndQuery","std::clone::impls::<impl std::clone::Clone for *const T>","header::name::Custom","header::value::HeaderValue","uri::scheme::Protocol"]},"header::map::Bucket":{"T":["<&mut T as std::fmt::Debug>","header::map::HeaderMap","version::Version","uri::authority::Authority","header::map::Links","header::name::Custom","header::map::Cursor","header::value::HeaderValue","header::map::HashValue","uri::scheme::Protocol","header::name::Repr","header::name::HeaderName","header::map::ExtraValue","method::Method","header::map::Bucket","byte_str::ByteStr","header::name::StandardHeader","uri::scheme::Scheme","header::map::Link","uri::path::PathAndQuery","status::StatusCode","uri::Uri","uri::scheme::Scheme2","header::name::MaybeLower"]},"header::map::ExtraValue":{"T":["byte_str::ByteStr","uri::path::PathAndQuery","method::Method","header::map::HashValue","header::name::Custom","header::map::Links","uri::scheme::Scheme2","version::Version","uri::authority::Authority","header::map::HeaderMap","uri::scheme::Scheme","header::value::HeaderValue","header::map::ExtraValue","header::name::HeaderName","header::name::MaybeLower","uri::Uri","header::name::StandardHeader","header::name::Repr","header::map::Link","header::map::Cursor","<*const T as std::fmt::Debug>","status::StatusCode","header::map::Bucket","uri::scheme::Protocol"]},"header::map::HeaderMap":{"T":["std::net::Ipv4Addr","header::value::HeaderValue","std::net::Ipv6Addr","std::borrow::Cow<'a, std::ffi::OsStr>"]},"header::name::Repr":{"T":["<*const T as std::fmt::Debug>","header::name::StandardHeader","header::name::Custom","version::Version","header::name::Repr","byte_str::ByteStr"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"uri::scheme::Scheme2":{"T":["header::value::HeaderValue","header::name::Repr","header::map::Cursor","header::map::ExtraValue","std::boxed::Box<byte_str::ByteStr>","header::name::StandardHeader","status::StatusCode","uri::scheme::Scheme2","uri::Uri","header::name::Custom","header::map::Links","uri::path::PathAndQuery","uri::authority::Authority","header::name::HeaderName","header::map::HeaderMap","header::map::Link","<*const T as std::fmt::Debug>","method::Method","uri::scheme::Scheme","header::map::Bucket","header::map::HashValue","header::name::MaybeLower","version::Version","byte_str::ByteStr","uri::scheme::Protocol"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme2<T>
+p0.clone();
+<uri::scheme::Scheme2<T> as std::clone::Clone>::clone(p0);
+crate::<uri::scheme::Scheme2<T> as std::clone::Clone>::clone(p0);
+<uri::scheme::Scheme2<T>>::clone(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme2<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<uri::scheme::Scheme2<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::Bucket":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"header::map::Drain":{"T":["std::marker::Send","std::fmt::Debug","std::marker::Sync","std::marker::Sized"]},"header::map::Entry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ExtraValue":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"header::map::GetAll":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"header::map::HeaderMap":{"T":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","convert::HttpTryFrom","std::cmp::PartialEq"]},"header::map::IntoIter":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::Keys":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::OccupiedEntry":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::VacantEntry":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIter":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sized","std::marker::Sync"]},"header::map::Values":{"T":["std::fmt::Debug","std::marker::Sized"]},"header::map::ValuesMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"header::name::Repr":{"T":["std::hash::Hash","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"request::Request":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"response::Response":{"T":["std::marker::Sized","std::default::Default","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]},"uri::scheme::Scheme2":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"<uri::scheme::Scheme2<T> as std::fmt::Debug>::fmt":{"T":["header::map::HeaderMap","header::map::Drain","header::map::IntoIter","<&T as std::fmt::Debug>","header::value::InvalidHeaderValue","header::name::StandardHeader","uri::scheme::Scheme2","header::value::InvalidHeaderValueBytes","header::map::Keys","error::Never","status::InvalidStatusCode","response::Parts","header::map::Values","uri::InvalidUriBytes","header::name::Custom","uri::InvalidUri","header::map::HashValue","header::map::OccupiedEntry","response::Response","header::name::InvalidHeaderNameBytes","header::value::ToStrError","<*mut T as std::fmt::Debug>","uri::authority::Authority","header::map::VacantEntry","uri::ErrorKind","header::map::Links","header::map::Entry","response::Builder","header::name::Repr","status::StatusCode","header::map::IterMut","header::map::ValueIterMut","header::name::HeaderName","header::map::Cursor","header::name::InvalidHeaderName","header::map::GetAll","byte_str::ByteStr","header::name::MaybeLower","header::map::ValueIter","uri::Uri","error::Error","version::Version","uri::InvalidUriParts","uri::scheme::Scheme","header::value::HeaderValue","header::name::HdrName","header::map::ValueDrain","header::map::Iter","uri::scheme::Protocol","header::map::Link","request::Request","method::Method","request::Builder","extensions::Extensions","uri::Parts","header::map::ValuesMut","uri::path::PathAndQuery","request::Parts","header::map::ExtraValue","uri::builder::Builder","uri::port::Port","header::map::Bucket","method::InvalidMethod"]},"header::map::Bucket":{"T":["header::map::ExtraValue","header::map::Bucket","status::StatusCode","uri::scheme::Scheme","header::map::HashValue","header::map::Link","header::name::Custom","<*mut T as std::fmt::Debug>","header::name::StandardHeader","header::name::MaybeLower","header::map::Cursor","uri::Uri","uri::scheme::Scheme2","method::Method","byte_str::ByteStr","header::name::HeaderName","uri::path::PathAndQuery","header::map::HeaderMap","uri::authority::Authority","header::name::Repr","header::value::HeaderValue","header::map::Links","version::Version","uri::scheme::Protocol"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain","header::map::IterMut","header::map::Iter","<*const T as std::marker::Sync>"]},"header::map::Entry":{"T":["version::Version","header::name::InvalidHeaderNameBytes","header::name::Repr","status::StatusCode","uri::scheme::Scheme2","request::Request","header::map::HeaderMap","header::name::MaybeLower","header::map::VacantEntry","header::name::StandardHeader","request::Parts","uri::scheme::Protocol","error::Error","<&T as std::fmt::Debug>","header::map::Iter","header::map::Cursor","header::map::Bucket","header::map::OccupiedEntry","status::InvalidStatusCode","header::map::Keys","request::Builder","method::InvalidMethod","uri::authority::Authority","header::map::ValuesMut","header::map::Drain","header::map::ValueIter","header::value::HeaderValue","header::name::HdrName","header::map::Values","header::map::Links","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderName","uri::port::Port","uri::scheme::Scheme","uri::builder::Builder","header::map::HashValue","extensions::Extensions","header::map::Link","header::map::ExtraValue","uri::InvalidUri","error::Never","uri::InvalidUriParts","header::name::HeaderName","header::map::IterMut","header::map::IntoIter","uri::Uri","header::name::Custom","response::Builder","uri::InvalidUriBytes","header::map::GetAll","header::map::ValueIterMut","response::Parts","uri::ErrorKind","uri::Parts","header::value::ToStrError","response::Response","header::map::Entry","byte_str::ByteStr","method::Method","uri::path::PathAndQuery","header::value::InvalidHeaderValue","header::map::ValueDrain"]},"header::map::ExtraValue":{"T":["header::name::MaybeLower","header::map::ExtraValue","uri::authority::Authority","header::map::Bucket","header::name::HeaderName","uri::path::PathAndQuery","header::name::Repr","byte_str::ByteStr","status::StatusCode","header::name::Custom","uri::Uri","header::map::Link","header::map::Links","header::value::HeaderValue","header::name::StandardHeader","uri::scheme::Scheme","version::Version","header::map::HashValue","header::map::HeaderMap","uri::scheme::Protocol","uri::scheme::Scheme2","header::map::Cursor","method::Method","std::clone::impls::<impl std::clone::Clone for *const T>"]},"header::map::GetAll":{"T":["header::name::Custom","byte_str::ByteStr","header::map::Link","std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>","header::map::HeaderMap","uri::ErrorKind","header::map::HashValue","header::map::GetAll","header::name::StandardHeader","header::name::Repr","version::Version","header::map::Cursor"]},"header::map::HeaderMap":{"T":["std::borrow::Cow<'a, std::ffi::OsStr>","std::net::Ipv6Addr","std::net::Ipv4Addr","header::value::HeaderValue"]},"header::map::IntoIter":{"T":["header::map::Drain","header::map::Values","header::map::ExtraValue","header::name::MaybeLower","response::Parts","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::Keys","uri::port::Port","uri::Uri","response::Response","header::name::HeaderName","header::map::Iter","header::name::StandardHeader","uri::scheme::Scheme","response::Builder","header::name::Repr","header::map::Links","header::map::ValueIter","header::map::IntoIter","uri::InvalidUriBytes","extensions::Extensions","uri::path::PathAndQuery","uri::InvalidUri","uri::builder::Builder","uri::ErrorKind","request::Builder","uri::scheme::Scheme2","request::Request","error::Error","header::map::VacantEntry","header::map::ValueDrain","header::value::InvalidHeaderValue","error::Never","header::name::HdrName","header::map::OccupiedEntry","header::value::ToStrError","header::map::Cursor","uri::scheme::Protocol","uri::Parts","version::Version","header::value::InvalidHeaderValueBytes","header::map::HashValue","status::InvalidStatusCode","uri::authority::Authority","header::map::ValuesMut","status::StatusCode","header::name::Custom","header::map::ValueIterMut","method::InvalidMethod","header::map::Entry","header::map::Bucket","request::Parts","method::Method","uri::InvalidUriParts","byte_str::ByteStr","header::name::InvalidHeaderNameBytes","header::map::GetAll","header::value::HeaderValue","header::map::HeaderMap","header::map::Link","header::name::InvalidHeaderName"]},"header::map::Iter":{"T":["<*const T as std::marker::Sync>","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter","header::map::IterMut","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::IterMut","<*const T as std::marker::Send>","header::map::ValueDrain","header::map::ValueIterMut","header::map::Drain","header::map::Iter"]},"header::map::Keys":{"T":["header::map::ValueIter","header::map::Bucket","header::name::StandardHeader","<&mut T as std::fmt::Debug>","request::Request","uri::scheme::Scheme","status::StatusCode","uri::InvalidUri","uri::port::Port","uri::ErrorKind","method::InvalidMethod","request::Builder","response::Parts","header::name::Custom","error::Error","uri::path::PathAndQuery","header::map::Keys","header::value::ToStrError","header::name::InvalidHeaderNameBytes","response::Builder","version::Version","header::map::OccupiedEntry","uri::InvalidUriParts","header::value::HeaderValue","header::name::InvalidHeaderName","uri::builder::Builder","header::map::IntoIter","byte_str::ByteStr","header::map::Cursor","uri::scheme::Scheme2","request::Parts","method::Method","uri::authority::Authority","error::Never","extensions::Extensions","header::value::InvalidHeaderValue","status::InvalidStatusCode","header::map::ValuesMut","uri::scheme::Protocol","header::map::Drain","header::map::IterMut","uri::Uri","header::map::ValueDrain","header::map::Links","header::map::Entry","header::name::Repr","header::map::ExtraValue","header::map::GetAll","header::value::InvalidHeaderValueBytes","header::map::Link","uri::InvalidUriBytes","header::name::HeaderName","header::map::ValueIterMut","header::map::Iter","header::map::Values","response::Response","header::map::HeaderMap","header::map::HashValue","header::name::MaybeLower","header::map::VacantEntry","uri::Parts","header::name::HdrName"]},"header::map::OccupiedEntry":{"T":["header::value::InvalidHeaderValueBytes","header::map::GetAll","uri::InvalidUriBytes","header::map::Bucket","method::InvalidMethod","version::Version","error::Never","request::Parts","uri::Parts","request::Request","header::map::ValueDrain","response::Response","uri::builder::Builder","header::name::InvalidHeaderName","header::map::OccupiedEntry","header::map::IterMut","uri::scheme::Scheme","header::map::Cursor","header::map::HashValue","header::map::VacantEntry","uri::InvalidUri","uri::authority::Authority","request::Builder","header::map::Links","uri::path::PathAndQuery","error::Error","header::value::InvalidHeaderValue","method::Method","header::map::Entry","response::Parts","header::map::ValuesMut","uri::scheme::Scheme2","uri::ErrorKind","header::map::Iter","header::name::Custom","header::map::ValueIterMut","header::name::Repr","header::map::Drain","uri::InvalidUriParts","header::name::HdrName","uri::scheme::Protocol","uri::Uri","response::Builder","header::name::HeaderName","header::map::Values","byte_str::ByteStr","<&mut T as std::fmt::Debug>","uri::port::Port","header::map::Link","header::value::HeaderValue","header::map::ExtraValue","status::InvalidStatusCode","header::name::InvalidHeaderNameBytes","header::name::MaybeLower","header::map::IntoIter","status::StatusCode","header::map::Keys","header::map::ValueIter","extensions::Extensions","header::map::HeaderMap","header::value::ToStrError","header::name::StandardHeader"]},"header::map::VacantEntry":{"T":["uri::port::Port","header::value::InvalidHeaderValueBytes","header::map::Drain","header::name::InvalidHeaderNameBytes","header::name::InvalidHeaderName","header::map::IntoIter","header::map::ExtraValue","header::map::OccupiedEntry","header::map::HeaderMap","uri::InvalidUriBytes","header::map::Cursor","error::Never","uri::authority::Authority","header::map::ValueIter","header::map::Bucket","request::Request","header::name::HeaderName","extensions::Extensions","header::value::HeaderValue","header::map::ValuesMut","<*const T as std::fmt::Debug>","method::InvalidMethod","uri::Uri","status::StatusCode","byte_str::ByteStr","header::map::HashValue","header::map::GetAll","header::name::MaybeLower","uri::path::PathAndQuery","header::map::VacantEntry","response::Response","header::value::InvalidHeaderValue","header::name::HdrName","header::value::ToStrError","header::name::Repr","uri::Parts","header::map::Entry","header::map::ValueDrain","uri::InvalidUri","uri::scheme::Scheme","version::Version","status::InvalidStatusCode","header::map::Keys","uri::scheme::Scheme2","header::map::Link","header::map::Links","header::name::Custom","uri::ErrorKind","uri::scheme::Protocol","header::map::IterMut","request::Parts","header::name::StandardHeader","response::Builder","uri::builder::Builder","header::map::ValueIterMut","response::Parts","header::map::Iter","uri::InvalidUriParts","error::Error","method::Method","request::Builder","header::map::Values"]},"header::map::ValueDrain":{"T":["header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut","<*const T as std::marker::Sync>","header::map::IterMut","header::map::Drain"]},"header::map::ValueIter":{"T":["header::value::InvalidHeaderValueBytes","header::map::IntoIter","header::map::IterMut","status::StatusCode","header::map::ExtraValue","header::name::InvalidHeaderNameBytes","response::Builder","header::map::Entry","uri::port::Port","uri::path::PathAndQuery","uri::scheme::Scheme","header::map::GetAll","uri::InvalidUriBytes","header::map::Keys","header::map::Link","uri::scheme::Protocol","header::map::OccupiedEntry","header::name::Repr","uri::Uri","header::name::HdrName","header::value::ToStrError","request::Builder","header::map::Links","header::name::MaybeLower","request::Request","uri::builder::Builder","header::map::Cursor","header::map::Bucket","header::map::ValueIter","header::map::ValueDrain","header::name::Custom","response::Parts","header::map::ValuesMut","header::name::HeaderName","byte_str::ByteStr","error::Error","method::InvalidMethod","uri::ErrorKind","header::map::ValueIterMut","status::InvalidStatusCode","header::value::HeaderValue","header::value::InvalidHeaderValue","header::map::Iter","header::name::InvalidHeaderName","header::map::Values","uri::authority::Authority","response::Response","header::map::VacantEntry","error::Never","request::Parts","version::Version","header::map::HashValue","uri::Parts","<*const T as std::fmt::Debug>","uri::InvalidUriParts","extensions::Extensions","header::map::Drain","header::map::HeaderMap","uri::InvalidUri","uri::scheme::Scheme2","header::name::StandardHeader","method::Method"]},"header::map::ValueIterMut":{"T":["header::map::ValueIterMut","header::map::ValueDrain","header::map::Drain","<*mut T as std::marker::Sync>","header::map::IterMut","header::map::Iter"]},"header::map::Values":{"T":["header::map::Entry","uri::port::Port","uri::scheme::Scheme2","uri::Parts","status::StatusCode","error::Error","version::Version","extensions::Extensions","header::map::Bucket","header::map::ValuesMut","response::Builder","header::name::StandardHeader","uri::InvalidUriParts","request::Builder","uri::ErrorKind","method::Method","uri::InvalidUriBytes","response::Parts","header::map::IntoIter","header::map::HashValue","header::map::Values","header::name::Custom","header::name::Repr","header::map::Link","header::map::ValueIter","header::value::HeaderValue","header::map::Iter","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderNameBytes","uri::Uri","uri::authority::Authority","header::map::ValueDrain","header::value::InvalidHeaderValue","uri::scheme::Protocol","header::map::Cursor","header::map::OccupiedEntry","header::map::Links","response::Response","uri::scheme::Scheme","header::map::Drain","header::map::HeaderMap","header::name::HeaderName","uri::builder::Builder","status::InvalidStatusCode","error::Never","header::map::ValueIterMut","request::Parts","header::name::MaybeLower","header::value::ToStrError","header::map::Keys","header::map::GetAll","header::name::HdrName","<*mut T as std::fmt::Debug>","request::Request","header::map::VacantEntry","header::map::ExtraValue","header::map::IterMut","method::InvalidMethod","uri::InvalidUri","uri::path::PathAndQuery","header::name::InvalidHeaderName","byte_str::ByteStr"]},"header::map::ValuesMut":{"T":["header::map::GetAll","response::Response","uri::scheme::Scheme","header::map::ValueDrain","header::value::InvalidHeaderValueBytes","header::name::InvalidHeaderNameBytes","header::map::OccupiedEntry","extensions::Extensions","status::InvalidStatusCode","header::map::VacantEntry","uri::Uri","version::Version","header::map::Drain","header::value::InvalidHeaderValue","header::name::Repr","header::map::Links","status::StatusCode","uri::scheme::Scheme2","header::map::Bucket","<*mut T as std::fmt::Debug>","header::map::Link","uri::path::PathAndQuery","header::map::Entry","error::Never","header::name::HeaderName","header::map::IntoIter","uri::scheme::Protocol","header::map::Values","uri::ErrorKind","header::name::MaybeLower","header::map::Iter","uri::builder::Builder","header::value::ToStrError","byte_str::ByteStr","header::map::ValueIter","header::name::Custom","uri::InvalidUriParts","header::map::ValuesMut","method::InvalidMethod","header::map::ExtraValue","uri::port::Port","uri::authority::Authority","response::Parts","request::Parts","header::map::HeaderMap","error::Error","header::map::IterMut","request::Builder","header::map::Cursor","uri::InvalidUriBytes","uri::InvalidUri","header::map::HashValue","response::Builder","header::value::HeaderValue","uri::Parts","request::Request","header::name::InvalidHeaderName","header::name::HdrName","header::map::Keys","method::Method","header::name::StandardHeader","header::map::ValueIterMut"]},"header::name::Repr":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","header::name::Repr","header::name::Custom","version::Version","byte_str::ByteStr","header::name::StandardHeader"]},"request::Request":{"T":["uri::Uri","response::Builder","status::StatusCode","response::Response","request::Builder","header::map::HeaderMap","uri::builder::Builder","extensions::Extensions","request::Request","uri::Parts","method::Method","version::Version"]},"response::Response":{"T":["uri::Uri","extensions::Extensions","uri::Parts","response::Builder","request::Request","header::map::HeaderMap","version::Version","method::Method","request::Builder","response::Response","status::StatusCode","uri::builder::Builder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"uri::port::Port":{"T":["uri::port::Port","uri::scheme::Scheme","method::Method","uri::authority::Authority","<&mut T as std::convert::AsRef<U>>","header::value::HeaderValue"]},"uri::scheme::Scheme2":{"T":["header::value::HeaderValue","header::name::Repr","header::name::HeaderName","header::map::ExtraValue","header::name::Custom","uri::path::PathAndQuery","header::map::Bucket","uri::Uri","method::Method","uri::scheme::Scheme","uri::scheme::Scheme2","status::StatusCode","std::clone::impls::<impl std::clone::Clone for *const T>","uri::authority::Authority","header::map::Link","header::name::MaybeLower","uri::scheme::Protocol","header::map::HashValue","header::map::Cursor","header::name::StandardHeader","std::boxed::Box<byte_str::ByteStr>","byte_str::ByteStr","version::Version","header::map::Links","header::map::HeaderMap"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme2<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::scheme::Scheme2<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::scheme::Scheme2<T> as std::fmt::Debug>::fmt(p0, p1);
+<uri::scheme::Scheme2<T>>::fmt(p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Protocol as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Protocol
+p0.clone();
+<uri::scheme::Protocol as std::clone::Clone>::clone(p0);
+crate::<uri::scheme::Protocol as std::clone::Clone>::clone(p0);
+<uri::scheme::Protocol>::clone(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Protocol as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Protocol
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::scheme::Protocol as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::scheme::Protocol as std::fmt::Debug>::fmt(p0, p1);
+<uri::scheme::Protocol>::fmt(p0, p1);
-----------------
src/uri/scheme.rs uri::scheme::Scheme::from_shared
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+uri::scheme::Scheme::from_shared(p0);
+crate::uri::scheme::Scheme::from_shared(p0);
+<uri::scheme::Scheme>::from_shared(p0);
-----------------
src/uri/scheme.rs uri::scheme::Scheme::empty
deps:{}
candidates:{}
+uri::scheme::Scheme::empty();
+crate::uri::scheme::Scheme::empty();
+<uri::scheme::Scheme>::empty();
-----------------
src/uri/scheme.rs uri::scheme::Scheme::as_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.as_str();
+uri::scheme::Scheme::as_str(p0);
+crate::uri::scheme::Scheme::as_str(p0);
+<uri::scheme::Scheme>::as_str(p0);
-----------------
src/uri/scheme.rs uri::scheme::Scheme::into_bytes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.into_bytes();
+uri::scheme::Scheme::into_bytes(p0);
+crate::uri::scheme::Scheme::into_bytes(p0);
+<uri::scheme::Scheme>::into_bytes(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<uri::scheme::Scheme as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<uri::scheme::Scheme as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<uri::scheme::Scheme>::try_from(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as convert::HttpTryFrom<&'a [u8]>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+<uri::scheme::Scheme as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+crate::<uri::scheme::Scheme as convert::HttpTryFrom<&'a [u8]>>::try_from(p0);
+<uri::scheme::Scheme>::try_from(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::scheme::Scheme as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<uri::scheme::Scheme as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<uri::scheme::Scheme>::try_from(&p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::scheme::Scheme as std::str::FromStr>::from_str(&p0);
+crate::<uri::scheme::Scheme as std::str::FromStr>::from_str(&p0);
+<uri::scheme::Scheme>::from_str(&p0);
-----------------
src/uri/scheme.rs uri::scheme::<impl std::convert::From<uri::scheme::Scheme> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+uri::scheme::<impl std::convert::From<uri::scheme::Scheme> for bytes::Bytes>::from(p0);
+crate::uri::scheme::<impl std::convert::From<uri::scheme::Scheme> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::scheme::Scheme as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::scheme::Scheme as std::fmt::Debug>::fmt(p0, p1);
+<uri::scheme::Scheme>::fmt(p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::scheme::Scheme as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::scheme::Scheme as std::fmt::Display>::fmt(p0, p1);
+<uri::scheme::Scheme>::fmt(p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::convert::AsRef<str>>::as_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.as_ref();
+<uri::scheme::Scheme as std::convert::AsRef<str>>::as_ref(p0);
+crate::<uri::scheme::Scheme as std::convert::AsRef<str>>::as_ref(p0);
+<uri::scheme::Scheme>::as_ref(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.eq(p1);
+<uri::scheme::Scheme as std::cmp::PartialEq>::eq(p0, p1);
+crate::<uri::scheme::Scheme as std::cmp::PartialEq>::eq(p0, p1);
+<uri::scheme::Scheme>::eq(p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<uri::scheme::Scheme as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<uri::scheme::Scheme as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<uri::scheme::Scheme>::eq(p0, &p1);
-----------------
src/uri/scheme.rs uri::scheme::<impl std::cmp::PartialEq<uri::scheme::Scheme> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+p0.eq(p1);
+uri::scheme::<impl std::cmp::PartialEq<uri::scheme::Scheme> for str>::eq(&p0, p1);
+crate::uri::scheme::<impl std::cmp::PartialEq<uri::scheme::Scheme> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<uri::scheme::Scheme as std::hash::Hash>::hash":{"H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<uri::scheme::Scheme as std::hash::Hash>::hash":{"H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<uri::scheme::Scheme as std::hash::Hash>::hash(p0, p1);
+crate::<uri::scheme::Scheme as std::hash::Hash>::hash(p0, p1);
+<uri::scheme::Scheme>::hash(p0, p1);
-----------------
src/uri/scheme.rs uri::scheme::Scheme2::<T>::is_none
deps:{"uri::scheme::Scheme2::<T>::is_none":{"T":["std::marker::Sized"]}}
candidates:{"uri::scheme::Scheme2::<T>::is_none":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme2<T>
+p0.is_none();
+uri::scheme::Scheme2::<T>::is_none(p0);
+crate::uri::scheme::Scheme2::<T>::is_none(p0);
+<uri::scheme::Scheme2<T>>::is_none(p0);
-----------------
src/uri/scheme.rs uri::scheme::Scheme2::<usize>::parse_exact
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+uri::scheme::Scheme2::<usize>::parse_exact(p0);
+crate::uri::scheme::Scheme2::<usize>::parse_exact(p0);
+<uri::scheme::Scheme2<usize>>::parse_exact(p0);
-----------------
src/uri/scheme.rs uri::scheme::Scheme2::<usize>::parse
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+uri::scheme::Scheme2::<usize>::parse(p0);
+crate::uri::scheme::Scheme2::<usize>::parse(p0);
+<uri::scheme::Scheme2<usize>>::parse(p0);
-----------------
src/uri/scheme.rs uri::scheme::Protocol::len
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::scheme::Protocol
+p0.len();
+uri::scheme::Protocol::len(p0);
+crate::uri::scheme::Protocol::len(p0);
+<uri::scheme::Protocol>::len(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from
deps:{"<uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from":{"T":["std::marker::Sized"]}}
candidates:{"<uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::scheme::Protocol
+<uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from(p0);
+crate::<uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from(p0);
+<uri::scheme::Scheme2<T>>::from(p0);
-----------------
src/uri/scheme.rs <uri::scheme::Scheme as std::convert::From<uri::scheme::Scheme2>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme2
+<uri::scheme::Scheme as std::convert::From<uri::scheme::Scheme2>>::from(p0);
+crate::<uri::scheme::Scheme as std::convert::From<uri::scheme::Scheme2>>::from(p0);
+<uri::scheme::Scheme>::from(p0);
-----------------
src/uri/mod.rs <uri::Uri as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.clone();
+<uri::Uri as std::clone::Clone>::clone(p0);
+crate::<uri::Uri as std::clone::Clone>::clone(p0);
+<uri::Uri>::clone(p0);
-----------------
src/uri/mod.rs <uri::Parts as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Parts
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::Parts as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::Parts as std::fmt::Debug>::fmt(p0, p1);
+<uri::Parts>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::Parts as std::default::Default>::default
deps:{}
candidates:{}
+<uri::Parts as std::default::Default>::default();
+crate::<uri::Parts as std::default::Default>::default();
+<uri::Parts>::default();
-----------------
src/uri/mod.rs <uri::InvalidUri as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUri
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::InvalidUri as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::InvalidUri as std::fmt::Debug>::fmt(p0, p1);
+<uri::InvalidUri>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUriBytes as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::InvalidUriBytes as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::InvalidUriBytes as std::fmt::Debug>::fmt(p0, p1);
+<uri::InvalidUriBytes>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUriParts as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriParts
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::InvalidUriParts as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::InvalidUriParts as std::fmt::Debug>::fmt(p0, p1);
+<uri::InvalidUriParts>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::ErrorKind as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::ErrorKind
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+<uri::ErrorKind>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::ErrorKind
+p0.assert_receiver_is_total_eq();
+<uri::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<uri::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<uri::ErrorKind>::assert_receiver_is_total_eq(p0);
-----------------
src/uri/mod.rs <uri::ErrorKind as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::ErrorKind
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::ErrorKind
+p0.eq(p1);
+<uri::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+crate::<uri::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+<uri::ErrorKind>::eq(p0, p1);
-----------------
src/uri/mod.rs uri::Uri::builder
deps:{}
candidates:{}
+uri::Uri::builder();
+crate::uri::Uri::builder();
+<uri::Uri>::builder();
-----------------
src/uri/mod.rs uri::Uri::from_parts
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::Parts
+uri::Uri::from_parts(p0);
+crate::uri::Uri::from_parts(p0);
+<uri::Uri>::from_parts(p0);
-----------------
src/uri/mod.rs uri::Uri::from_shared
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+uri::Uri::from_shared(p0);
+crate::uri::Uri::from_shared(p0);
+<uri::Uri>::from_shared(p0);
-----------------
src/uri/mod.rs uri::Uri::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+uri::Uri::from_static(&p0);
+crate::uri::Uri::from_static(&p0);
+<uri::Uri>::from_static(&p0);
-----------------
src/uri/mod.rs uri::Uri::into_parts
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.into_parts();
+uri::Uri::into_parts(p0);
+crate::uri::Uri::into_parts(p0);
+<uri::Uri>::into_parts(p0);
-----------------
src/uri/mod.rs uri::Uri::path_and_query
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.path_and_query();
+uri::Uri::path_and_query(p0);
+crate::uri::Uri::path_and_query(p0);
+<uri::Uri>::path_and_query(p0);
-----------------
src/uri/mod.rs uri::Uri::path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.path();
+uri::Uri::path(p0);
+crate::uri::Uri::path(p0);
+<uri::Uri>::path(p0);
-----------------
src/uri/mod.rs uri::Uri::scheme_part
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.scheme_part();
+uri::Uri::scheme_part(p0);
+crate::uri::Uri::scheme_part(p0);
+<uri::Uri>::scheme_part(p0);
-----------------
src/uri/mod.rs uri::Uri::scheme
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.scheme();
+uri::Uri::scheme(p0);
+crate::uri::Uri::scheme(p0);
+<uri::Uri>::scheme(p0);
-----------------
src/uri/mod.rs uri::Uri::scheme_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.scheme_str();
+uri::Uri::scheme_str(p0);
+crate::uri::Uri::scheme_str(p0);
+<uri::Uri>::scheme_str(p0);
-----------------
src/uri/mod.rs uri::Uri::authority_part
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.authority_part();
+uri::Uri::authority_part(p0);
+crate::uri::Uri::authority_part(p0);
+<uri::Uri>::authority_part(p0);
-----------------
src/uri/mod.rs uri::Uri::authority
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.authority();
+uri::Uri::authority(p0);
+crate::uri::Uri::authority(p0);
+<uri::Uri>::authority(p0);
-----------------
src/uri/mod.rs uri::Uri::host
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.host();
+uri::Uri::host(p0);
+crate::uri::Uri::host(p0);
+<uri::Uri>::host(p0);
-----------------
src/uri/mod.rs uri::Uri::port
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.port();
+uri::Uri::port(p0);
+crate::uri::Uri::port(p0);
+<uri::Uri>::port(p0);
-----------------
src/uri/mod.rs uri::Uri::port_part
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.port_part();
+uri::Uri::port_part(p0);
+crate::uri::Uri::port_part(p0);
+<uri::Uri>::port_part(p0);
-----------------
src/uri/mod.rs uri::Uri::port_u16
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.port_u16();
+uri::Uri::port_u16(p0);
+crate::uri::Uri::port_u16(p0);
+<uri::Uri>::port_u16(p0);
-----------------
src/uri/mod.rs uri::Uri::query
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.query();
+uri::Uri::query(p0);
+crate::uri::Uri::query(p0);
+<uri::Uri>::query(p0);
-----------------
src/uri/mod.rs uri::Uri::has_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.has_path();
+uri::Uri::has_path(p0);
+crate::uri::Uri::has_path(p0);
+<uri::Uri>::has_path(p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<&'a str>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::Uri as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+crate::<uri::Uri as convert::HttpTryFrom<&'a str>>::try_from(&p0);
+<uri::Uri>::try_from(&p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<&'a std::string::String>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+<uri::Uri as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<&'a std::string::String>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<std::string::String>>::try_from
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<uri::Uri as convert::HttpTryFrom<std::string::String>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<std::string::String>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<bytes::Bytes>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+<uri::Uri as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<bytes::Bytes>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<uri::Parts>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::Parts
+<uri::Uri as convert::HttpTryFrom<uri::Parts>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<uri::Parts>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/uri/mod.rs <uri::Uri as convert::HttpTryFrom<&'a uri::Uri>>::try_from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+<uri::Uri as convert::HttpTryFrom<&'a uri::Uri>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<&'a uri::Uri>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/uri/mod.rs <uri::Parts as std::convert::From<uri::Uri>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::Uri
+<uri::Parts as std::convert::From<uri::Uri>>::from(p0);
+crate::<uri::Parts as std::convert::From<uri::Uri>>::from(p0);
+<uri::Parts>::from(p0);
-----------------
src/uri/mod.rs <uri::Uri as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<uri::Uri as std::str::FromStr>::from_str(&p0);
+crate::<uri::Uri as std::str::FromStr>::from_str(&p0);
+<uri::Uri>::from_str(&p0);
-----------------
src/uri/mod.rs <uri::Uri as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.eq(p1);
+<uri::Uri as std::cmp::PartialEq>::eq(p0, p1);
+crate::<uri::Uri as std::cmp::PartialEq>::eq(p0, p1);
+<uri::Uri>::eq(p0, p1);
-----------------
src/uri/mod.rs <uri::Uri as std::cmp::PartialEq<str>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = "sample"; // None+&str
+p0.eq(&p1);
+<uri::Uri as std::cmp::PartialEq<str>>::eq(p0, &p1);
+crate::<uri::Uri as std::cmp::PartialEq<str>>::eq(p0, &p1);
+<uri::Uri>::eq(p0, &p1);
-----------------
src/uri/mod.rs uri::<impl std::cmp::PartialEq<uri::Uri> for str>::eq
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.eq(p1);
+uri::<impl std::cmp::PartialEq<uri::Uri> for str>::eq(&p0, p1);
+crate::uri::<impl std::cmp::PartialEq<uri::Uri> for str>::eq(&p0, p1);
+<str>::eq(&p0, p1);
-----------------
src/uri/mod.rs <uri::Uri as std::cmp::PartialEq<&'a str>>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = & "a"; // None+&'a str
+p0.eq(p1);
+<uri::Uri as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+crate::<uri::Uri as std::cmp::PartialEq<&'a str>>::eq(p0, p1);
+<uri::Uri>::eq(p0, p1);
-----------------
src/uri/mod.rs uri::<impl std::cmp::PartialEq<uri::Uri> for &'a str>::eq
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & MaybeUninit::uninit().assume_init(); // uri::Uri
+p0.eq(p1);
+uri::<impl std::cmp::PartialEq<uri::Uri> for &'a str>::eq(p0, p1);
+crate::uri::<impl std::cmp::PartialEq<uri::Uri> for &'a str>::eq(p0, p1);
+<&'a str>::eq(p0, p1);
-----------------
src/uri/mod.rs <uri::Uri as std::default::Default>::default
deps:{}
candidates:{}
+<uri::Uri as std::default::Default>::default();
+crate::<uri::Uri as std::default::Default>::default();
+<uri::Uri>::default();
-----------------
src/uri/mod.rs <uri::Uri as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::Uri as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::Uri as std::fmt::Display>::fmt(p0, p1);
+<uri::Uri>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::Uri as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<uri::Uri as std::fmt::Debug>::fmt(p0, p1);
+crate::<uri::Uri as std::fmt::Debug>::fmt(p0, p1);
+<uri::Uri>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUri as std::convert::From<uri::ErrorKind>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::ErrorKind
+<uri::InvalidUri as std::convert::From<uri::ErrorKind>>::from(p0);
+crate::<uri::InvalidUri as std::convert::From<uri::ErrorKind>>::from(p0);
+<uri::InvalidUri>::from(p0);
-----------------
src/uri/mod.rs <uri::InvalidUriBytes as std::convert::From<uri::ErrorKind>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::ErrorKind
+<uri::InvalidUriBytes as std::convert::From<uri::ErrorKind>>::from(p0);
+crate::<uri::InvalidUriBytes as std::convert::From<uri::ErrorKind>>::from(p0);
+<uri::InvalidUriBytes>::from(p0);
-----------------
src/uri/mod.rs <uri::InvalidUriParts as std::convert::From<uri::ErrorKind>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::ErrorKind
+<uri::InvalidUriParts as std::convert::From<uri::ErrorKind>>::from(p0);
+crate::<uri::InvalidUriParts as std::convert::From<uri::ErrorKind>>::from(p0);
+<uri::InvalidUriParts>::from(p0);
-----------------
src/uri/mod.rs <uri::InvalidUri as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUri
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::InvalidUri as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::InvalidUri as std::fmt::Display>::fmt(p0, p1);
+<uri::InvalidUri>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUri as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUri
+p0.description();
+<uri::InvalidUri as std::error::Error>::description(p0);
+crate::<uri::InvalidUri as std::error::Error>::description(p0);
+<uri::InvalidUri>::description(p0);
-----------------
src/uri/mod.rs <uri::InvalidUriBytes as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriBytes
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::InvalidUriBytes as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::InvalidUriBytes as std::fmt::Display>::fmt(p0, p1);
+<uri::InvalidUriBytes>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUriParts as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriParts
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<uri::InvalidUriParts as std::fmt::Display>::fmt(p0, p1);
+crate::<uri::InvalidUriParts as std::fmt::Display>::fmt(p0, p1);
+<uri::InvalidUriParts>::fmt(p0, p1);
-----------------
src/uri/mod.rs <uri::InvalidUriBytes as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriBytes
+p0.description();
+<uri::InvalidUriBytes as std::error::Error>::description(p0);
+crate::<uri::InvalidUriBytes as std::error::Error>::description(p0);
+<uri::InvalidUriBytes>::description(p0);
-----------------
src/uri/mod.rs <uri::InvalidUriParts as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::InvalidUriParts
+p0.description();
+<uri::InvalidUriParts as std::error::Error>::description(p0);
+crate::<uri::InvalidUriParts as std::error::Error>::description(p0);
+<uri::InvalidUriParts>::description(p0);
-----------------
src/uri/mod.rs <uri::Uri as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<uri::Uri as std::hash::Hash>::hash":{"H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<uri::Uri as std::hash::Hash>::hash":{"H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // uri::Uri
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<uri::Uri as std::hash::Hash>::hash(p0, p1);
+crate::<uri::Uri as std::hash::Hash>::hash(p0, p1);
+<uri::Uri>::hash(p0, p1);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<byte_str::ByteStr as std::fmt::Debug>::fmt(p0, p1);
+crate::<byte_str::ByteStr as std::fmt::Debug>::fmt(p0, p1);
+<byte_str::ByteStr>::fmt(p0, p1);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.clone();
+<byte_str::ByteStr as std::clone::Clone>::clone(p0);
+crate::<byte_str::ByteStr as std::clone::Clone>::clone(p0);
+<byte_str::ByteStr>::clone(p0);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.assert_receiver_is_total_eq();
+<byte_str::ByteStr as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<byte_str::ByteStr as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<byte_str::ByteStr>::assert_receiver_is_total_eq(p0);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
let mut p1 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.eq(p1);
+<byte_str::ByteStr as std::cmp::PartialEq>::eq(p0, p1);
+crate::<byte_str::ByteStr as std::cmp::PartialEq>::eq(p0, p1);
+<byte_str::ByteStr>::eq(p0, p1);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
let mut p1 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.cmp(p1);
+<byte_str::ByteStr as std::cmp::Ord>::cmp(p0, p1);
+crate::<byte_str::ByteStr as std::cmp::Ord>::cmp(p0, p1);
+<byte_str::ByteStr>::cmp(p0, p1);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
let mut p1 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.partial_cmp(p1);
+<byte_str::ByteStr as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<byte_str::ByteStr as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<byte_str::ByteStr>::partial_cmp(p0, p1);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<byte_str::ByteStr as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<byte_str::ByteStr as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","extensions::IdHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<byte_str::ByteStr as std::hash::Hash>::hash(p0, p1);
+crate::<byte_str::ByteStr as std::hash::Hash>::hash(p0, p1);
+<byte_str::ByteStr>::hash(p0, p1);
-----------------
src/byte_str.rs byte_str::ByteStr::new
deps:{}
candidates:{}
+byte_str::ByteStr::new();
+crate::byte_str::ByteStr::new();
+<byte_str::ByteStr>::new();
-----------------
src/byte_str.rs byte_str::ByteStr::from_static
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+byte_str::ByteStr::from_static(&p0);
+crate::byte_str::ByteStr::from_static(&p0);
+<byte_str::ByteStr>::from_static(&p0);
-----------------
src/byte_str.rs byte_str::ByteStr::from_utf8_unchecked
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // bytes::Bytes
+byte_str::ByteStr::from_utf8_unchecked(p0);
+crate::byte_str::ByteStr::from_utf8_unchecked(p0);
+<byte_str::ByteStr>::from_utf8_unchecked(p0);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::ops::Deref>::deref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+p0.deref();
+<byte_str::ByteStr as std::ops::Deref>::deref(p0);
+crate::<byte_str::ByteStr as std::ops::Deref>::deref(p0);
+<byte_str::ByteStr>::deref(p0);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::convert::From<std::string::String>>::from
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<byte_str::ByteStr as std::convert::From<std::string::String>>::from(p0);
+crate::<byte_str::ByteStr as std::convert::From<std::string::String>>::from(p0);
+<byte_str::ByteStr>::from(p0);
-----------------
src/byte_str.rs <byte_str::ByteStr as std::convert::From<&'a str>>::from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<byte_str::ByteStr as std::convert::From<&'a str>>::from(&p0);
+crate::<byte_str::ByteStr as std::convert::From<&'a str>>::from(&p0);
+<byte_str::ByteStr>::from(&p0);
-----------------
src/byte_str.rs byte_str::<impl std::convert::From<byte_str::ByteStr> for bytes::Bytes>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // byte_str::ByteStr
+byte_str::<impl std::convert::From<byte_str::ByteStr> for bytes::Bytes>::from(p0);
+crate::byte_str::<impl std::convert::From<byte_str::ByteStr> for bytes::Bytes>::from(p0);
+<bytes::Bytes>::from(p0);
-----------------
src/convert.rs <T as convert::HttpTryInto<U>>::http_try_into
deps:{"<T as convert::HttpTryInto<U>>::http_try_into":{"T":["std::marker::Sized"],"U":["std::marker::Sized","convert::HttpTryFrom"]}}
candidates:{"<T as convert::HttpTryInto<U>>::http_try_into":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.http_try_into();
+<T as convert::HttpTryInto<U>>::http_try_into(p0);
+crate::<T as convert::HttpTryInto<U>>::http_try_into(p0);
+<T>::http_try_into(p0);
-----------------
src/convert.rs <uri::Uri as convert::HttpTryFrom<uri::Uri>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::Uri
+<uri::Uri as convert::HttpTryFrom<uri::Uri>>::try_from(p0);
+crate::<uri::Uri as convert::HttpTryFrom<uri::Uri>>::try_from(p0);
+<uri::Uri>::try_from(p0);
-----------------
src/convert.rs <method::Method as convert::HttpTryFrom<method::Method>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // method::Method
+<method::Method as convert::HttpTryFrom<method::Method>>::try_from(p0);
+crate::<method::Method as convert::HttpTryFrom<method::Method>>::try_from(p0);
+<method::Method>::try_from(p0);
-----------------
src/convert.rs <status::StatusCode as convert::HttpTryFrom<status::StatusCode>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // status::StatusCode
+<status::StatusCode as convert::HttpTryFrom<status::StatusCode>>::try_from(p0);
+crate::<status::StatusCode as convert::HttpTryFrom<status::StatusCode>>::try_from(p0);
+<status::StatusCode>::try_from(p0);
-----------------
src/convert.rs <header::name::HeaderName as convert::HttpTryFrom<header::name::HeaderName>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::HeaderName
+<header::name::HeaderName as convert::HttpTryFrom<header::name::HeaderName>>::try_from(p0);
+crate::<header::name::HeaderName as convert::HttpTryFrom<header::name::HeaderName>>::try_from(p0);
+<header::name::HeaderName>::try_from(p0);
-----------------
src/convert.rs <header::value::HeaderValue as convert::HttpTryFrom<header::value::HeaderValue>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::value::HeaderValue
+<header::value::HeaderValue as convert::HttpTryFrom<header::value::HeaderValue>>::try_from(p0);
+crate::<header::value::HeaderValue as convert::HttpTryFrom<header::value::HeaderValue>>::try_from(p0);
+<header::value::HeaderValue>::try_from(p0);
-----------------
src/convert.rs <uri::scheme::Scheme as convert::HttpTryFrom<uri::scheme::Scheme>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::scheme::Scheme
+<uri::scheme::Scheme as convert::HttpTryFrom<uri::scheme::Scheme>>::try_from(p0);
+crate::<uri::scheme::Scheme as convert::HttpTryFrom<uri::scheme::Scheme>>::try_from(p0);
+<uri::scheme::Scheme>::try_from(p0);
-----------------
src/convert.rs <uri::authority::Authority as convert::HttpTryFrom<uri::authority::Authority>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::authority::Authority
+<uri::authority::Authority as convert::HttpTryFrom<uri::authority::Authority>>::try_from(p0);
+crate::<uri::authority::Authority as convert::HttpTryFrom<uri::authority::Authority>>::try_from(p0);
+<uri::authority::Authority>::try_from(p0);
-----------------
src/convert.rs <uri::path::PathAndQuery as convert::HttpTryFrom<uri::path::PathAndQuery>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::path::PathAndQuery
+<uri::path::PathAndQuery as convert::HttpTryFrom<uri::path::PathAndQuery>>::try_from(p0);
+crate::<uri::path::PathAndQuery as convert::HttpTryFrom<uri::path::PathAndQuery>>::try_from(p0);
+<uri::path::PathAndQuery>::try_from(p0);
-----------------
src/convert.rs <header::map::HeaderMap<T> as convert::HttpTryFrom<header::map::HeaderMap<T>>>::try_from
deps:{"<header::map::HeaderMap<T> as convert::HttpTryFrom<header::map::HeaderMap<T>>>::try_from":{"T":["std::marker::Sized"]}}
candidates:{"<header::map::HeaderMap<T> as convert::HttpTryFrom<header::map::HeaderMap<T>>>::try_from":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::map::HeaderMap<T>
+<header::map::HeaderMap<T> as convert::HttpTryFrom<header::map::HeaderMap<T>>>::try_from(p0);
+crate::<header::map::HeaderMap<T> as convert::HttpTryFrom<header::map::HeaderMap<T>>>::try_from(p0);
+<header::map::HeaderMap<T>>::try_from(p0);
-----------------
src/error.rs <error::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::Error as std::fmt::Debug>::fmt(p0, p1);
+<error::Error>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::Error as std::fmt::Display>::fmt(p0, p1);
+crate::<error::Error as std::fmt::Display>::fmt(p0, p1);
+<error::Error>::fmt(p0, p1);
-----------------
src/error.rs error::Error::is
deps:{"<&'a T as std::error::Error>":{},"error::Error::is":{"T":["std::marker::Sized","std::error::Error"]}}
candidates:{"<&'a T as std::error::Error>":{},"error::Error::is":{"T":["status::InvalidStatusCode","uri::InvalidUriParts","header::value::InvalidHeaderValueBytes","header::value::InvalidHeaderValue","<&'a T as std::error::Error>","header::name::InvalidHeaderNameBytes","method::InvalidMethod","uri::InvalidUriBytes","error::Error","header::name::InvalidHeaderName","header::value::ToStrError","error::Never","uri::InvalidUri"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.is();
+error::Error::is(p0);
+crate::error::Error::is(p0);
+<error::Error>::is(p0);
-----------------
src/error.rs error::Error::get_ref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.get_ref();
+error::Error::get_ref(p0);
+crate::error::Error::get_ref(p0);
+<error::Error>::get_ref(p0);
-----------------
src/error.rs <error::Error as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.description();
+<error::Error as std::error::Error>::description(p0);
+crate::<error::Error as std::error::Error>::description(p0);
+<error::Error>::description(p0);
-----------------
src/error.rs <error::Error as std::error::Error>::cause
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.cause();
+<error::Error as std::error::Error>::cause(p0);
+crate::<error::Error as std::error::Error>::cause(p0);
+<error::Error>::cause(p0);
-----------------
src/error.rs <error::Error as std::convert::From<status::InvalidStatusCode>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // status::InvalidStatusCode
+<error::Error as std::convert::From<status::InvalidStatusCode>>::from(p0);
+crate::<error::Error as std::convert::From<status::InvalidStatusCode>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<method::InvalidMethod>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // method::InvalidMethod
+<error::Error as std::convert::From<method::InvalidMethod>>::from(p0);
+crate::<error::Error as std::convert::From<method::InvalidMethod>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<uri::InvalidUri>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::InvalidUri
+<error::Error as std::convert::From<uri::InvalidUri>>::from(p0);
+crate::<error::Error as std::convert::From<uri::InvalidUri>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<uri::InvalidUriBytes>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::InvalidUriBytes
+<error::Error as std::convert::From<uri::InvalidUriBytes>>::from(p0);
+crate::<error::Error as std::convert::From<uri::InvalidUriBytes>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<uri::InvalidUriParts>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // uri::InvalidUriParts
+<error::Error as std::convert::From<uri::InvalidUriParts>>::from(p0);
+crate::<error::Error as std::convert::From<uri::InvalidUriParts>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<header::name::InvalidHeaderName>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderName
+<error::Error as std::convert::From<header::name::InvalidHeaderName>>::from(p0);
+crate::<error::Error as std::convert::From<header::name::InvalidHeaderName>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<header::name::InvalidHeaderNameBytes>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::name::InvalidHeaderNameBytes
+<error::Error as std::convert::From<header::name::InvalidHeaderNameBytes>>::from(p0);
+crate::<error::Error as std::convert::From<header::name::InvalidHeaderNameBytes>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<header::value::InvalidHeaderValue>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValue
+<error::Error as std::convert::From<header::value::InvalidHeaderValue>>::from(p0);
+crate::<error::Error as std::convert::From<header::value::InvalidHeaderValue>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<header::value::InvalidHeaderValueBytes>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // header::value::InvalidHeaderValueBytes
+<error::Error as std::convert::From<header::value::InvalidHeaderValueBytes>>::from(p0);
+crate::<error::Error as std::convert::From<header::value::InvalidHeaderValueBytes>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<error::Never>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Never
+<error::Error as std::convert::From<error::Never>>::from(p0);
+crate::<error::Error as std::convert::From<error::Never>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Never as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Never
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::Never as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::Never as std::fmt::Debug>::fmt(p0, p1);
+<error::Never>::fmt(p0, p1);
-----------------
src/error.rs <error::Never as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Never
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::Never as std::fmt::Display>::fmt(p0, p1);
+crate::<error::Never as std::fmt::Display>::fmt(p0, p1);
+<error::Never>::fmt(p0, p1);
-----------------
src/error.rs <error::Never as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Never
+p0.description();
+<error::Never as std::error::Error>::description(p0);
+crate::<error::Never as std::error::Error>::description(p0);
+<error::Never>::description(p0);
-----------------
src/extensions.rs <extensions::IdHasher as std::default::Default>::default
deps:{}
candidates:{}
+<extensions::IdHasher as std::default::Default>::default();
+crate::<extensions::IdHasher as std::default::Default>::default();
+<extensions::IdHasher>::default();
-----------------
src/extensions.rs <extensions::IdHasher as std::hash::Hasher>::write
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::IdHasher
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.write(p1);
+<extensions::IdHasher as std::hash::Hasher>::write(p0, p1);
+crate::<extensions::IdHasher as std::hash::Hasher>::write(p0, p1);
+<extensions::IdHasher>::write(p0, p1);
-----------------
src/extensions.rs <extensions::IdHasher as std::hash::Hasher>::write_u64
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::IdHasher
let mut p1 = 0u64; // None+u64
+p0.write_u64(p1);
+<extensions::IdHasher as std::hash::Hasher>::write_u64(p0, p1);
+crate::<extensions::IdHasher as std::hash::Hasher>::write_u64(p0, p1);
+<extensions::IdHasher>::write_u64(p0, p1);
-----------------
src/extensions.rs <extensions::IdHasher as std::hash::Hasher>::finish
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // extensions::IdHasher
+p0.finish();
+<extensions::IdHasher as std::hash::Hasher>::finish(p0);
+crate::<extensions::IdHasher as std::hash::Hasher>::finish(p0);
+<extensions::IdHasher>::finish(p0);
-----------------
src/extensions.rs <extensions::Extensions as std::default::Default>::default
deps:{}
candidates:{}
+<extensions::Extensions as std::default::Default>::default();
+crate::<extensions::Extensions as std::default::Default>::default();
+<extensions::Extensions>::default();
-----------------
src/extensions.rs extensions::Extensions::new
deps:{}
candidates:{}
+extensions::Extensions::new();
+crate::extensions::Extensions::new();
+<extensions::Extensions>::new();
-----------------
src/extensions.rs extensions::Extensions::insert
deps:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::insert":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Drain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sync","std::marker::Sized"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::insert":{"T":["header::map::ValueDrain","header::map::ValueIterMut","<*const T as std::marker::Sync>","header::map::Iter","header::map::Drain","header::map::IterMut"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::Drain","header::map::Iter","header::map::IterMut","<*mut T as std::fmt::Debug>","header::map::ValueIterMut"]},"header::map::Iter":{"T":["<*mut T as std::fmt::Debug>","header::map::IterMut","header::map::Drain","header::map::ValueDrain","header::map::Iter","header::map::ValueIterMut"]},"header::map::IterMut":{"T":["<*mut T as std::marker::Send>","header::map::Iter","header::map::Drain","header::map::IterMut","header::map::ValueIterMut","header::map::ValueDrain"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","header::map::Iter","header::map::Drain","<*mut T as std::marker::Sync>","header::map::IterMut","header::map::ValueDrain"]},"header::map::ValueIterMut":{"T":["header::map::ValueDrain","<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::Iter","header::map::IterMut","header::map::Drain"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::Extensions
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.insert(p1);
+extensions::Extensions::insert(p0, p1);
+crate::extensions::Extensions::insert(p0, p1);
+<extensions::Extensions>::insert(p0, p1);
-----------------
src/extensions.rs extensions::Extensions::get
deps:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::get":{"T":["std::marker::Sized","std::marker::Send","std::marker::Sync"]},"header::map::Drain":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"header::map::Iter":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::get":{"T":["<*mut T as std::marker::Send>","header::map::Iter","header::map::ValueIterMut","header::map::IterMut","header::map::Drain","header::map::ValueDrain","<*mut T as std::marker::Sync>"]},"header::map::Drain":{"T":["<*mut T as std::fmt::Debug>","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter","header::map::Drain","header::map::IterMut"]},"header::map::Iter":{"T":["header::map::Iter","header::map::ValueDrain","<*const T as std::fmt::Debug>","header::map::IterMut","header::map::ValueIterMut","header::map::Drain"]},"header::map::IterMut":{"T":["header::map::Drain","<*const T as std::fmt::Debug>","header::map::ValueIterMut","header::map::Iter","header::map::IterMut","header::map::ValueDrain"]},"header::map::ValueDrain":{"T":["header::map::ValueDrain","header::map::Drain","<*mut T as std::marker::Send>","header::map::IterMut","header::map::Iter","header::map::ValueIterMut"]},"header::map::ValueIterMut":{"T":["header::map::Drain","header::map::ValueIterMut","header::map::IterMut","header::map::ValueDrain","header::map::Iter","<*mut T as std::marker::Sync>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // extensions::Extensions
+p0.get();
+extensions::Extensions::get(p0);
+crate::extensions::Extensions::get(p0);
+<extensions::Extensions>::get(p0);
-----------------
src/extensions.rs extensions::Extensions::get_mut
deps:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::get_mut":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send"]},"header::map::Drain":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"header::map::Iter":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::IterMut":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"header::map::ValueDrain":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"header::map::ValueIterMut":{"T":["std::fmt::Debug","std::marker::Send","std::marker::Sized","std::marker::Sync"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::get_mut":{"T":["header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","<*const T as std::marker::Send>","<*mut T as std::marker::Send>","header::map::Drain","header::map::IterMut"]},"header::map::Drain":{"T":["header::map::IterMut","header::map::Drain","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","<*mut T as std::marker::Send>"]},"header::map::Iter":{"T":["header::map::IterMut","header::map::ValueDrain","header::map::Iter","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Drain"]},"header::map::IterMut":{"T":["<*mut T as std::marker::Sync>","header::map::Drain","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain"]},"header::map::ValueDrain":{"T":["header::map::ValueIterMut","header::map::IterMut","header::map::Drain","<*const T as std::marker::Send>","header::map::Iter","header::map::ValueDrain"]},"header::map::ValueIterMut":{"T":["header::map::Iter","header::map::ValueIterMut","<*const T as std::marker::Send>","header::map::Drain","header::map::IterMut","header::map::ValueDrain"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::Extensions
+p0.get_mut();
+extensions::Extensions::get_mut(p0);
+crate::extensions::Extensions::get_mut(p0);
+<extensions::Extensions>::get_mut(p0);
-----------------
src/extensions.rs extensions::Extensions::remove
deps:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::remove":{"T":["std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::Drain":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::Iter":{"T":["std::fmt::Debug","std::marker::Sized","std::marker::Sync"]},"header::map::IterMut":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"header::map::ValueDrain":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"header::map::ValueIterMut":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<*mut T as std::marker::Sync>":{},"extensions::Extensions::remove":{"T":["<*mut T as std::marker::Sync>","header::map::Drain","header::map::Iter","header::map::ValueDrain","header::map::ValueIterMut","<*mut T as std::marker::Send>","<*const T as std::marker::Sync>","header::map::IterMut"]},"header::map::Drain":{"T":["header::map::ValueDrain","header::map::IterMut","header::map::ValueIterMut","header::map::Iter","<*mut T as std::fmt::Debug>","header::map::Drain"]},"header::map::Iter":{"T":["header::map::ValueDrain","header::map::ValueIterMut","header::map::Iter","header::map::Drain","header::map::IterMut","<*const T as std::fmt::Debug>"]},"header::map::IterMut":{"T":["header::map::Iter","<*mut T as std::marker::Send>","header::map::ValueIterMut","header::map::IterMut","header::map::ValueDrain","header::map::Drain"]},"header::map::ValueDrain":{"T":["<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::Iter","header::map::ValueDrain","header::map::Drain","header::map::IterMut"]},"header::map::ValueIterMut":{"T":["header::map::IterMut","<*mut T as std::marker::Sync>","header::map::ValueIterMut","header::map::ValueDrain","header::map::Iter","header::map::Drain"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::Extensions
+p0.remove();
+extensions::Extensions::remove(p0);
+crate::extensions::Extensions::remove(p0);
+<extensions::Extensions>::remove(p0);
-----------------
src/extensions.rs extensions::Extensions::clear
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // extensions::Extensions
+p0.clear();
+extensions::Extensions::clear(p0);
+crate::extensions::Extensions::clear(p0);
+<extensions::Extensions>::clear(p0);
-----------------
src/extensions.rs <extensions::Extensions as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // extensions::Extensions
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<extensions::Extensions as std::fmt::Debug>::fmt(p0, p1);
+crate::<extensions::Extensions as std::fmt::Debug>::fmt(p0, p1);
+<extensions::Extensions>::fmt(p0, p1);