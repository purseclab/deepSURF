{"dependencies":{"through":["std::marker::Sized","std::ops::FnOnce"],"through_and":["std::marker::Sized","std::ops::FnOnce"]},"glob_path_import":{},"self_to_fn":{},"single_path_import":{},"srcs":{"through":["/// Mutate a referenced element by transferring ownership through a function.\npub fn through<T>(elem: &mut T, func: impl FnOnce(T) -> T){\n    unsafe {\n        let elem_ref = elem;\n        let elem = ptr::read(elem_ref);\n        let elem = func(elem);\n        ptr::write(elem_ref, elem);\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"],"through_and":["/// Mutate a referenced element by transferring ownership through a function, which also\n/// produces an output datum which is returned from this function.\npub fn through_and<T, O>(elem: &mut T, func: impl FnOnce(T) -> (T, O)) -> O{\n    unsafe {\n        let elem_ref = elem;\n        let elem = ptr::read(elem_ref);\n        let (elem, out) = func(elem);\n        ptr::write(elem_ref, elem);\n        out\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"]},"struct_constructor":{},"struct_to_trait":{},"targets":{"through":["through","Real(LocalPath(\"src/lib.rs\"))",""],"through_and":["through_and","Real(LocalPath(\"src/lib.rs\"))",""]},"trait_to_struct":{},"type_to_def_path":{}}