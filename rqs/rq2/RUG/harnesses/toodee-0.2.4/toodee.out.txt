-----------------
src/view.rs view::calculate_view_dimensions
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"view::TooDeeView":{"T":["std::marker::Copy","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::cmp::PartialEq"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash"]},"view::calculate_view_dimensions":{"T":["std::marker::Sized"],"impl TooDeeOps<T>":["std::marker::Sized","ops::TooDeeOps"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","<*mut T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["<*mut T as std::fmt::Debug>","u32","char","bool","u64","i8","u16","i64","u8","i16","usize","i32"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]},"view::calculate_view_dimensions":{"T":["RUG_ANY"],"impl TooDeeOps<T>":["view::TooDeeViewMut","toodee::TooDee","view::TooDeeView"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = & MaybeUninit::uninit().assume_init(); // impl TooDeeOps<T>
+view::calculate_view_dimensions(p0, p1, p2);
+crate::view::calculate_view_dimensions(p0, p1, p2);
+crate::view::calculate_view_dimensions(p0, p1, p2);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::fold::flatten
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold::flatten":{"Acc":["std::marker::Sized"],"U":["std::marker::Sized","std::iter::Iterator"],"impl FnMut(Acc, U::Item) -> Acc":["std::ops::FnMut","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","std::marker::Sized","std::iter::ExactSizeIterator","iter::TooDeeIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"toodee::TooDee":{"T":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash"]},"view::TooDeeView":{"T":["std::marker::Copy","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::fmt::Debug","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["flattenexact::FlattenExact","toodee::DrainCol","iter::Rows","iter::RowsMut","<&mut I as std::iter::Iterator>","iter::Col","iter::ColMut"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold::flatten":{"Acc":["RUG_ANY"],"U":["iter::Col","iter::ColMut","iter::RowsMut","flattenexact::FlattenExact","iter::Rows","<&mut I as std::iter::Iterator>","toodee::DrainCol"],"impl FnMut(Acc, U::Item) -> Acc":["core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Col","<*mut T as std::fmt::Debug>","view::TooDeeView","toodee::TooDee","toodee::DrainCol","iter::Rows","iter::ColMut","iter::RowsMut","view::TooDeeViewMut"]},"iter::ColMut":{"T":["iter::RowsMut","toodee::DrainCol","toodee::TooDee","view::TooDeeView","iter::ColMut","<*mut T as std::fmt::Debug>","iter::Rows","iter::Col","view::TooDeeViewMut"]},"iter::Rows":{"T":["view::TooDeeView","<&mut T as std::fmt::Debug>","view::TooDeeViewMut","iter::Col","iter::Rows","iter::RowsMut","iter::ColMut","toodee::TooDee","toodee::DrainCol"]},"iter::RowsMut":{"T":["iter::Rows","iter::RowsMut","iter::Col","<*mut T as std::fmt::Debug>","view::TooDeeView","toodee::DrainCol","toodee::TooDee","view::TooDeeViewMut","iter::ColMut"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::collections::linked_list::IterMut<'_, T>","std::cell::Cell<T>","std::io::IoSliceMut<'a>","std::sync::mpmc::Sender<T>","std::sync::Weak<T>","std::sync::Mutex<T>","std::string::Drain<'_>","std::ptr::Unique<T>","std::slice::Iter<'_, T>","std::future::ResumeTy","std::env::ArgsOs","std::sys::unix::args::Args","std::sync::atomic::AtomicPtr<T>","std::collections::linked_list::Iter<'_, T>","std::io::error::repr_bitpacked::Repr","std::ptr::DynMetadata<Dyn>","std::sync::OnceLock<T>","std::sync::mpsc::Receiver<T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::LinkedList<T>","std::collections::linked_list::Cursor<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::cell::RefCell<T>","std::sync::mpmc::Receiver<T>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","<*const T as std::fmt::Debug>","std::sync::mpsc::Sender<T>","std::env::Args","std::boxed::ThinBox<T>","std::sync::RwLock<T>","std::thread::JoinHandle<T>","std::rc::Weak<T>","std::vec::Drain<'_, T, A>","std::ptr::NonNull<T>","std::sync::RwLockWriteGuard<'_, T>","std::io::IoSlice<'a>","std::collections::linked_list::CursorMut<'_, T>","std::task::Waker","std::sync::MutexGuard<'_, T>"]},"toodee::TooDee":{"T":["toodee::TooDee","<*const T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["u8","i16","<*const T as std::fmt::Debug>","char","i64","u16","i32","u32","usize","u64","i8","bool"]},"view::TooDeeViewMut":{"T":["<*const T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // impl FnMut(Acc, U::Item) -> Acc
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold::flatten(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold::flatten(p0);
+<flattenexact::FlattenExact<I>>::fold::flatten(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold::flatten
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut I as std::iter::DoubleEndedIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold::flatten":{"Acc":["std::marker::Sized"],"U":["std::iter::DoubleEndedIterator","std::marker::Sized"],"impl FnMut(Acc, U::Item) -> Acc":["std::ops::FnMut","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["iter::TooDeeIterator","std::marker::Sized","std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::marker::Send","std::marker::Sync","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::clone::Clone"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::hash::Hash"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut I as std::iter::DoubleEndedIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","iter::Rows","iter::Col","iter::ColMut","iter::RowsMut","flattenexact::FlattenExact","toodee::DrainCol"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold::flatten":{"Acc":["RUG_ANY"],"U":["toodee::DrainCol","iter::Col","iter::ColMut","iter::RowsMut","iter::Rows","<&'a mut I as std::iter::DoubleEndedIterator>","flattenexact::FlattenExact"],"impl FnMut(Acc, U::Item) -> Acc":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["view::TooDeeViewMut","toodee::TooDee","<&T as std::fmt::Debug>","iter::RowsMut","iter::Col","iter::ColMut","view::TooDeeView","iter::Rows","toodee::DrainCol"]},"iter::ColMut":{"T":["view::TooDeeViewMut","iter::RowsMut","iter::ColMut","iter::Col","iter::Rows","<&mut T as std::fmt::Debug>","view::TooDeeView","toodee::DrainCol","toodee::TooDee"]},"iter::Rows":{"T":["iter::ColMut","toodee::TooDee","iter::Rows","view::TooDeeView","<*mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeViewMut","iter::RowsMut","iter::Col"]},"iter::RowsMut":{"T":["iter::RowsMut","iter::Col","<*mut T as std::fmt::Debug>","iter::ColMut","toodee::DrainCol","toodee::TooDee","iter::Rows","view::TooDeeView","view::TooDeeViewMut"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::future::ResumeTy","std::sync::mpmc::Receiver<T>","std::cell::RefCell<T>","std::sync::Weak<T>","std::sync::Arc<T>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::RwLock<T>","std::sync::MutexGuard<'_, T>","std::sync::mpmc::Sender<T>","std::collections::LinkedList<T>","std::ptr::NonNull<T>","std::boxed::ThinBox<T>","std::sync::OnceLock<T>","std::thread::JoinHandle<T>","std::ptr::Unique<T>","std::ptr::DynMetadata<Dyn>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::task::Waker","std::io::IoSlice<'a>","std::rc::Weak<T>","std::collections::linked_list::Cursor<'_, T>","std::io::error::repr_bitpacked::Repr","std::cell::Cell<T>","std::io::IoSliceMut<'a>","std::collections::linked_list::Iter<'_, T>","std::slice::IterMut<'_, T>","std::string::Drain<'_>","std::env::ArgsOs","std::vec::Drain<'_, T, A>","std::sys::unix::args::Args","std::collections::linked_list::IterMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::sync::mpsc::Receiver<T>","std::sync::Mutex<T>","std::rc::Rc<T>","std::sync::atomic::AtomicPtr<T>","std::sync::mpsc::Sender<T>","std::sync::RwLockWriteGuard<'_, T>","<*const T as std::marker::Send>","std::env::Args","std::collections::linked_list::CursorMut<'_, T>"]},"toodee::TooDee":{"T":["toodee::TooDee","<*const T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["u8","char","i32","u16","u32","u64","bool","i8","<*mut T as std::fmt::Debug>","usize","i16","i64"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // impl FnMut(Acc, U::Item) -> Acc
+<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold::flatten(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold::flatten(p0);
+<flattenexact::FlattenExact<I>>::rfold::flatten(p0);
-----------------
src/sort.rs sort::build_swap_trace
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // [(usize, usize)]
+sort::build_swap_trace(p0);
+crate::sort::build_swap_trace(p0);
+crate::sort::build_swap_trace(p0);
-----------------
src/sort.rs sort::sorted_box_to_ordering
deps:{"sort::sorted_box_to_ordering":{"T":["std::marker::Sized"]}}
candidates:{"sort::sorted_box_to_ordering":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::boxed::Box<[(usize, &T)]>
+sort::sorted_box_to_ordering(p0);
+crate::sort::sorted_box_to_ordering(p0);
+crate::sort::sorted_box_to_ordering(p0);
-----------------
src/iter.rs iter::TooDeeIterator::num_cols
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","iter::TooDeeIterator","std::marker::Sized","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::TooDeeIterator::num_cols":{"Self":["std::iter::Iterator","iter::TooDeeIterator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::marker::Copy","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::fmt::Debug","std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","iter::RowsMut","iter::ColMut","iter::Rows","iter::Col","toodee::DrainCol"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Rows","toodee::TooDee","iter::RowsMut","view::TooDeeViewMut","view::TooDeeView","iter::ColMut","toodee::DrainCol","iter::Col","<&T as std::fmt::Debug>"]},"iter::ColMut":{"T":["iter::Rows","toodee::DrainCol","iter::Col","<*const T as std::fmt::Debug>","iter::RowsMut","view::TooDeeView","toodee::TooDee","view::TooDeeViewMut","iter::ColMut"]},"iter::Rows":{"T":["view::TooDeeViewMut","iter::Rows","<*mut T as std::fmt::Debug>","iter::RowsMut","toodee::TooDee","view::TooDeeView","iter::Col","iter::ColMut","toodee::DrainCol"]},"iter::RowsMut":{"T":["toodee::TooDee","iter::Rows","toodee::DrainCol","<&T as std::fmt::Debug>","iter::ColMut","iter::RowsMut","view::TooDeeViewMut","view::TooDeeView","iter::Col"]},"iter::TooDeeIterator::num_cols":{"Self":["flattenexact::FlattenExact"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::Weak<T>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::atomic::AtomicPtr<T>","std::ptr::Unique<T>","std::ptr::DynMetadata<Dyn>","std::future::ResumeTy","std::sync::Mutex<T>","std::sync::RwLock<T>","std::vec::Drain<'_, T, A>","std::cell::Cell<T>","std::boxed::ThinBox<T>","std::sync::RwLockReadGuard<'_, T>","std::sync::MutexGuard<'_, T>","std::sys::unix::args::Args","std::rc::Rc<T>","std::io::error::repr_bitpacked::Repr","std::rc::Weak<T>","std::collections::LinkedList<T>","std::sync::mpsc::Sender<T>","<*const T as std::marker::Sync>","std::sync::Arc<T>","std::collections::linked_list::IterMut<'_, T>","std::slice::IterMut<'_, T>","std::io::IoSlice<'a>","std::sync::mpmc::Sender<T>","std::env::Args","std::slice::Iter<'_, T>","std::task::Waker","std::env::ArgsOs","std::collections::linked_list::Cursor<'_, T>","std::string::Drain<'_>","std::sync::RwLockWriteGuard<'_, T>","std::io::IoSliceMut<'a>","std::cell::RefCell<T>","std::thread::JoinHandle<T>","std::sync::OnceLock<T>","std::collections::linked_list::Iter<'_, T>","std::sync::mpsc::Receiver<T>","std::vec::IntoIter<T, A>","std::sync::mpmc::Receiver<T>","std::ptr::NonNull<T>","std::collections::linked_list::CursorMut<'_, T>"]},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["std::marker::copy_impls::<impl std::marker::Copy for *mut T>","char","u16","i64","usize","u32","bool","i8","i16","i32","u64","u8"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.num_cols();
+iter::TooDeeIterator::num_cols(p0);
+crate::iter::TooDeeIterator::num_cols(p0);
+crate::iter::TooDeeIterator::num_cols(p0);
-----------------
src/ops.rs ops::TooDeeOps::num_cols
deps:{"ops::TooDeeOps::num_cols":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::num_cols":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.num_cols();
+ops::TooDeeOps::num_cols(p0);
+crate::ops::TooDeeOps::num_cols(p0);
+crate::ops::TooDeeOps::num_cols(p0);
-----------------
src/ops.rs ops::TooDeeOps::num_rows
deps:{"ops::TooDeeOps::num_rows":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::num_rows":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.num_rows();
+ops::TooDeeOps::num_rows(p0);
+crate::ops::TooDeeOps::num_rows(p0);
+crate::ops::TooDeeOps::num_rows(p0);
-----------------
src/ops.rs ops::TooDeeOps::size
deps:{"ops::TooDeeOps::size":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::size":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.size();
+ops::TooDeeOps::size(p0);
+crate::ops::TooDeeOps::size(p0);
+crate::ops::TooDeeOps::size(p0);
-----------------
src/ops.rs ops::TooDeeOps::is_empty
deps:{"ops::TooDeeOps::is_empty":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::is_empty":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.is_empty();
+ops::TooDeeOps::is_empty(p0);
+crate::ops::TooDeeOps::is_empty(p0);
+crate::ops::TooDeeOps::is_empty(p0);
-----------------
src/ops.rs ops::TooDeeOps::bounds
deps:{"ops::TooDeeOps::bounds":{"Self":["ops::TooDeeOps","std::ops::Index"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::bounds":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.bounds();
+ops::TooDeeOps::bounds(p0);
+crate::ops::TooDeeOps::bounds(p0);
+crate::ops::TooDeeOps::bounds(p0);
-----------------
src/ops.rs ops::TooDeeOps::view
deps:{"ops::TooDeeOps::view":{"Self":["ops::TooDeeOps","std::ops::Index"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::view":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view(p1, p2);
+ops::TooDeeOps::view(p0, p1, p2);
+crate::ops::TooDeeOps::view(p0, p1, p2);
+crate::ops::TooDeeOps::view(p0, p1, p2);
-----------------
src/ops.rs ops::TooDeeOps::rows
deps:{"ops::TooDeeOps::rows":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::rows":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.rows();
+ops::TooDeeOps::rows(p0);
+crate::ops::TooDeeOps::rows(p0);
+crate::ops::TooDeeOps::rows(p0);
-----------------
src/ops.rs ops::TooDeeOps::col
deps:{"ops::TooDeeOps::col":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::col":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.col(p1);
+ops::TooDeeOps::col(p0, p1);
+crate::ops::TooDeeOps::col(p0, p1);
+crate::ops::TooDeeOps::col(p0, p1);
-----------------
src/ops.rs ops::TooDeeOps::cells
deps:{"ops::TooDeeOps::cells":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::cells":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.cells();
+ops::TooDeeOps::cells(p0);
+crate::ops::TooDeeOps::cells(p0);
+crate::ops::TooDeeOps::cells(p0);
-----------------
src/ops.rs ops::TooDeeOps::get_unchecked_row
deps:{"ops::TooDeeOps::get_unchecked_row":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::get_unchecked_row":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row(p1);
+ops::TooDeeOps::get_unchecked_row(p0, p1);
+crate::ops::TooDeeOps::get_unchecked_row(p0, p1);
+crate::ops::TooDeeOps::get_unchecked_row(p0, p1);
-----------------
src/ops.rs ops::TooDeeOps::get_unchecked
deps:{"ops::TooDeeOps::get_unchecked":{"Self":["std::ops::Index","ops::TooDeeOps"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOps::get_unchecked":{"Self":["gimli::read::endian_slice::EndianSlice<'input, Endian>"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked(p1);
+ops::TooDeeOps::get_unchecked(p0, p1);
+crate::ops::TooDeeOps::get_unchecked(p0, p1);
+crate::ops::TooDeeOps::get_unchecked(p0, p1);
-----------------
src/ops.rs ops::TooDeeOpsMut::view_mut
deps:{"ops::TooDeeOpsMut::view_mut":{"Self":["ops::TooDeeOpsMut","ops::TooDeeOps","std::ops::IndexMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::view_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view_mut(p1, p2);
+ops::TooDeeOpsMut::view_mut(p0, p1, p2);
+crate::ops::TooDeeOpsMut::view_mut(p0, p1, p2);
+crate::ops::TooDeeOpsMut::view_mut(p0, p1, p2);
-----------------
src/ops.rs ops::TooDeeOpsMut::rows_mut
deps:{"ops::TooDeeOpsMut::rows_mut":{"Self":["ops::TooDeeOps","std::ops::IndexMut","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::rows_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.rows_mut();
+ops::TooDeeOpsMut::rows_mut(p0);
+crate::ops::TooDeeOpsMut::rows_mut(p0);
+crate::ops::TooDeeOpsMut::rows_mut(p0);
-----------------
src/ops.rs ops::TooDeeOpsMut::col_mut
deps:{"ops::TooDeeOpsMut::col_mut":{"Self":["ops::TooDeeOps","ops::TooDeeOpsMut","std::ops::IndexMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::col_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.col_mut(p1);
+ops::TooDeeOpsMut::col_mut(p0, p1);
+crate::ops::TooDeeOpsMut::col_mut(p0, p1);
+crate::ops::TooDeeOpsMut::col_mut(p0, p1);
-----------------
src/ops.rs ops::TooDeeOpsMut::cells_mut
deps:{"ops::TooDeeOpsMut::cells_mut":{"Self":["ops::TooDeeOps","std::ops::IndexMut","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::cells_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.cells_mut();
+ops::TooDeeOpsMut::cells_mut(p0);
+crate::ops::TooDeeOpsMut::cells_mut(p0);
+crate::ops::TooDeeOpsMut::cells_mut(p0);
-----------------
src/ops.rs ops::TooDeeOpsMut::fill
deps:{"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<*mut T as std::fmt::Debug>":{},"<T as std::borrow::Borrow<T>>":{},"ops::TooDeeOpsMut::fill":{"Self":["ops::TooDeeOps","std::ops::IndexMut","ops::TooDeeOpsMut"],"T":["std::marker::Sized","std::clone::Clone"],"V":["std::borrow::Borrow","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::cmp::PartialEq"]}}
candidates:{"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<*mut T as std::fmt::Debug>":{},"<T as std::borrow::Borrow<T>>":{},"ops::TooDeeOpsMut::fill":{"T":["toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *mut T>","view::TooDeeView","std::clone::impls::<impl std::clone::Clone for &T>"],"V":["std::ffi::CString","std::sync::Arc<T>","std::ffi::OsString","std::path::PathBuf","std::vec::Vec<T, A>","<&mut T as std::borrow::Borrow<T>>","std::boxed::Box<T, A>","std::rc::Rc<T>","std::borrow::Cow<'a, B>","std::string::String","<&T as std::borrow::Borrow<T>>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["bool","usize","u8","i32","u64","char","u32","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","u16","i64","i8","i16"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // V
+p0.fill(p1);
+ops::TooDeeOpsMut::fill(p0, p1);
+crate::ops::TooDeeOpsMut::fill(p0, p1);
+crate::ops::TooDeeOpsMut::fill(p0, p1);
-----------------
src/ops.rs ops::TooDeeOpsMut::swap_cols
deps:{"ops::TooDeeOpsMut::swap_cols":{"Self":["ops::TooDeeOpsMut","ops::TooDeeOps","std::ops::IndexMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::swap_cols":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.swap_cols(p1, p2);
+ops::TooDeeOpsMut::swap_cols(p0, p1, p2);
+crate::ops::TooDeeOpsMut::swap_cols(p0, p1, p2);
+crate::ops::TooDeeOpsMut::swap_cols(p0, p1, p2);
-----------------
src/ops.rs ops::TooDeeOpsMut::swap_rows
deps:{"ops::TooDeeOpsMut::swap_rows":{"Self":["ops::TooDeeOps","std::ops::IndexMut","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::swap_rows":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.swap_rows(p1, p2);
+ops::TooDeeOpsMut::swap_rows(p0, p1, p2);
+crate::ops::TooDeeOpsMut::swap_rows(p0, p1, p2);
+crate::ops::TooDeeOpsMut::swap_rows(p0, p1, p2);
-----------------
src/ops.rs ops::TooDeeOpsMut::row_pair_mut
deps:{"ops::TooDeeOpsMut::row_pair_mut":{"Self":["std::ops::IndexMut","ops::TooDeeOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::row_pair_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.row_pair_mut(p1, p2);
+ops::TooDeeOpsMut::row_pair_mut(p0, p1, p2);
+crate::ops::TooDeeOpsMut::row_pair_mut(p0, p1, p2);
+crate::ops::TooDeeOpsMut::row_pair_mut(p0, p1, p2);
-----------------
src/ops.rs ops::TooDeeOpsMut::get_unchecked_row_mut
deps:{"ops::TooDeeOpsMut::get_unchecked_row_mut":{"Self":["ops::TooDeeOps","std::ops::IndexMut","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::get_unchecked_row_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row_mut(p1);
+ops::TooDeeOpsMut::get_unchecked_row_mut(p0, p1);
+crate::ops::TooDeeOpsMut::get_unchecked_row_mut(p0, p1);
+crate::ops::TooDeeOpsMut::get_unchecked_row_mut(p0, p1);
-----------------
src/ops.rs ops::TooDeeOpsMut::get_unchecked_mut
deps:{"ops::TooDeeOpsMut::get_unchecked_mut":{"Self":["std::ops::IndexMut","ops::TooDeeOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"ops::TooDeeOpsMut::get_unchecked_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked_mut(p1);
+ops::TooDeeOpsMut::get_unchecked_mut(p0, p1);
+crate::ops::TooDeeOpsMut::get_unchecked_mut(p0, p1);
+crate::ops::TooDeeOpsMut::get_unchecked_mut(p0, p1);
-----------------
src/sort.rs sort::SortOps::sort_row_ord
deps:{"sort::SortOps::sort_row_ord":{"F":["std::marker::Sized"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized","std::cmp::Ord"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_row_ord":{"F":["RUG_ANY"],"T":["u16","u32","i64","u64","usize","std::ptr::const_ptr::<impl std::cmp::Ord for *const T>","i8","u8","i32","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","char","i16","bool"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.sort_row_ord(p1);
+sort::SortOps::sort_row_ord(p0, p1);
+crate::sort::SortOps::sort_row_ord(p0, p1);
+crate::sort::SortOps::sort_row_ord(p0, p1);
-----------------
src/sort.rs sort::SortOps::sort_unstable_row_ord
deps:{"sort::SortOps::sort_unstable_row_ord":{"F":["std::marker::Sized"],"Self":["ops::TooDeeOpsMut","sort::SortOps"],"T":["std::cmp::Ord","std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_unstable_row_ord":{"F":["RUG_ANY"],"T":["char","u64","bool","i64","u8","i16","u16","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","u32","i8","i32","usize"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.sort_unstable_row_ord(p1);
+sort::SortOps::sort_unstable_row_ord(p0, p1);
+crate::sort::SortOps::sort_unstable_row_ord(p0, p1);
+crate::sort::SortOps::sort_unstable_row_ord(p0, p1);
-----------------
src/sort.rs sort::SortOps::sort_by_row
deps:{"sort::SortOps::sort_by_row":{"F":["std::marker::Sized","std::ops::FnMut"],"Self":["ops::TooDeeOpsMut","sort::SortOps"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"sort::SortOps::sort_by_row":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_by_row(p1, p2);
+sort::SortOps::sort_by_row(p0, p1, p2);
+crate::sort::SortOps::sort_by_row(p0, p1, p2);
+crate::sort::SortOps::sort_by_row(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_unstable_by_row
deps:{"sort::SortOps::sort_unstable_by_row":{"F":["std::marker::Sized","std::ops::FnMut"],"Self":["ops::TooDeeOpsMut","sort::SortOps"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"sort::SortOps::sort_unstable_by_row":{"F":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_unstable_by_row(p1, p2);
+sort::SortOps::sort_unstable_by_row(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_row(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_row(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_by_row_key
deps:{"sort::SortOps::sort_by_row_key":{"B":["std::cmp::Ord","std::marker::Sized"],"F":["std::marker::Sized","std::ops::FnMut"],"Self":["ops::TooDeeOpsMut","sort::SortOps"],"T":["std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_by_row_key":{"B":["std::cmp::impls::<impl std::cmp::Ord for &A>","char","u8","i64","u32","u16","std::ptr::const_ptr::<impl std::cmp::Ord for *const T>","bool","u64","i16","usize","i8","i32"],"F":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"],"T":["RUG_ANY"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_by_row_key(p1, p2);
+sort::SortOps::sort_by_row_key(p0, p1, p2);
+crate::sort::SortOps::sort_by_row_key(p0, p1, p2);
+crate::sort::SortOps::sort_by_row_key(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_unstable_by_row_key
deps:{"sort::SortOps::sort_unstable_by_row_key":{"B":["std::cmp::Ord","std::marker::Sized"],"F":["std::marker::Sized","std::ops::FnMut"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_unstable_by_row_key":{"B":["i64","char","u32","u64","bool","i32","u8","i16","std::cmp::impls::<impl std::cmp::Ord for &A>","u16","usize","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","i8"],"F":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr"],"T":["RUG_ANY"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_unstable_by_row_key(p1, p2);
+sort::SortOps::sort_unstable_by_row_key(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_row_key(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_row_key(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_col_ord
deps:{"sort::SortOps::sort_col_ord":{"F":["std::marker::Sized"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::cmp::Ord","std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_col_ord":{"F":["RUG_ANY"],"T":["u16","i32","i64","usize","i8","i16","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","u32","char","bool","u8","std::ptr::const_ptr::<impl std::cmp::Ord for *const T>","u64"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.sort_col_ord(p1);
+sort::SortOps::sort_col_ord(p0, p1);
+crate::sort::SortOps::sort_col_ord(p0, p1);
+crate::sort::SortOps::sort_col_ord(p0, p1);
-----------------
src/sort.rs sort::SortOps::sort_by_col
deps:{"sort::SortOps::sort_by_col":{"F":["std::ops::FnMut","std::marker::Sized"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"sort::SortOps::sort_by_col":{"F":["core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_by_col(p1, p2);
+sort::SortOps::sort_by_col(p0, p1, p2);
+crate::sort::SortOps::sort_by_col(p0, p1, p2);
+crate::sort::SortOps::sort_by_col(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_unstable_by_col
deps:{"sort::SortOps::sort_unstable_by_col":{"F":["std::marker::Sized","std::ops::FnMut"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"sort::SortOps::sort_unstable_by_col":{"F":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_unstable_by_col(p1, p2);
+sort::SortOps::sort_unstable_by_col(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_col(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_col(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_by_col_key
deps:{"sort::SortOps::sort_by_col_key":{"B":["std::cmp::Ord","std::marker::Sized"],"F":["std::ops::FnMut","std::marker::Sized"],"Self":["ops::TooDeeOpsMut","sort::SortOps"],"T":["std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_by_col_key":{"B":["std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","std::cmp::impls::<impl std::cmp::Ord for &mut A>","i8","u16","i16","u32","bool","usize","i32","char","u64","u8","i64"],"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace"],"T":["RUG_ANY"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_by_col_key(p1, p2);
+sort::SortOps::sort_by_col_key(p0, p1, p2);
+crate::sort::SortOps::sort_by_col_key(p0, p1, p2);
+crate::sort::SortOps::sort_by_col_key(p0, p1, p2);
-----------------
src/sort.rs sort::SortOps::sort_unstable_by_col_key
deps:{"sort::SortOps::sort_unstable_by_col_key":{"B":["std::marker::Sized","std::cmp::Ord"],"F":["std::ops::FnMut","std::marker::Sized"],"Self":["sort::SortOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"sort::SortOps::sort_unstable_by_col_key":{"B":["u16","i64","u8","i16","char","u32","i32","bool","u64","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","std::cmp::impls::<impl std::cmp::Ord for &A>","i8","usize"],"F":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"T":["RUG_ANY"]},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.sort_unstable_by_col_key(p1, p2);
+sort::SortOps::sort_unstable_by_col_key(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_col_key(p0, p1, p2);
+crate::sort::SortOps::sort_unstable_by_col_key(p0, p1, p2);
-----------------
src/translate.rs translate::TranslateOps::translate_with_wrap
deps:{"translate::TranslateOps::translate_with_wrap":{"Self":["translate::TranslateOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"translate::TranslateOps::translate_with_wrap":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.translate_with_wrap(p1);
+translate::TranslateOps::translate_with_wrap(p0, p1);
+crate::translate::TranslateOps::translate_with_wrap(p0, p1);
+crate::translate::TranslateOps::translate_with_wrap(p0, p1);
-----------------
src/translate.rs translate::TranslateOps::flip_rows
deps:{"translate::TranslateOps::flip_rows":{"Self":["translate::TranslateOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"translate::TranslateOps::flip_rows":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.flip_rows();
+translate::TranslateOps::flip_rows(p0);
+crate::translate::TranslateOps::flip_rows(p0);
+crate::translate::TranslateOps::flip_rows(p0);
-----------------
src/translate.rs translate::TranslateOps::flip_cols
deps:{"translate::TranslateOps::flip_cols":{"Self":["translate::TranslateOps","ops::TooDeeOpsMut"],"T":["std::marker::Sized"]}}
candidates:{"translate::TranslateOps::flip_cols":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.flip_cols();
+translate::TranslateOps::flip_cols(p0);
+crate::translate::TranslateOps::flip_cols(p0);
+crate::translate::TranslateOps::flip_cols(p0);
-----------------
src/copy.rs copy::CopyOps::copy_from_slice
deps:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::copy_from_slice":{"Self":["ops::TooDeeOpsMut","copy::CopyOps"],"T":["std::marker::Copy","std::marker::Sized"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::marker::Sized","std::hash::Hash","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Copy","std::marker::Sized","std::hash::Hash"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::copy_from_slice":{"Self":["toodee::TooDee"],"T":["view::TooDeeView","std::marker::copy_impls::<impl std::marker::Copy for *const T>","std::marker::copy_impls::<impl std::marker::Copy for *mut T>"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *mut T>"]},"view::TooDeeView":{"T":["bool","char","usize","i32","u16","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","i8","u8","i16","i64","u32","u64"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // [T]
+p0.copy_from_slice(p1);
+copy::CopyOps::copy_from_slice(p0, p1);
+crate::copy::CopyOps::copy_from_slice(p0, p1);
+crate::copy::CopyOps::copy_from_slice(p0, p1);
-----------------
src/copy.rs copy::CopyOps::clone_from_slice
deps:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::clone_from_slice":{"Self":["ops::TooDeeOpsMut","copy::CopyOps"],"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::marker::Sized","std::clone::Clone","std::marker::Copy","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::clone_from_slice":{"Self":["toodee::TooDee"],"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","view::TooDeeView","std::clone::impls::<impl std::clone::Clone for &T>","toodee::TooDee"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["i8","bool","u64","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","usize","u16","u8","i64","i16","i32","u32","char"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // [T]
+p0.clone_from_slice(p1);
+copy::CopyOps::clone_from_slice(p0, p1);
+crate::copy::CopyOps::clone_from_slice(p0, p1);
+crate::copy::CopyOps::clone_from_slice(p0, p1);
-----------------
src/copy.rs copy::CopyOps::copy_from_toodee
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"copy::CopyOps::copy_from_toodee":{"Self":["ops::TooDeeOpsMut","copy::CopyOps"],"T":["std::marker::Copy","std::marker::Sized"],"impl TooDeeOps<T>":["std::marker::Sized","ops::TooDeeOps"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"view::TooDeeView":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::marker::Copy","std::cmp::PartialEq","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"copy::CopyOps::copy_from_toodee":{"Self":["toodee::TooDee"],"T":["view::TooDeeView","std::marker::copy_impls::<impl std::marker::Copy for *mut T>"],"impl TooDeeOps<T>":["view::TooDeeView","toodee::TooDee","view::TooDeeViewMut"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","<*mut T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["u64","std::clone::impls::<impl std::clone::Clone for *mut T>","u16","char","i16","i32","i8","bool","u8","i64","u32","usize"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","<*const T as std::fmt::Debug>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // impl TooDeeOps<T>
+p0.copy_from_toodee(p1);
+copy::CopyOps::copy_from_toodee(p0, p1);
+crate::copy::CopyOps::copy_from_toodee(p0, p1);
+crate::copy::CopyOps::copy_from_toodee(p0, p1);
-----------------
src/copy.rs copy::CopyOps::clone_from_toodee
deps:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::clone_from_toodee":{"Self":["copy::CopyOps","ops::TooDeeOpsMut"],"T":["std::clone::Clone","std::marker::Sized"],"impl TooDeeOps<T>":["std::marker::Sized","ops::TooDeeOps"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeView":{"T":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::marker::Copy","std::clone::Clone","std::hash::Hash","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::clone_from_toodee":{"Self":["toodee::TooDee"],"T":["view::TooDeeView","std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee","std::clone::impls::<impl std::clone::Clone for &mut T>"],"impl TooDeeOps<T>":["toodee::TooDee","view::TooDeeViewMut","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["i64","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","u16","i8","usize","bool","char","i32","u8","u64","i16","u32"]},"view::TooDeeViewMut":{"T":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // impl TooDeeOps<T>
+p0.clone_from_toodee(p1);
+copy::CopyOps::clone_from_toodee(p0, p1);
+crate::copy::CopyOps::clone_from_toodee(p0, p1);
+crate::copy::CopyOps::clone_from_toodee(p0, p1);
-----------------
src/copy.rs copy::CopyOps::copy_within
deps:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::copy_within":{"Self":["ops::TooDeeOpsMut","copy::CopyOps"],"T":["std::marker::Copy","std::marker::Sized"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::marker::Sized","std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::marker::Copy","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"copy::CopyOps::copy_within":{"Self":["toodee::TooDee"],"T":["view::TooDeeView","std::marker::copy_impls::<impl std::marker::Copy for *const T>"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","<*const T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","bool","u32","u64","usize","i8","u8","i32","i16","i64","char","u16"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // ((usize, usize), (usize, usize))
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.copy_within(p1, p2);
+copy::CopyOps::copy_within(p0, p1, p2);
+crate::copy::CopyOps::copy_within(p0, p1, p2);
+crate::copy::CopyOps::copy_within(p0, p1, p2);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<iter::Rows<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"view::TooDeeView":{"T":["std::hash::Hash","std::marker::Copy","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<iter::Rows<'a, T> as std::fmt::Debug>::fmt":{"T":["<&mut T as std::fmt::Debug>","iter::ColMut","iter::Rows","toodee::TooDee","iter::Col","iter::RowsMut","<&T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeView","view::TooDeeViewMut"]},"iter::Col":{"T":["view::TooDeeView","iter::ColMut","iter::Col","toodee::TooDee","view::TooDeeViewMut","iter::RowsMut","toodee::DrainCol","iter::Rows","<*mut T as std::fmt::Debug>"]},"iter::ColMut":{"T":["iter::Col","toodee::DrainCol","iter::RowsMut","<*const T as std::fmt::Debug>","iter::ColMut","view::TooDeeView","toodee::TooDee","view::TooDeeViewMut","iter::Rows"]},"iter::Rows":{"T":["view::TooDeeView","toodee::TooDee","<*const T as std::fmt::Debug>","view::TooDeeViewMut","iter::RowsMut","toodee::DrainCol","iter::Rows","iter::ColMut","iter::Col"]},"iter::RowsMut":{"T":["iter::ColMut","iter::Col","toodee::TooDee","toodee::DrainCol","iter::Rows","<*const T as std::fmt::Debug>","view::TooDeeView","view::TooDeeViewMut","iter::RowsMut"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::sync::RwLockReadGuard<'_, T>","std::sync::Mutex<T>","std::slice::IterMut<'_, T>","std::future::ResumeTy","std::cell::Cell<T>","std::ptr::NonNull<T>","std::collections::LinkedList<T>","std::sync::mpmc::Sender<T>","std::slice::Iter<'_, T>","std::sync::Weak<T>","std::sys::unix::args::Args","std::sync::MutexGuard<'_, T>","<*const T as std::marker::Sync>","std::rc::Weak<T>","std::collections::linked_list::CursorMut<'_, T>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::Iter<'_, T>","std::ptr::Unique<T>","std::task::Waker","std::env::Args","std::sync::atomic::AtomicPtr<T>","std::cell::RefCell<T>","std::collections::linked_list::Cursor<'_, T>","std::io::error::repr_bitpacked::Repr","std::io::IoSlice<'a>","std::boxed::ThinBox<T>","std::rc::Rc<T>","std::string::Drain<'_>","std::vec::IntoIter<T, A>","std::thread::JoinHandle<T>","std::vec::Drain<'_, T, A>","std::sync::OnceLock<T>","std::sync::mpmc::Receiver<T>","std::sync::Arc<T>","std::io::IoSliceMut<'a>","std::sync::mpsc::Sender<T>","std::sync::RwLock<T>","std::ptr::DynMetadata<Dyn>","std::collections::linked_list::IterMut<'_, T>","std::env::ArgsOs","std::sync::mpsc::Receiver<T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *const T>"]},"view::TooDeeView":{"T":["char","u64","std::hash::impls::<impl std::hash::Hash for *mut T>","i64","usize","i32","i16","i8","bool","u16","u32","u8"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<iter::Rows<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<iter::Rows<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<iter::Rows<'a, T>>::fmt(p0, p1);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::Iterator>::next
'a
deps:{"<iter::Rows<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
+p0.next();
+<iter::Rows<'a, T> as std::iter::Iterator>::next(p0);
+crate::<iter::Rows<'a, T> as std::iter::Iterator>::next(p0);
+<iter::Rows<'a, T>>::next(p0);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<iter::Rows<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
+p0.size_hint();
+<iter::Rows<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<iter::Rows<'a, T> as std::iter::Iterator>::size_hint(p0);
+<iter::Rows<'a, T>>::size_hint(p0);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::Iterator>::count
'a
deps:{"<iter::Rows<'a, T> as std::iter::Iterator>::count":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::Iterator>::count":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
+p0.count();
+<iter::Rows<'a, T> as std::iter::Iterator>::count(p0);
+crate::<iter::Rows<'a, T> as std::iter::Iterator>::count(p0);
+<iter::Rows<'a, T>>::count(p0);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::Iterator>::nth
'a
deps:{"<iter::Rows<'a, T> as std::iter::Iterator>::nth":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::Iterator>::nth":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth(p1);
+<iter::Rows<'a, T> as std::iter::Iterator>::nth(p0, p1);
+crate::<iter::Rows<'a, T> as std::iter::Iterator>::nth(p0, p1);
+<iter::Rows<'a, T>>::nth(p0, p1);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::Iterator>::last
'a
deps:{"<iter::Rows<'a, T> as std::iter::Iterator>::last":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::Iterator>::last":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
+p0.last();
+<iter::Rows<'a, T> as std::iter::Iterator>::last(p0);
+crate::<iter::Rows<'a, T> as std::iter::Iterator>::last(p0);
+<iter::Rows<'a, T>>::last(p0);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
+p0.next_back();
+<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<iter::Rows<'a, T>>::next_back(p0);
-----------------
src/iter.rs <iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::nth_back
'a
deps:{"<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Rows<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth_back(p1);
+<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+crate::<iter::Rows<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+<iter::Rows<'a, T>>::nth_back(p0, p1);
-----------------
src/iter.rs <iter::Rows<'_, T> as iter::TooDeeIterator>::num_cols
deps:{"<iter::Rows<'_, T> as iter::TooDeeIterator>::num_cols":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Rows<'_, T> as iter::TooDeeIterator>::num_cols":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Rows<'_, T>
+p0.num_cols();
+<iter::Rows<'_, T> as iter::TooDeeIterator>::num_cols(p0);
+crate::<iter::Rows<'_, T> as iter::TooDeeIterator>::num_cols(p0);
+<iter::Rows<'_, T>>::num_cols(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<iter::RowsMut<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Send","std::fmt::Debug","std::marker::Sized"]},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::clone::Clone","std::fmt::Debug","std::marker::Copy","std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<iter::RowsMut<'a, T> as std::fmt::Debug>::fmt":{"T":["iter::Rows","<&T as std::fmt::Debug>","<*const T as std::fmt::Debug>","iter::Col","iter::RowsMut","view::TooDeeView","iter::ColMut","view::TooDeeViewMut","toodee::DrainCol","toodee::TooDee"]},"iter::Col":{"T":["toodee::DrainCol","iter::ColMut","view::TooDeeViewMut","iter::RowsMut","view::TooDeeView","<*mut T as std::fmt::Debug>","iter::Rows","toodee::TooDee","iter::Col"]},"iter::ColMut":{"T":["iter::Col","iter::ColMut","iter::Rows","toodee::DrainCol","toodee::TooDee","iter::RowsMut","view::TooDeeViewMut","<*const T as std::fmt::Debug>","view::TooDeeView"]},"iter::Rows":{"T":["<*const T as std::fmt::Debug>","iter::Rows","toodee::DrainCol","view::TooDeeViewMut","view::TooDeeView","iter::Col","iter::RowsMut","toodee::TooDee","iter::ColMut"]},"iter::RowsMut":{"T":["view::TooDeeViewMut","iter::ColMut","iter::Col","toodee::DrainCol","view::TooDeeView","iter::RowsMut","toodee::TooDee","iter::Rows","<&T as std::fmt::Debug>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::io::IoSlice<'a>","std::sync::RwLock<T>","std::sync::MutexGuard<'_, T>","std::collections::linked_list::IterMut<'_, T>","std::sync::atomic::AtomicPtr<T>","<*mut T as std::marker::Sync>","std::task::Waker","std::thread::JoinHandle<T>","std::sync::mpmc::Receiver<T>","std::env::Args","std::ptr::DynMetadata<Dyn>","std::future::ResumeTy","std::sync::mpsc::Sender<T>","std::sync::mpmc::Sender<T>","std::collections::vec_deque::Drain<'_, T, A>","std::rc::Weak<T>","std::ptr::NonNull<T>","std::sync::OnceLock<T>","std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>","std::vec::Drain<'_, T, A>","std::boxed::ThinBox<T>","std::cell::Cell<T>","std::collections::linked_list::Cursor<'_, T>","std::sys::unix::args::Args","std::slice::Iter<'_, T>","std::ptr::Unique<T>","std::rc::Rc<T>","std::collections::linked_list::Iter<'_, T>","std::collections::LinkedList<T>","std::sync::Mutex<T>","std::sync::Arc<T>","std::sync::mpsc::Receiver<T>","std::io::IoSliceMut<'a>","std::sync::RwLockReadGuard<'_, T>","std::env::ArgsOs","std::sync::RwLockWriteGuard<'_, T>","std::sync::Weak<T>","std::collections::linked_list::CursorMut<'_, T>","std::string::Drain<'_>","std::io::error::repr_bitpacked::Repr","std::cell::RefCell<T>"]},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["i32","bool","i8","i64","u32","u64","char","i16","u16","<*const T as std::fmt::Debug>","u8","usize"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<iter::RowsMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<iter::RowsMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<iter::RowsMut<'a, T>>::fmt(p0, p1);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::Iterator>::next
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
+p0.next();
+<iter::RowsMut<'a, T> as std::iter::Iterator>::next(p0);
+crate::<iter::RowsMut<'a, T> as std::iter::Iterator>::next(p0);
+<iter::RowsMut<'a, T>>::next(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
+p0.size_hint();
+<iter::RowsMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<iter::RowsMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+<iter::RowsMut<'a, T>>::size_hint(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::Iterator>::count
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::count":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::count":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
+p0.count();
+<iter::RowsMut<'a, T> as std::iter::Iterator>::count(p0);
+crate::<iter::RowsMut<'a, T> as std::iter::Iterator>::count(p0);
+<iter::RowsMut<'a, T>>::count(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::Iterator>::nth
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::nth":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::nth":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth(p1);
+<iter::RowsMut<'a, T> as std::iter::Iterator>::nth(p0, p1);
+crate::<iter::RowsMut<'a, T> as std::iter::Iterator>::nth(p0, p1);
+<iter::RowsMut<'a, T>>::nth(p0, p1);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::Iterator>::last
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::last":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::Iterator>::last":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
+p0.last();
+<iter::RowsMut<'a, T> as std::iter::Iterator>::last(p0);
+crate::<iter::RowsMut<'a, T> as std::iter::Iterator>::last(p0);
+<iter::RowsMut<'a, T>>::last(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
+p0.next_back();
+<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<iter::RowsMut<'a, T>>::next_back(p0);
-----------------
src/iter.rs <iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back
'a
deps:{"<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::RowsMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth_back(p1);
+<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+crate::<iter::RowsMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+<iter::RowsMut<'a, T>>::nth_back(p0, p1);
-----------------
src/iter.rs <iter::RowsMut<'_, T> as iter::TooDeeIterator>::num_cols
deps:{"<iter::RowsMut<'_, T> as iter::TooDeeIterator>::num_cols":{"T":["std::marker::Sized"]}}
candidates:{"<iter::RowsMut<'_, T> as iter::TooDeeIterator>::num_cols":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::RowsMut<'_, T>
+p0.num_cols();
+<iter::RowsMut<'_, T> as iter::TooDeeIterator>::num_cols(p0);
+crate::<iter::RowsMut<'_, T> as iter::TooDeeIterator>::num_cols(p0);
+<iter::RowsMut<'_, T>>::num_cols(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<iter::Col<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<iter::Col<'a, T> as std::fmt::Debug>::fmt":{"T":["iter::RowsMut","<*const T as std::fmt::Debug>","toodee::TooDee","view::TooDeeViewMut","toodee::DrainCol","view::TooDeeView","iter::ColMut","iter::Col","iter::Rows","<*mut T as std::fmt::Debug>"]},"iter::Col":{"T":["<*const T as std::fmt::Debug>","iter::ColMut","iter::RowsMut","iter::Rows","view::TooDeeView","iter::Col","toodee::TooDee","view::TooDeeViewMut","toodee::DrainCol"]},"iter::ColMut":{"T":["view::TooDeeViewMut","toodee::DrainCol","iter::Rows","<&mut T as std::fmt::Debug>","iter::ColMut","iter::Col","iter::RowsMut","view::TooDeeView","toodee::TooDee"]},"iter::Rows":{"T":["iter::Col","toodee::TooDee","<*mut T as std::fmt::Debug>","view::TooDeeView","view::TooDeeViewMut","iter::ColMut","iter::Rows","iter::RowsMut","toodee::DrainCol"]},"iter::RowsMut":{"T":["view::TooDeeView","<*mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeViewMut","iter::RowsMut","iter::ColMut","toodee::TooDee","iter::Col","iter::Rows"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::collections::LinkedList<T>","std::io::IoSlice<'a>","std::sync::OnceLock<T>","std::io::IoSliceMut<'a>","std::boxed::ThinBox<T>","std::cell::Cell<T>","std::cell::RefCell<T>","std::sync::MutexGuard<'_, T>","std::env::ArgsOs","std::sync::Arc<T>","std::string::Drain<'_>","std::collections::linked_list::Cursor<'_, T>","std::slice::IterMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::collections::linked_list::Iter<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::ptr::NonNull<T>","std::env::Args","std::io::error::repr_bitpacked::Repr","std::vec::Drain<'_, T, A>","std::thread::JoinHandle<T>","<*const T as std::marker::Send>","std::future::ResumeTy","std::ptr::DynMetadata<Dyn>","std::sync::mpmc::Receiver<T>","std::sync::mpsc::Receiver<T>","std::sys::unix::args::Args","std::sync::RwLock<T>","std::sync::atomic::AtomicPtr<T>","std::sync::Mutex<T>","std::rc::Weak<T>","std::vec::IntoIter<T, A>","std::sync::Weak<T>","std::ptr::Unique<T>","std::rc::Rc<T>","std::collections::linked_list::IterMut<'_, T>","std::sync::mpmc::Sender<T>","std::sync::mpsc::Sender<T>","std::slice::Iter<'_, T>","std::task::Waker","std::collections::vec_deque::Drain<'_, T, A>","std::sync::RwLockWriteGuard<'_, T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]},"view::TooDeeView":{"T":["i16","i64","u16","bool","<*const T as std::fmt::Debug>","u64","i8","usize","char","u32","i32","u8"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<iter::Col<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<iter::Col<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<iter::Col<'a, T>>::fmt(p0, p1);
-----------------
src/iter.rs <iter::Col<'a, T> as std::ops::Index<usize>>::index
'a
deps:{"<iter::Col<'a, T> as std::ops::Index<usize>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::ops::Index<usize>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<iter::Col<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+crate::<iter::Col<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+<iter::Col<'a, T>>::index(p0, p1);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::Iterator>::next
'a
deps:{"<iter::Col<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
+p0.next();
+<iter::Col<'a, T> as std::iter::Iterator>::next(p0);
+crate::<iter::Col<'a, T> as std::iter::Iterator>::next(p0);
+<iter::Col<'a, T>>::next(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<iter::Col<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
+p0.size_hint();
+<iter::Col<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<iter::Col<'a, T> as std::iter::Iterator>::size_hint(p0);
+<iter::Col<'a, T>>::size_hint(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::Iterator>::count
'a
deps:{"<iter::Col<'a, T> as std::iter::Iterator>::count":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::Iterator>::count":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
+p0.count();
+<iter::Col<'a, T> as std::iter::Iterator>::count(p0);
+crate::<iter::Col<'a, T> as std::iter::Iterator>::count(p0);
+<iter::Col<'a, T>>::count(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::Iterator>::nth
'a
deps:{"<iter::Col<'a, T> as std::iter::Iterator>::nth":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::Iterator>::nth":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth(p1);
+<iter::Col<'a, T> as std::iter::Iterator>::nth(p0, p1);
+crate::<iter::Col<'a, T> as std::iter::Iterator>::nth(p0, p1);
+<iter::Col<'a, T>>::nth(p0, p1);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::Iterator>::last
'a
deps:{"<iter::Col<'a, T> as std::iter::Iterator>::last":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::Iterator>::last":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
+p0.last();
+<iter::Col<'a, T> as std::iter::Iterator>::last(p0);
+crate::<iter::Col<'a, T> as std::iter::Iterator>::last(p0);
+<iter::Col<'a, T>>::last(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
+p0.next_back();
+<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<iter::Col<'a, T>>::next_back(p0);
-----------------
src/iter.rs <iter::Col<'a, T> as std::iter::DoubleEndedIterator>::nth_back
'a
deps:{"<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::Col<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth_back(p1);
+<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+crate::<iter::Col<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+<iter::Col<'a, T>>::nth_back(p0, p1);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<iter::ColMut<'a, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"toodee::TooDee":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::marker::Sized"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::hash::Hash","std::marker::Copy","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<iter::ColMut<'a, T> as std::fmt::Debug>::fmt":{"T":["iter::RowsMut","view::TooDeeViewMut","toodee::TooDee","<*mut T as std::fmt::Debug>","view::TooDeeView","iter::ColMut","toodee::DrainCol","<&T as std::fmt::Debug>","iter::Col","iter::Rows"]},"iter::Col":{"T":["<&mut T as std::fmt::Debug>","iter::RowsMut","toodee::DrainCol","iter::Rows","view::TooDeeViewMut","toodee::TooDee","iter::Col","iter::ColMut","view::TooDeeView"]},"iter::ColMut":{"T":["iter::ColMut","iter::Col","<*mut T as std::fmt::Debug>","view::TooDeeView","iter::RowsMut","toodee::DrainCol","view::TooDeeViewMut","toodee::TooDee","iter::Rows"]},"iter::Rows":{"T":["view::TooDeeViewMut","iter::RowsMut","iter::ColMut","iter::Col","iter::Rows","toodee::TooDee","<*mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeView"]},"iter::RowsMut":{"T":["toodee::TooDee","<&T as std::fmt::Debug>","iter::ColMut","iter::Rows","view::TooDeeViewMut","view::TooDeeView","iter::Col","iter::RowsMut","toodee::DrainCol"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::io::IoSliceMut<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::string::Drain<'_>","std::ptr::NonNull<T>","std::collections::linked_list::Iter<'_, T>","std::ptr::DynMetadata<Dyn>","std::collections::linked_list::IterMut<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::io::IoSlice<'a>","std::task::Waker","std::io::error::repr_bitpacked::Repr","std::sync::mpmc::Receiver<T>","std::rc::Weak<T>","std::cell::RefCell<T>","std::thread::JoinHandle<T>","std::sync::RwLockWriteGuard<'_, T>","<*const T as std::marker::Sync>","std::collections::LinkedList<T>","std::slice::Iter<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::env::ArgsOs","std::sync::atomic::AtomicPtr<T>","std::ptr::Unique<T>","std::sync::Mutex<T>","std::sync::MutexGuard<'_, T>","std::sync::OnceLock<T>","std::sync::RwLock<T>","std::sync::mpsc::Receiver<T>","std::sync::RwLockReadGuard<'_, T>","std::slice::IterMut<'_, T>","std::future::ResumeTy","std::sync::mpsc::Sender<T>","std::sync::mpmc::Sender<T>","std::boxed::ThinBox<T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::vec::Drain<'_, T, A>","std::sync::Weak<T>","std::sys::unix::args::Args","std::cell::Cell<T>","std::env::Args","std::rc::Rc<T>"]},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["i32","usize","i8","u16","u64","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","u8","i64","i16","char","bool","u32"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<iter::ColMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<iter::ColMut<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<iter::ColMut<'a, T>>::fmt(p0, p1);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::ops::Index<usize>>::index
'a
deps:{"<iter::ColMut<'a, T> as std::ops::Index<usize>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::ops::Index<usize>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<iter::ColMut<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+crate::<iter::ColMut<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+<iter::ColMut<'a, T>>::index(p0, p1);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::ops::IndexMut<usize>>::index_mut
'a
deps:{"<iter::ColMut<'a, T> as std::ops::IndexMut<usize>>::index_mut":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::ops::IndexMut<usize>>::index_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index_mut(p1);
+<iter::ColMut<'a, T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+crate::<iter::ColMut<'a, T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+<iter::ColMut<'a, T>>::index_mut(p0, p1);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::Iterator>::next
'a
deps:{"<iter::ColMut<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
+p0.next();
+<iter::ColMut<'a, T> as std::iter::Iterator>::next(p0);
+crate::<iter::ColMut<'a, T> as std::iter::Iterator>::next(p0);
+<iter::ColMut<'a, T>>::next(p0);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::Iterator>::size_hint
'a
deps:{"<iter::ColMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
+p0.size_hint();
+<iter::ColMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+crate::<iter::ColMut<'a, T> as std::iter::Iterator>::size_hint(p0);
+<iter::ColMut<'a, T>>::size_hint(p0);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::Iterator>::count
'a
deps:{"<iter::ColMut<'a, T> as std::iter::Iterator>::count":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::Iterator>::count":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
+p0.count();
+<iter::ColMut<'a, T> as std::iter::Iterator>::count(p0);
+crate::<iter::ColMut<'a, T> as std::iter::Iterator>::count(p0);
+<iter::ColMut<'a, T>>::count(p0);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::Iterator>::nth
'a
deps:{"<iter::ColMut<'a, T> as std::iter::Iterator>::nth":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::Iterator>::nth":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth(p1);
+<iter::ColMut<'a, T> as std::iter::Iterator>::nth(p0, p1);
+crate::<iter::ColMut<'a, T> as std::iter::Iterator>::nth(p0, p1);
+<iter::ColMut<'a, T>>::nth(p0, p1);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::Iterator>::last
'a
deps:{"<iter::ColMut<'a, T> as std::iter::Iterator>::last":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::Iterator>::last":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
+p0.last();
+<iter::ColMut<'a, T> as std::iter::Iterator>::last(p0);
+crate::<iter::ColMut<'a, T> as std::iter::Iterator>::last(p0);
+<iter::ColMut<'a, T>>::last(p0);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{"<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
+p0.next_back();
+<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<iter::ColMut<'a, T>>::next_back(p0);
-----------------
src/iter.rs <iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back
'a
deps:{"<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["std::marker::Sized"]}}
candidates:{"<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // iter::ColMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.nth_back(p1);
+<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+crate::<iter::ColMut<'a, T> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+<iter::ColMut<'a, T>>::nth_back(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::clone::Clone>::clone
'a
deps:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::marker::Copy","std::clone::Clone","std::marker::Sized","std::hash::Hash","std::fmt::Debug","std::cmp::Eq"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::clone::Clone>::clone":{"T":["toodee::TooDee","view::TooDeeView","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["char","i32","i8","u8","usize","bool","u32","i64","i16","u64","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","u16"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.clone();
+<view::TooDeeView<'a, T> as std::clone::Clone>::clone(p0);
+crate::<view::TooDeeView<'a, T> as std::clone::Clone>::clone(p0);
+<view::TooDeeView<'a, T>>::clone(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::hash::Hash>::hash
'a
deps:{"<&mut H as std::hash::Hasher>":{},"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::hash::Hash>::hash":{"T":["std::marker::Sized","std::hash::Hash"],"__H":["std::hash::Hasher","std::marker::Sized"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::hash::Hash"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::hash::Hash","std::marker::Sized","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::cmp::Eq","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::hash::Hash>::hash":{"T":["view::TooDeeViewMut","view::TooDeeView","toodee::TooDee","std::hash::impls::<impl std::hash::Hash for &T>"],"__H":["std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::hash::SipHasher","std::collections::hash_map::DefaultHasher","<&mut H as std::hash::Hasher>"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["char","u8","i64","u32","u16","i8","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","u64","i16","i32","bool","usize"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","<*mut T as std::fmt::Debug>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<view::TooDeeView<'a, T> as std::hash::Hash>::hash(p0, p1);
+crate::<view::TooDeeView<'a, T> as std::hash::Hash>::hash(p0, p1);
+<view::TooDeeView<'a, T>>::hash(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq
'a
deps:{"<view::TooDeeView<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::marker::Sized","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::clone::Clone","std::marker::Sized","std::hash::Hash","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized","std::marker::Copy","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug"]}}
candidates:{"<view::TooDeeView<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["toodee::TooDee","view::TooDeeView","std::cmp::impls::<impl std::cmp::Eq for &A>","view::TooDeeViewMut"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["u8","i32","char","u32","std::hash::impls::<impl std::hash::Hash for *const T>","i64","bool","u16","i8","i16","usize","u64"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.assert_receiver_is_total_eq();
+<view::TooDeeView<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<view::TooDeeView<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<view::TooDeeView<'a, T>>::assert_receiver_is_total_eq(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::cmp::PartialEq>::eq
'a
deps:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::cmp::PartialEq>::eq":{"T":["std::marker::Sized","std::cmp::PartialEq"]},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::marker::Sized","std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::marker::Sized","std::marker::Copy"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeView<'a, T> as std::cmp::PartialEq>::eq":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","view::TooDeeView","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","toodee::TooDee","view::TooDeeViewMut"]},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"view::TooDeeView":{"T":["i8","char","u64","std::marker::copy_impls::<impl std::marker::Copy for *const T>","usize","u32","i16","i32","i64","u16","u8","bool"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.eq(p1);
+<view::TooDeeView<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<view::TooDeeView<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+<view::TooDeeView<'a, T>>::eq(p0, p1);
-----------------
src/view.rs view::TooDeeView::<'a, T>::new
'a
deps:{"view::TooDeeView::<'a, T>::new":{"T":["std::marker::Sized"]}}
candidates:{"view::TooDeeView::<'a, T>::new":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = & MaybeUninit::uninit().assume_init(); // [T]
+view::TooDeeView::<'a, T>::new(p0, p1, p2);
+crate::view::TooDeeView::<'a, T>::new(p0, p1, p2);
+<view::TooDeeView<'a, T>>::new(p0, p1, p2);
-----------------
src/view.rs view::TooDeeView::<'a, T>::from_toodee
'a
deps:{"view::TooDeeView::<'a, T>::from_toodee":{"T":["std::marker::Sized"]}}
candidates:{"view::TooDeeView::<'a, T>::from_toodee":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+view::TooDeeView::<'a, T>::from_toodee(p0, p1, p2);
+crate::view::TooDeeView::<'a, T>::from_toodee(p0, p1, p2);
+<view::TooDeeView<'a, T>>::from_toodee(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_cols
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_cols":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_cols":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.num_cols();
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_cols(p0);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_cols(p0);
+<view::TooDeeView<'a, T>>::num_cols(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_rows
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_rows":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.num_rows();
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_rows(p0);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::num_rows(p0);
+<view::TooDeeView<'a, T>>::num_rows(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::bounds
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::bounds":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::bounds":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.bounds();
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::bounds(p0);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::bounds(p0);
+<view::TooDeeView<'a, T>>::bounds(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::view
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::view":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::view":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view(p1, p2);
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+<view::TooDeeView<'a, T>>::view(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::rows
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::rows":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.rows();
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::rows(p0);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::rows(p0);
+<view::TooDeeView<'a, T>>::rows(p0);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::col
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::col":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::col":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = 0usize; // None+usize
+p0.col(p1);
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::col(p0, p1);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::col(p0, p1);
+<view::TooDeeView<'a, T>>::col(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row(p1);
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+<view::TooDeeView<'a, T>>::get_unchecked_row(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked
'a
deps:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked(p1);
+<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+crate::<view::TooDeeView<'a, T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+<view::TooDeeView<'a, T>>::get_unchecked(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::ops::Index<usize>>::index
'a
deps:{"<view::TooDeeView<'a, T> as std::ops::Index<usize>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as std::ops::Index<usize>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<view::TooDeeView<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+crate::<view::TooDeeView<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+<view::TooDeeView<'a, T>>::index(p0, p1);
-----------------
src/view.rs <view::TooDeeView<'a, T> as std::ops::Index<(usize, usize)>>::index
'a
deps:{"<view::TooDeeView<'a, T> as std::ops::Index<(usize, usize)>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeView<'a, T> as std::ops::Index<(usize, usize)>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.index(p1);
+<view::TooDeeView<'a, T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+crate::<view::TooDeeView<'a, T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+<view::TooDeeView<'a, T>>::index(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::hash::Hash>::hash
'a
deps:{"<&mut H as std::hash::Hasher>":{},"<*mut T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::hash::Hash>::hash":{"T":["std::hash::Hash","std::marker::Sized"],"__H":["std::marker::Sized","std::hash::Hasher"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::cmp::Eq","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"view::TooDeeView":{"T":["std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::marker::Copy"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<*mut T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::hash::Hash>::hash":{"T":["view::TooDeeView","view::TooDeeViewMut","std::hash::impls::<impl std::hash::Hash for &mut T>","toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *const T>"],"__H":["std::hash::sip::Hasher<S>","std::hash::SipHasher13","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher"]},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["i8","u32","bool","usize","u64","u8","i64","i16","char","u16","std::hash::impls::<impl std::hash::Hash for *const T>","i32"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<view::TooDeeViewMut<'a, T> as std::hash::Hash>::hash(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::hash::Hash>::hash(p0, p1);
+<view::TooDeeViewMut<'a, T>>::hash(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq
'a
deps:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::marker::Sized","std::cmp::Eq"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::clone::Clone"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::cmp::impls::<impl std::cmp::Eq for &A>","view::TooDeeView","view::TooDeeViewMut","toodee::TooDee","std::cmp::impls::<impl std::cmp::Eq for &mut A>"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["bool","i32","u8","u64","char","u32","i8","u16","i64","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","usize","i16"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.assert_receiver_is_total_eq();
+<view::TooDeeViewMut<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<view::TooDeeViewMut<'a, T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<view::TooDeeViewMut<'a, T>>::assert_receiver_is_total_eq(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::cmp::PartialEq>::eq
'a
deps:{"<*const T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::cmp::PartialEq>::eq":{"T":["std::cmp::PartialEq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::Hash","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Copy","std::clone::Clone","std::marker::Sized","std::hash::Hash","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::hash::Hash","std::cmp::Eq"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<view::TooDeeViewMut<'a, T> as std::cmp::PartialEq>::eq":{"T":["toodee::TooDee","view::TooDeeView","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","view::TooDeeViewMut"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["u32","bool","u64","char","i64","u8","i32","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","usize","i8","i16","u16"]},"view::TooDeeViewMut":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.eq(p1);
+<view::TooDeeViewMut<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::cmp::PartialEq>::eq(p0, p1);
+<view::TooDeeViewMut<'a, T>>::eq(p0, p1);
-----------------
src/view.rs view::TooDeeViewMut::<'a, T>::new
'a
deps:{"view::TooDeeViewMut::<'a, T>::new":{"T":["std::marker::Sized"]}}
candidates:{"view::TooDeeViewMut::<'a, T>::new":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // [T]
+view::TooDeeViewMut::<'a, T>::new(p0, p1, p2);
+crate::view::TooDeeViewMut::<'a, T>::new(p0, p1, p2);
+<view::TooDeeViewMut<'a, T>>::new(p0, p1, p2);
-----------------
src/view.rs view::TooDeeViewMut::<'a, T>::from_toodee
'a
deps:{"view::TooDeeViewMut::<'a, T>::from_toodee":{"T":["std::marker::Sized"]}}
candidates:{"view::TooDeeViewMut::<'a, T>::from_toodee":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+view::TooDeeViewMut::<'a, T>::from_toodee(p0, p1, p2);
+crate::view::TooDeeViewMut::<'a, T>::from_toodee(p0, p1, p2);
+<view::TooDeeViewMut<'a, T>>::from_toodee(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_rows
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_rows":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.num_rows();
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_rows(p0);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_rows(p0);
+<view::TooDeeViewMut<'a, T>>::num_rows(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_cols
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_cols":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_cols":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.num_cols();
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_cols(p0);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::num_cols(p0);
+<view::TooDeeViewMut<'a, T>>::num_cols(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::bounds
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::bounds":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::bounds":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.bounds();
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::bounds(p0);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::bounds(p0);
+<view::TooDeeViewMut<'a, T>>::bounds(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::view
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::view":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::view":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view(p1, p2);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+<view::TooDeeViewMut<'a, T>>::view(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::rows
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::rows":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.rows();
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::rows(p0);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::rows(p0);
+<view::TooDeeViewMut<'a, T>>::rows(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::col
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::col":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::col":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.col(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::col(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::col(p0, p1);
+<view::TooDeeViewMut<'a, T>>::col(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+<view::TooDeeViewMut<'a, T>>::get_unchecked_row(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+<view::TooDeeViewMut<'a, T>>::get_unchecked(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::view_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::view_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::view_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view_mut(p1, p2);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::view_mut(p0, p1, p2);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::view_mut(p0, p1, p2);
+<view::TooDeeViewMut<'a, T>>::view_mut(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::rows_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::rows_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::rows_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.rows_mut();
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::rows_mut(p0);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::rows_mut(p0);
+<view::TooDeeViewMut<'a, T>>::rows_mut(p0);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::col_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::col_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::col_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.col_mut(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::col_mut(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::col_mut(p0, p1);
+<view::TooDeeViewMut<'a, T>>::col_mut(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::swap_rows
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::swap_rows":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::swap_rows":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.swap_rows(p1, p2);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::swap_rows(p0, p1, p2);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::swap_rows(p0, p1, p2);
+<view::TooDeeViewMut<'a, T>>::swap_rows(p0, p1, p2);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row_mut(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut(p0, p1);
+<view::TooDeeViewMut<'a, T>>::get_unchecked_row_mut(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked_mut(p1);
+<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut(p0, p1);
+<view::TooDeeViewMut<'a, T>>::get_unchecked_mut(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::ops::Index<usize>>::index
'a
deps:{"<view::TooDeeViewMut<'a, T> as std::ops::Index<usize>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as std::ops::Index<usize>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<view::TooDeeViewMut<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::ops::Index<usize>>::index(p0, p1);
+<view::TooDeeViewMut<'a, T>>::index(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::ops::Index<(usize, usize)>>::index
'a
deps:{"<view::TooDeeViewMut<'a, T> as std::ops::Index<(usize, usize)>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as std::ops::Index<(usize, usize)>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.index(p1);
+<view::TooDeeViewMut<'a, T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+<view::TooDeeViewMut<'a, T>>::index(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::ops::IndexMut<usize>>::index_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<usize>>::index_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<usize>>::index_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = 0usize; // None+usize
+p0.index_mut(p1);
+<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+<view::TooDeeViewMut<'a, T>>::index_mut(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::ops::IndexMut<(usize, usize)>>::index_mut
'a
deps:{"<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<(usize, usize)>>::index_mut":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<(usize, usize)>>::index_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.index_mut(p1);
+<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<(usize, usize)>>::index_mut(p0, p1);
+crate::<view::TooDeeViewMut<'a, T> as std::ops::IndexMut<(usize, usize)>>::index_mut(p0, p1);
+<view::TooDeeViewMut<'a, T>>::index_mut(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'a, T> as std::convert::Into<view::TooDeeView<'a, T>>>::into
'a
deps:{"<view::TooDeeViewMut<'a, T> as std::convert::Into<view::TooDeeView<'a, T>>>::into":{"T":["std::marker::Sized"]}}
candidates:{"<view::TooDeeViewMut<'a, T> as std::convert::Into<view::TooDeeView<'a, T>>>::into":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.into();
+<view::TooDeeViewMut<'a, T> as std::convert::Into<view::TooDeeView<'a, T>>>::into(p0);
+crate::<view::TooDeeViewMut<'a, T> as std::convert::Into<view::TooDeeView<'a, T>>>::into(p0);
+<view::TooDeeViewMut<'a, T>>::into(p0);
-----------------
src/view.rs <&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'a, T>
+p0.into_iter();
+<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a view::TooDeeView<'a, T>>::into_iter(p0);
-----------------
src/view.rs <&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.into_iter();
+<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a view::TooDeeViewMut<'a, T>>::into_iter(p0);
-----------------
src/view.rs <&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'a, T>
+p0.into_iter();
+<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a mut view::TooDeeViewMut<'a, T>>::into_iter(p0);
-----------------
src/view.rs <view::TooDeeView<'_, T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<view::TooDeeView<'_, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::hash::Hash","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::marker::Copy","std::hash::Hash","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<view::TooDeeView<'_, T> as std::fmt::Debug>::fmt":{"T":["iter::RowsMut","iter::Rows","<*const T as std::fmt::Debug>","view::TooDeeView","<&mut T as std::fmt::Debug>","iter::ColMut","view::TooDeeViewMut","toodee::TooDee","iter::Col","toodee::DrainCol"]},"iter::Col":{"T":["toodee::DrainCol","toodee::TooDee","iter::Rows","iter::Col","iter::ColMut","iter::RowsMut","view::TooDeeView","view::TooDeeViewMut","<*mut T as std::fmt::Debug>"]},"iter::ColMut":{"T":["iter::Col","<*mut T as std::fmt::Debug>","view::TooDeeView","iter::RowsMut","toodee::TooDee","iter::Rows","toodee::DrainCol","iter::ColMut","view::TooDeeViewMut"]},"iter::Rows":{"T":["view::TooDeeView","<&T as std::fmt::Debug>","view::TooDeeViewMut","toodee::DrainCol","iter::Rows","iter::RowsMut","toodee::TooDee","iter::Col","iter::ColMut"]},"iter::RowsMut":{"T":["iter::ColMut","view::TooDeeViewMut","toodee::DrainCol","toodee::TooDee","iter::RowsMut","<*mut T as std::fmt::Debug>","view::TooDeeView","iter::Rows","iter::Col"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::OnceLock<T>","std::io::IoSliceMut<'a>","std::vec::IntoIter<T, A>","std::sync::mpmc::Receiver<T>","std::slice::IterMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::env::Args","std::sync::Weak<T>","std::ptr::Unique<T>","std::string::Drain<'_>","std::task::Waker","std::sync::mpmc::Sender<T>","std::cell::RefCell<T>","std::collections::linked_list::Iter<'_, T>","std::ptr::DynMetadata<Dyn>","std::thread::JoinHandle<T>","std::sync::atomic::AtomicPtr<T>","std::future::ResumeTy","std::io::error::repr_bitpacked::Repr","std::sys::unix::args::Args","<*mut T as std::marker::Sync>","std::vec::Drain<'_, T, A>","std::boxed::ThinBox<T>","std::slice::Iter<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::sync::mpsc::Sender<T>","std::collections::LinkedList<T>","std::collections::linked_list::CursorMut<'_, T>","std::sync::mpsc::Receiver<T>","std::sync::RwLockWriteGuard<'_, T>","std::sync::RwLock<T>","std::sync::Arc<T>","std::sync::MutexGuard<'_, T>","std::ptr::NonNull<T>","std::collections::vec_deque::Drain<'_, T, A>","std::io::IoSlice<'a>","std::env::ArgsOs","std::rc::Rc<T>","std::rc::Weak<T>","std::sync::Mutex<T>","std::cell::Cell<T>","std::collections::linked_list::IterMut<'_, T>"]},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["usize","u8","i32","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","char","u16","bool","i64","u32","i16","i8","u64"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeView<'_, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<view::TooDeeView<'_, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<view::TooDeeView<'_, T> as std::fmt::Debug>::fmt(p0, p1);
+<view::TooDeeView<'_, T>>::fmt(p0, p1);
-----------------
src/view.rs <view::TooDeeViewMut<'_, T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<view::TooDeeViewMut<'_, T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::fmt::Debug","std::marker::Send","std::marker::Sized"]},"toodee::TooDee":{"T":["std::clone::Clone","std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Copy","std::clone::Clone","std::marker::Sized","std::hash::Hash","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::hash::Hash"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<view::TooDeeViewMut<'_, T> as std::fmt::Debug>::fmt":{"T":["view::TooDeeView","iter::Col","toodee::TooDee","view::TooDeeViewMut","<&mut T as std::fmt::Debug>","toodee::DrainCol","<*mut T as std::fmt::Debug>","iter::RowsMut","iter::ColMut","iter::Rows"]},"iter::Col":{"T":["view::TooDeeView","toodee::TooDee","<*mut T as std::fmt::Debug>","iter::RowsMut","iter::Rows","iter::Col","toodee::DrainCol","iter::ColMut","view::TooDeeViewMut"]},"iter::ColMut":{"T":["iter::Col","view::TooDeeViewMut","iter::ColMut","iter::Rows","toodee::DrainCol","toodee::TooDee","iter::RowsMut","view::TooDeeView","<&mut T as std::fmt::Debug>"]},"iter::Rows":{"T":["view::TooDeeView","view::TooDeeViewMut","iter::Rows","iter::RowsMut","iter::ColMut","<&mut T as std::fmt::Debug>","iter::Col","toodee::DrainCol","toodee::TooDee"]},"iter::RowsMut":{"T":["<*const T as std::fmt::Debug>","toodee::TooDee","iter::ColMut","toodee::DrainCol","iter::Rows","view::TooDeeView","iter::Col","view::TooDeeViewMut","iter::RowsMut"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::mpsc::Sender<T>","std::task::Waker","<*const T as std::marker::Send>","std::vec::IntoIter<T, A>","std::sync::RwLock<T>","std::collections::linked_list::Iter<'_, T>","std::sync::MutexGuard<'_, T>","std::ptr::DynMetadata<Dyn>","std::sync::mpsc::Receiver<T>","std::sync::Arc<T>","std::cell::Cell<T>","std::collections::linked_list::Cursor<'_, T>","std::string::Drain<'_>","std::ptr::Unique<T>","std::sync::mpmc::Sender<T>","std::boxed::ThinBox<T>","std::collections::linked_list::IterMut<'_, T>","std::io::IoSliceMut<'a>","std::env::Args","std::slice::Iter<'_, T>","std::sync::mpmc::Receiver<T>","std::sys::unix::args::Args","std::sync::RwLockWriteGuard<'_, T>","std::sync::Mutex<T>","std::io::error::repr_bitpacked::Repr","std::sync::atomic::AtomicPtr<T>","std::sync::RwLockReadGuard<'_, T>","std::cell::RefCell<T>","std::collections::linked_list::CursorMut<'_, T>","std::slice::IterMut<'_, T>","std::io::IoSlice<'a>","std::collections::LinkedList<T>","std::env::ArgsOs","std::thread::JoinHandle<T>","std::rc::Rc<T>","std::vec::Drain<'_, T, A>","std::rc::Weak<T>","std::collections::vec_deque::Drain<'_, T, A>","std::future::ResumeTy","std::sync::Weak<T>","std::sync::OnceLock<T>","std::ptr::NonNull<T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *mut T>"]},"view::TooDeeView":{"T":["u16","bool","i32","i8","char","u64","u8","u32","i16","i64","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","usize"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'_, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<view::TooDeeViewMut<'_, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<view::TooDeeViewMut<'_, T> as std::fmt::Debug>::fmt(p0, p1);
+<view::TooDeeViewMut<'_, T>>::fmt(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::clone::Clone>::clone
deps:{"<toodee::TooDee<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::marker::Copy","std::hash::Hash"]}}
candidates:{"<toodee::TooDee<T> as std::clone::Clone>::clone":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","view::TooDeeView","toodee::TooDee"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["usize","u8","u32","u64","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","i16","i64","u16","bool","char","i32","i8"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.clone();
+<toodee::TooDee<T> as std::clone::Clone>::clone(p0);
+crate::<toodee::TooDee<T> as std::clone::Clone>::clone(p0);
+<toodee::TooDee<T>>::clone(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<toodee::TooDee<T> as std::hash::Hash>::hash":{"T":["std::marker::Sized","std::hash::Hash"],"__H":["std::marker::Sized","std::hash::Hasher"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::marker::Sized","std::hash::Hash","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<toodee::TooDee<T> as std::hash::Hash>::hash":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee","std::hash::impls::<impl std::hash::Hash for &mut T>","view::TooDeeView","view::TooDeeViewMut"],"__H":["std::hash::SipHasher","std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>","std::boxed::Box<T, A>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","u64","i16","i8","u8","char","u16","i64","u32","bool","usize","i32"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<toodee::TooDee<T> as std::hash::Hash>::hash(p0, p1);
+crate::<toodee::TooDee<T> as std::hash::Hash>::hash(p0, p1);
+<toodee::TooDee<T>>::hash(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::cmp::Eq","std::marker::Sized"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"view::TooDeeView":{"T":["std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Copy"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::cmp::Eq>::assert_receiver_is_total_eq":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","view::TooDeeView","view::TooDeeViewMut","toodee::TooDee","std::cmp::impls::<impl std::cmp::Eq for &A>"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["u64","bool","usize","u32","u8","i32","std::hash::impls::<impl std::hash::Hash for *mut T>","i16","char","i64","i8","u16"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.assert_receiver_is_total_eq();
+<toodee::TooDee<T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<toodee::TooDee<T> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<toodee::TooDee<T>>::assert_receiver_is_total_eq(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::cmp::PartialEq>::eq
deps:{"<toodee::TooDee<T> as std::cmp::PartialEq>::eq":{"T":["std::cmp::PartialEq","std::marker::Sized"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::hash::Hash"]},"view::TooDeeView":{"T":["std::marker::Copy","std::clone::Clone","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]}}
candidates:{"<toodee::TooDee<T> as std::cmp::PartialEq>::eq":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","view::TooDeeView","view::TooDeeViewMut","toodee::TooDee"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"view::TooDeeView":{"T":["i16","char","u64","i8","u16","u32","u8","i32","bool","usize","i64","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>"]},"view::TooDeeViewMut":{"T":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.eq(p1);
+<toodee::TooDee<T> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<toodee::TooDee<T> as std::cmp::PartialEq>::eq(p0, p1);
+<toodee::TooDee<T>>::eq(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::default::Default>::default
deps:{"<toodee::TooDee<T> as std::default::Default>::default":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::default::Default>::default":{"T":["RUG_ANY"]}}
+<toodee::TooDee<T> as std::default::Default>::default();
+crate::<toodee::TooDee<T> as std::default::Default>::default();
+<toodee::TooDee<T>>::default();
-----------------
src/toodee.rs <toodee::TooDee<T> as std::ops::Index<usize>>::index
deps:{"<toodee::TooDee<T> as std::ops::Index<usize>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::ops::Index<usize>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<toodee::TooDee<T> as std::ops::Index<usize>>::index(p0, p1);
+crate::<toodee::TooDee<T> as std::ops::Index<usize>>::index(p0, p1);
+<toodee::TooDee<T>>::index(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::ops::Index<(usize, usize)>>::index
deps:{"<toodee::TooDee<T> as std::ops::Index<(usize, usize)>>::index":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::ops::Index<(usize, usize)>>::index":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.index(p1);
+<toodee::TooDee<T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+crate::<toodee::TooDee<T> as std::ops::Index<(usize, usize)>>::index(p0, p1);
+<toodee::TooDee<T>>::index(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::ops::IndexMut<usize>>::index_mut
deps:{"<toodee::TooDee<T> as std::ops::IndexMut<usize>>::index_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::ops::IndexMut<usize>>::index_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.index_mut(p1);
+<toodee::TooDee<T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+crate::<toodee::TooDee<T> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+<toodee::TooDee<T>>::index_mut(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::ops::IndexMut<(usize, usize)>>::index_mut
deps:{"<toodee::TooDee<T> as std::ops::IndexMut<(usize, usize)>>::index_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::ops::IndexMut<(usize, usize)>>::index_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.index_mut(p1);
+<toodee::TooDee<T> as std::ops::IndexMut<(usize, usize)>>::index_mut(p0, p1);
+crate::<toodee::TooDee<T> as std::ops::IndexMut<(usize, usize)>>::index_mut(p0, p1);
+<toodee::TooDee<T>>::index_mut(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::num_cols
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_cols":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_cols":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.num_cols();
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_cols(p0);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_cols(p0);
+<toodee::TooDee<T>>::num_cols(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::num_rows
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_rows":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.num_rows();
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_rows(p0);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::num_rows(p0);
+<toodee::TooDee<T>>::num_rows(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::bounds
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::bounds":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::bounds":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.bounds();
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::bounds(p0);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::bounds(p0);
+<toodee::TooDee<T>>::bounds(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::view
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::view":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::view":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view(p1, p2);
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::view(p0, p1, p2);
+<toodee::TooDee<T>>::view(p0, p1, p2);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::rows
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::rows":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::rows":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.rows();
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::rows(p0);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::rows(p0);
+<toodee::TooDee<T>>::rows(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::col
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::col":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::col":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.col(p1);
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::col(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::col(p0, p1);
+<toodee::TooDee<T>>::col(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked_row
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked_row":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row(p1);
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked_row(p0, p1);
+<toodee::TooDee<T>>::get_unchecked_row(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked
deps:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked(p1);
+<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOps<T>>::get_unchecked(p0, p1);
+<toodee::TooDee<T>>::get_unchecked(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::view_mut
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::view_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::view_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
let mut p2 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.view_mut(p1, p2);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::view_mut(p0, p1, p2);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::view_mut(p0, p1, p2);
+<toodee::TooDee<T>>::view_mut(p0, p1, p2);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::rows_mut
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::rows_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::rows_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.rows_mut();
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::rows_mut(p0);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::rows_mut(p0);
+<toodee::TooDee<T>>::rows_mut(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::col_mut
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::col_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::col_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.col_mut(p1);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::col_mut(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::col_mut(p0, p1);
+<toodee::TooDee<T>>::col_mut(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::fill
deps:{"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<T as std::borrow::Borrow<T>>":{},"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::fill":{"T":["std::clone::Clone","std::marker::Sized"],"V":["std::borrow::Borrow","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::Hash","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Copy","std::marker::Sized","std::hash::Hash","std::clone::Clone"]}}
candidates:{"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<T as std::borrow::Borrow<T>>":{},"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::fill":{"T":["view::TooDeeView","std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for &T>","toodee::TooDee"],"V":["std::path::PathBuf","std::vec::Vec<T, A>","std::sync::Arc<T>","std::rc::Rc<T>","<T as std::borrow::Borrow<T>>","std::boxed::Box<T, A>","std::borrow::Cow<'a, B>","std::ffi::OsString","std::string::String","std::ffi::CString","<&T as std::borrow::Borrow<T>>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>"]},"view::TooDeeView":{"T":["bool","usize","i64","i16","i32","u64","u16","i8","char","u32","u8","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // V
+p0.fill(p1);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::fill(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::fill(p0, p1);
+<toodee::TooDee<T>>::fill(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::swap_rows
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::swap_rows":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::swap_rows":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.swap_rows(p1, p2);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::swap_rows(p0, p1, p2);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::swap_rows(p0, p1, p2);
+<toodee::TooDee<T>>::swap_rows(p0, p1, p2);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.get_unchecked_row_mut(p1);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_row_mut(p0, p1);
+<toodee::TooDee<T>>::get_unchecked_row_mut(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut
deps:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // (usize, usize)
+p0.get_unchecked_mut(p1);
+<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut(p0, p1);
+crate::<toodee::TooDee<T> as ops::TooDeeOpsMut<T>>::get_unchecked_mut(p0, p1);
+<toodee::TooDee<T>>::get_unchecked_mut(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::new
deps:{"<*mut T as std::fmt::Debug>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::hash::Hash","std::cmp::Eq"]},"toodee::TooDee::<T>::new":{"T":["std::default::Default","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee"]},"toodee::TooDee::<T>::new":{"T":["toodee::TooDee"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+toodee::TooDee::<T>::new(p0, p1);
+crate::toodee::TooDee::<T>::new(p0, p1);
+<toodee::TooDee<T>>::new(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::init
deps:{"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::TooDee":{"T":["std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"toodee::TooDee::<T>::init":{"T":["std::clone::Clone","std::marker::Sized"]},"view::TooDeeView":{"T":["std::fmt::Debug","std::marker::Copy","std::marker::Sized","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]}}
candidates:{"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]},"toodee::TooDee::<T>::init":{"T":["toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *mut T>","view::TooDeeView","std::clone::impls::<impl std::clone::Clone for *const T>"]},"view::TooDeeView":{"T":["char","i32","i16","usize","u32","u16","bool","i8","u64","u8","std::hash::impls::<impl std::hash::Hash for *mut T>","i64"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+toodee::TooDee::<T>::init(p0, p1, p2);
+crate::toodee::TooDee::<T>::init(p0, p1, p2);
+<toodee::TooDee<T>>::init(p0, p1, p2);
-----------------
src/toodee.rs toodee::TooDee::<T>::capacity
deps:{"toodee::TooDee::<T>::capacity":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::capacity":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.capacity();
+toodee::TooDee::<T>::capacity(p0);
+crate::toodee::TooDee::<T>::capacity(p0);
+<toodee::TooDee<T>>::capacity(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::with_capacity
deps:{"toodee::TooDee::<T>::with_capacity":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::with_capacity":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
+toodee::TooDee::<T>::with_capacity(p0);
+crate::toodee::TooDee::<T>::with_capacity(p0);
+<toodee::TooDee<T>>::with_capacity(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::reserve_exact
deps:{"toodee::TooDee::<T>::reserve_exact":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::reserve_exact":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.reserve_exact(p1);
+toodee::TooDee::<T>::reserve_exact(p0, p1);
+crate::toodee::TooDee::<T>::reserve_exact(p0, p1);
+<toodee::TooDee<T>>::reserve_exact(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::reserve
deps:{"toodee::TooDee::<T>::reserve":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::reserve":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.reserve(p1);
+toodee::TooDee::<T>::reserve(p0, p1);
+crate::toodee::TooDee::<T>::reserve(p0, p1);
+<toodee::TooDee<T>>::reserve(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::shrink_to_fit
deps:{"toodee::TooDee::<T>::shrink_to_fit":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::shrink_to_fit":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.shrink_to_fit();
+toodee::TooDee::<T>::shrink_to_fit(p0);
+crate::toodee::TooDee::<T>::shrink_to_fit(p0);
+<toodee::TooDee<T>>::shrink_to_fit(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::from_vec
deps:{"toodee::TooDee::<T>::from_vec":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::from_vec":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<T>
+toodee::TooDee::<T>::from_vec(p0, p1, p2);
+crate::toodee::TooDee::<T>::from_vec(p0, p1, p2);
+<toodee::TooDee<T>>::from_vec(p0, p1, p2);
-----------------
src/toodee.rs toodee::TooDee::<T>::from_box
deps:{"toodee::TooDee::<T>::from_box":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::from_box":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // std::boxed::Box<[T]>
+toodee::TooDee::<T>::from_box(p0, p1, p2);
+crate::toodee::TooDee::<T>::from_box(p0, p1, p2);
+<toodee::TooDee<T>>::from_box(p0, p1, p2);
-----------------
src/toodee.rs toodee::TooDee::<T>::data
deps:{"toodee::TooDee::<T>::data":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::data":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.data();
+toodee::TooDee::<T>::data(p0);
+crate::toodee::TooDee::<T>::data(p0);
+<toodee::TooDee<T>>::data(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::data_mut
deps:{"toodee::TooDee::<T>::data_mut":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::data_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.data_mut();
+toodee::TooDee::<T>::data_mut(p0);
+crate::toodee::TooDee::<T>::data_mut(p0);
+<toodee::TooDee<T>>::data_mut(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::clear
deps:{"toodee::TooDee::<T>::clear":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::clear":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.clear();
+toodee::TooDee::<T>::clear(p0);
+crate::toodee::TooDee::<T>::clear(p0);
+<toodee::TooDee<T>>::clear(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::pop_row
deps:{"toodee::TooDee::<T>::pop_row":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::pop_row":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.pop_row();
+toodee::TooDee::<T>::pop_row(p0);
+crate::toodee::TooDee::<T>::pop_row(p0);
+<toodee::TooDee<T>>::pop_row(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::push_row
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::ExactSizeIterator>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator","iter::TooDeeIterator","std::marker::Sized"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sync","std::marker::Sized","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::marker::Sized","std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"toodee::TooDee::<T>::push_row":{"I":["std::marker::Sized","std::iter::ExactSizeIterator","std::iter::Iterator"],"T":["std::marker::Sized"],"impl IntoIterator<Item = T, IntoIter = I>":["std::marker::Sized","std::iter::IntoIterator"]},"view::TooDeeView":{"T":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::cmp::Eq","std::marker::Copy"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::ExactSizeIterator>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","iter::Col","toodee::DrainCol","iter::Rows","iter::ColMut","iter::RowsMut"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["<I as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Col","view::TooDeeViewMut","iter::ColMut","iter::Rows","iter::RowsMut","toodee::TooDee","view::TooDeeView","<*mut T as std::fmt::Debug>","toodee::DrainCol"]},"iter::ColMut":{"T":["toodee::DrainCol","view::TooDeeView","iter::Rows","toodee::TooDee","<&T as std::fmt::Debug>","iter::Col","view::TooDeeViewMut","iter::ColMut","iter::RowsMut"]},"iter::Rows":{"T":["toodee::DrainCol","<&mut T as std::fmt::Debug>","iter::RowsMut","view::TooDeeView","iter::Col","toodee::TooDee","iter::ColMut","view::TooDeeViewMut","iter::Rows"]},"iter::RowsMut":{"T":["toodee::TooDee","iter::Rows","view::TooDeeView","<*const T as std::fmt::Debug>","iter::ColMut","view::TooDeeViewMut","iter::Col","iter::RowsMut","toodee::DrainCol"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::cell::RefCell<T>","std::task::Waker","std::io::error::repr_bitpacked::Repr","std::sync::mpsc::Sender<T>","std::vec::Drain<'_, T, A>","std::sync::mpmc::Receiver<T>","std::env::Args","std::slice::IterMut<'_, T>","std::collections::LinkedList<T>","std::boxed::ThinBox<T>","std::vec::IntoIter<T, A>","std::sys::unix::args::Args","std::collections::linked_list::Cursor<'_, T>","std::sync::MutexGuard<'_, T>","std::sync::Mutex<T>","std::sync::OnceLock<T>","std::sync::Arc<T>","std::ptr::Unique<T>","std::sync::atomic::AtomicPtr<T>","std::sync::RwLock<T>","std::sync::RwLockReadGuard<'_, T>","std::io::IoSlice<'a>","std::future::ResumeTy","std::collections::linked_list::IterMut<'_, T>","std::thread::JoinHandle<T>","std::ptr::DynMetadata<Dyn>","std::rc::Rc<T>","std::string::Drain<'_>","std::slice::Iter<'_, T>","std::sync::Weak<T>","std::io::IoSliceMut<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::mpsc::Receiver<T>","std::sync::mpmc::Sender<T>","std::rc::Weak<T>","std::sync::RwLockWriteGuard<'_, T>","std::ptr::NonNull<T>","std::env::ArgsOs","std::collections::linked_list::Iter<'_, T>","std::cell::Cell<T>","<*const T as std::marker::Sync>","std::collections::linked_list::CursorMut<'_, T>"]},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"toodee::TooDee::<T>::push_row":{"I":["<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","toodee::DrainCol","<&mut I as std::iter::ExactSizeIterator>"],"T":["RUG_ANY"],"impl IntoIterator<Item = T, IntoIter = I>":["toodee::TooDee","<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>","<&'a std::result::Result<T, E> as std::iter::IntoIterator>"]},"view::TooDeeView":{"T":["i64","u8","i16","bool","i32","usize","char","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","u16","u64","u32","i8"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = T, IntoIter = I>
+p0.push_row(p1);
+toodee::TooDee::<T>::push_row(p0, p1);
+crate::toodee::TooDee::<T>::push_row(p0, p1);
+<toodee::TooDee<T>>::push_row(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::insert_row
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::ExactSizeIterator>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::marker::Sized","iter::TooDeeIterator","std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::DrainCol":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Sized","std::marker::Send"]},"toodee::TooDee":{"T":["std::cmp::Eq","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"toodee::TooDee::<T>::insert_row":{"I":["std::iter::Iterator","std::iter::ExactSizeIterator","std::marker::Sized"],"T":["std::marker::Sized"],"impl IntoIterator<Item = T, IntoIter = I>":["std::marker::Sized","std::iter::IntoIterator"]},"view::TooDeeView":{"T":["std::marker::Copy","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::hash::Hash","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::hash::Hash","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::ExactSizeIterator>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","iter::Rows","toodee::DrainCol","flattenexact::FlattenExact","iter::RowsMut","iter::Col","iter::ColMut"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Rows","iter::ColMut","toodee::TooDee","iter::Col","view::TooDeeView","<&mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeViewMut","iter::RowsMut"]},"iter::ColMut":{"T":["view::TooDeeView","<&mut T as std::fmt::Debug>","iter::ColMut","iter::Col","view::TooDeeViewMut","iter::Rows","toodee::DrainCol","toodee::TooDee","iter::RowsMut"]},"iter::Rows":{"T":["view::TooDeeViewMut","toodee::TooDee","iter::Col","<&mut T as std::fmt::Debug>","iter::ColMut","iter::Rows","iter::RowsMut","toodee::DrainCol","view::TooDeeView"]},"iter::RowsMut":{"T":["iter::ColMut","iter::Rows","iter::RowsMut","view::TooDeeViewMut","<&mut T as std::fmt::Debug>","toodee::DrainCol","iter::Col","toodee::TooDee","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::DrainCol":{"T":["std::vec::IntoIter<T, A>","std::sync::Mutex<T>","std::ptr::DynMetadata<Dyn>","std::thread::JoinHandle<T>","std::collections::linked_list::Cursor<'_, T>","std::collections::linked_list::IterMut<'_, T>","std::sync::mpmc::Receiver<T>","std::future::ResumeTy","std::string::Drain<'_>","std::sync::Weak<T>","std::cell::Cell<T>","std::sync::RwLockReadGuard<'_, T>","std::sync::atomic::AtomicPtr<T>","<*const T as std::marker::Sync>","std::collections::linked_list::Iter<'_, T>","std::sync::Arc<T>","std::sync::RwLockWriteGuard<'_, T>","std::io::IoSlice<'a>","std::sync::OnceLock<T>","std::sync::RwLock<T>","std::collections::linked_list::CursorMut<'_, T>","std::env::Args","std::vec::Drain<'_, T, A>","std::io::IoSliceMut<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::mpsc::Receiver<T>","std::slice::IterMut<'_, T>","std::sync::mpsc::Sender<T>","std::task::Waker","std::cell::RefCell<T>","std::collections::LinkedList<T>","std::ptr::NonNull<T>","std::sync::mpmc::Sender<T>","std::boxed::ThinBox<T>","std::rc::Rc<T>","std::sync::MutexGuard<'_, T>","std::sys::unix::args::Args","std::rc::Weak<T>","std::ptr::Unique<T>","std::env::ArgsOs","std::slice::Iter<'_, T>","std::io::error::repr_bitpacked::Repr"]},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]},"toodee::TooDee::<T>::insert_row":{"I":["<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","toodee::DrainCol","<&mut I as std::iter::ExactSizeIterator>"],"T":["RUG_ANY"],"impl IntoIterator<Item = T, IntoIter = I>":["<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>","<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>","toodee::TooDee"]},"view::TooDeeView":{"T":["usize","i64","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","char","u8","i32","u16","bool","i8","u32","i16","u64"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = T, IntoIter = I>
+p0.insert_row(p1, p2);
+toodee::TooDee::<T>::insert_row(p0, p1, p2);
+crate::toodee::TooDee::<T>::insert_row(p0, p1, p2);
+<toodee::TooDee<T>>::insert_row(p0, p1, p2);
-----------------
src/toodee.rs toodee::TooDee::<T>::remove_row
deps:{"toodee::TooDee::<T>::remove_row":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::remove_row":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.remove_row(p1);
+toodee::TooDee::<T>::remove_row(p0, p1);
+crate::toodee::TooDee::<T>::remove_row(p0, p1);
+<toodee::TooDee<T>>::remove_row(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::pop_col
deps:{"toodee::TooDee::<T>::pop_col":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::pop_col":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.pop_col();
+toodee::TooDee::<T>::pop_col(p0);
+crate::toodee::TooDee::<T>::pop_col(p0);
+<toodee::TooDee<T>>::pop_col(p0);
-----------------
src/toodee.rs toodee::TooDee::<T>::push_col
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::marker::Sized","std::iter::ExactSizeIterator","iter::TooDeeIterator","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::cmp::Eq","std::marker::Sized"]},"toodee::TooDee::<T>::push_col":{"I":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator","std::marker::Sized","std::iter::Iterator"],"T":["std::marker::Sized"],"impl IntoIterator<Item = T, IntoIter = I>":["std::iter::IntoIterator","std::marker::Sized"]},"view::TooDeeView":{"T":["std::marker::Copy","std::fmt::Debug","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["toodee::DrainCol","iter::Rows","iter::Col","flattenexact::FlattenExact","<&mut I as std::iter::Iterator>","iter::RowsMut","iter::ColMut"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Rows","<*mut T as std::fmt::Debug>","toodee::TooDee","iter::ColMut","iter::Col","view::TooDeeViewMut","view::TooDeeView","toodee::DrainCol","iter::RowsMut"]},"iter::ColMut":{"T":["toodee::TooDee","iter::Rows","iter::RowsMut","iter::Col","<&mut T as std::fmt::Debug>","view::TooDeeViewMut","toodee::DrainCol","view::TooDeeView","iter::ColMut"]},"iter::Rows":{"T":["<&mut T as std::fmt::Debug>","iter::RowsMut","view::TooDeeView","view::TooDeeViewMut","toodee::DrainCol","iter::ColMut","iter::Rows","toodee::TooDee","iter::Col"]},"iter::RowsMut":{"T":["view::TooDeeView","view::TooDeeViewMut","iter::Rows","<&mut T as std::fmt::Debug>","toodee::DrainCol","iter::ColMut","iter::RowsMut","toodee::TooDee","iter::Col"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::sync::Weak<T>","std::collections::LinkedList<T>","std::io::error::repr_bitpacked::Repr","std::boxed::ThinBox<T>","<*mut T as std::marker::Sync>","std::ptr::Unique<T>","std::ptr::DynMetadata<Dyn>","std::slice::IterMut<'_, T>","std::sync::OnceLock<T>","std::sync::RwLockWriteGuard<'_, T>","std::sync::mpmc::Receiver<T>","std::vec::IntoIter<T, A>","std::sync::Mutex<T>","std::sync::mpmc::Sender<T>","std::io::IoSlice<'a>","std::cell::RefCell<T>","std::string::Drain<'_>","std::sync::Arc<T>","std::cell::Cell<T>","std::collections::linked_list::Iter<'_, T>","std::rc::Weak<T>","std::vec::Drain<'_, T, A>","std::sync::RwLockReadGuard<'_, T>","std::future::ResumeTy","std::thread::JoinHandle<T>","std::sync::atomic::AtomicPtr<T>","std::sync::mpsc::Sender<T>","std::sys::unix::args::Args","std::sync::mpsc::Receiver<T>","std::collections::linked_list::Cursor<'_, T>","std::env::ArgsOs","std::collections::linked_list::IterMut<'_, T>","std::rc::Rc<T>","std::ptr::NonNull<T>","std::collections::linked_list::CursorMut<'_, T>","std::io::IoSliceMut<'a>","std::task::Waker","std::sync::RwLock<T>","std::env::Args","std::sync::MutexGuard<'_, T>","std::slice::Iter<'_, T>","std::collections::vec_deque::Drain<'_, T, A>"]},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"toodee::TooDee::<T>::push_col":{"I":["toodee::DrainCol","flattenexact::FlattenExact"],"T":["RUG_ANY"],"impl IntoIterator<Item = T, IntoIter = I>":["<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>","<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>","toodee::TooDee"]},"view::TooDeeView":{"T":["i8","usize","u16","u32","i32","<*const T as std::fmt::Debug>","i16","u64","u8","i64","bool","char"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = T, IntoIter = I>
+p0.push_col(p1);
+toodee::TooDee::<T>::push_col(p0, p1);
+crate::toodee::TooDee::<T>::push_col(p0, p1);
+<toodee::TooDee<T>>::push_col(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::remove_col
deps:{"toodee::TooDee::<T>::remove_col":{"T":["std::marker::Sized"]}}
candidates:{"toodee::TooDee::<T>::remove_col":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
+p0.remove_col(p1);
+toodee::TooDee::<T>::remove_col(p0, p1);
+crate::toodee::TooDee::<T>::remove_col(p0, p1);
+<toodee::TooDee<T>>::remove_col(p0, p1);
-----------------
src/toodee.rs toodee::TooDee::<T>::insert_col
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::fmt::Debug","std::marker::Sync","std::marker::Send","std::marker::Sized"]},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::cmp::Eq"]},"toodee::TooDee::<T>::insert_col":{"I":["std::iter::Iterator","std::marker::Sized","std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"T":["std::marker::Sized"],"impl IntoIterator<Item = T, IntoIter = I>":["std::marker::Sized","std::iter::IntoIterator"]},"view::TooDeeView":{"T":["std::marker::Sized","std::marker::Copy","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Rows","iter::ColMut","toodee::DrainCol","iter::RowsMut","<&mut I as std::iter::Iterator>","iter::Col","flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["toodee::DrainCol","iter::Col","iter::Rows","view::TooDeeView","iter::RowsMut","<*mut T as std::fmt::Debug>","view::TooDeeViewMut","toodee::TooDee","iter::ColMut"]},"iter::ColMut":{"T":["view::TooDeeView","iter::Rows","<*mut T as std::fmt::Debug>","iter::RowsMut","view::TooDeeViewMut","iter::ColMut","toodee::DrainCol","iter::Col","toodee::TooDee"]},"iter::Rows":{"T":["iter::Rows","iter::ColMut","iter::Col","<&mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeView","view::TooDeeViewMut","toodee::TooDee","iter::RowsMut"]},"iter::RowsMut":{"T":["iter::ColMut","iter::Col","iter::RowsMut","toodee::TooDee","view::TooDeeViewMut","view::TooDeeView","<&mut T as std::fmt::Debug>","toodee::DrainCol","iter::Rows"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::string::Drain<'_>","std::sync::mpmc::Sender<T>","std::sync::OnceLock<T>","std::cell::RefCell<T>","std::io::error::repr_bitpacked::Repr","std::sync::RwLockReadGuard<'_, T>","std::thread::JoinHandle<T>","std::rc::Weak<T>","std::collections::LinkedList<T>","std::sync::mpsc::Receiver<T>","std::ptr::NonNull<T>","std::slice::IterMut<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::sync::Mutex<T>","std::sync::atomic::AtomicPtr<T>","std::ptr::DynMetadata<Dyn>","std::sync::RwLock<T>","std::vec::IntoIter<T, A>","std::boxed::ThinBox<T>","std::env::Args","std::collections::vec_deque::Drain<'_, T, A>","std::ptr::Unique<T>","std::vec::Drain<'_, T, A>","std::future::ResumeTy","std::rc::Rc<T>","std::sync::mpmc::Receiver<T>","std::collections::linked_list::IterMut<'_, T>","std::env::ArgsOs","std::cell::Cell<T>","std::collections::linked_list::Iter<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::sync::mpsc::Sender<T>","std::task::Waker","std::io::IoSliceMut<'a>","std::io::IoSlice<'a>","std::sys::unix::args::Args","std::sync::MutexGuard<'_, T>","std::sync::RwLockWriteGuard<'_, T>","std::slice::Iter<'_, T>","<*mut T as std::marker::Sync>","std::sync::Weak<T>","std::sync::Arc<T>"]},"toodee::TooDee":{"T":["<*const T as std::fmt::Debug>","toodee::TooDee"]},"toodee::TooDee::<T>::insert_col":{"I":["toodee::DrainCol","flattenexact::FlattenExact"],"T":["RUG_ANY"],"impl IntoIterator<Item = T, IntoIter = I>":["toodee::TooDee","<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>"]},"view::TooDeeView":{"T":["u32","u64","char","usize","u8","i64","bool","i16","<*const T as std::fmt::Debug>","u16","i32","i8"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = T, IntoIter = I>
+p0.insert_col(p1, p2);
+toodee::TooDee::<T>::insert_col(p0, p1, p2);
+crate::toodee::TooDee::<T>::insert_col(p0, p1, p2);
+<toodee::TooDee<T>>::insert_col(p0, p1, p2);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::iter::IntoIterator>::into_iter
deps:{"<toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.into_iter();
+<toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+<toodee::TooDee<T>>::into_iter(p0);
-----------------
src/toodee.rs <&'a toodee::TooDee<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.into_iter();
+<&'a toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a toodee::TooDee<T>>::into_iter(p0);
-----------------
src/toodee.rs <&'a mut toodee::TooDee<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.into_iter();
+<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a mut toodee::TooDee<T>>::into_iter(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::Into<std::vec::Vec<T>>>::into
deps:{"<toodee::TooDee<T> as std::convert::Into<std::vec::Vec<T>>>::into":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::convert::Into<std::vec::Vec<T>>>::into":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.into();
+<toodee::TooDee<T> as std::convert::Into<std::vec::Vec<T>>>::into(p0);
+crate::<toodee::TooDee<T> as std::convert::Into<std::vec::Vec<T>>>::into(p0);
+<toodee::TooDee<T>>::into(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::Into<std::boxed::Box<[T]>>>::into
deps:{"<toodee::TooDee<T> as std::convert::Into<std::boxed::Box<[T]>>>::into":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::convert::Into<std::boxed::Box<[T]>>>::into":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.into();
+<toodee::TooDee<T> as std::convert::Into<std::boxed::Box<[T]>>>::into(p0);
+crate::<toodee::TooDee<T> as std::convert::Into<std::boxed::Box<[T]>>>::into(p0);
+<toodee::TooDee<T>>::into(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::AsRef<[T]>>::as_ref
deps:{"<toodee::TooDee<T> as std::convert::AsRef<[T]>>::as_ref":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::convert::AsRef<[T]>>::as_ref":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.as_ref();
+<toodee::TooDee<T> as std::convert::AsRef<[T]>>::as_ref(p0);
+crate::<toodee::TooDee<T> as std::convert::AsRef<[T]>>::as_ref(p0);
+<toodee::TooDee<T>>::as_ref(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::AsMut<[T]>>::as_mut
deps:{"<toodee::TooDee<T> as std::convert::AsMut<[T]>>::as_mut":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::convert::AsMut<[T]>>::as_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.as_mut();
+<toodee::TooDee<T> as std::convert::AsMut<[T]>>::as_mut(p0);
+crate::<toodee::TooDee<T> as std::convert::AsMut<[T]>>::as_mut(p0);
+<toodee::TooDee<T>>::as_mut(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::AsRef<std::vec::Vec<T>>>::as_ref
deps:{"<toodee::TooDee<T> as std::convert::AsRef<std::vec::Vec<T>>>::as_ref":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::TooDee<T> as std::convert::AsRef<std::vec::Vec<T>>>::as_ref":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
+p0.as_ref();
+<toodee::TooDee<T> as std::convert::AsRef<std::vec::Vec<T>>>::as_ref(p0);
+crate::<toodee::TooDee<T> as std::convert::AsRef<std::vec::Vec<T>>>::as_ref(p0);
+<toodee::TooDee<T>>::as_ref(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sized","std::fmt::Debug","std::marker::Sync"]},"toodee::TooDee":{"T":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::hash::Hash"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::fmt::Debug","std::marker::Copy","std::clone::Clone","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::fmt::Debug>::fmt":{"T":["toodee::TooDee","iter::Rows","<&T as std::fmt::Debug>","view::TooDeeView","<*const T as std::fmt::Debug>","iter::Col","view::TooDeeViewMut","iter::RowsMut","toodee::DrainCol","iter::ColMut"]},"iter::Col":{"T":["<*const T as std::fmt::Debug>","iter::Rows","toodee::TooDee","iter::RowsMut","view::TooDeeViewMut","iter::ColMut","iter::Col","toodee::DrainCol","view::TooDeeView"]},"iter::ColMut":{"T":["iter::Col","view::TooDeeViewMut","iter::ColMut","iter::Rows","<*const T as std::fmt::Debug>","view::TooDeeView","toodee::DrainCol","iter::RowsMut","toodee::TooDee"]},"iter::Rows":{"T":["toodee::DrainCol","view::TooDeeViewMut","<&mut T as std::fmt::Debug>","toodee::TooDee","iter::ColMut","iter::Col","iter::RowsMut","iter::Rows","view::TooDeeView"]},"iter::RowsMut":{"T":["toodee::DrainCol","iter::Col","toodee::TooDee","iter::Rows","<&T as std::fmt::Debug>","view::TooDeeView","view::TooDeeViewMut","iter::ColMut","iter::RowsMut"]},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::Mutex<T>","std::collections::linked_list::Cursor<'_, T>","std::collections::vec_deque::Drain<'_, T, A>","std::env::ArgsOs","std::ptr::NonNull<T>","<*mut T as std::fmt::Debug>","std::slice::Iter<'_, T>","std::sync::mpmc::Receiver<T>","std::sync::RwLockReadGuard<'_, T>","std::io::error::repr_bitpacked::Repr","std::sync::RwLock<T>","std::env::Args","std::thread::JoinHandle<T>","std::sync::MutexGuard<'_, T>","std::sync::mpsc::Sender<T>","std::cell::RefCell<T>","std::string::Drain<'_>","std::task::Waker","std::collections::LinkedList<T>","std::ptr::DynMetadata<Dyn>","std::sys::unix::args::Args","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::IterMut<'_, T>","std::sync::atomic::AtomicPtr<T>","std::future::ResumeTy","std::sync::mpmc::Sender<T>","std::rc::Weak<T>","std::io::IoSliceMut<'a>","std::sync::Arc<T>","std::vec::Drain<'_, T, A>","std::slice::IterMut<'_, T>","std::boxed::ThinBox<T>","std::sync::mpsc::Receiver<T>","std::vec::IntoIter<T, A>","std::cell::Cell<T>","std::sync::OnceLock<T>","std::sync::Weak<T>","std::rc::Rc<T>","std::collections::linked_list::Iter<'_, T>","std::io::IoSlice<'a>","std::collections::linked_list::CursorMut<'_, T>","std::ptr::Unique<T>"]},"toodee::TooDee":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["<*mut T as std::fmt::Debug>","char","i16","u64","u32","bool","u8","i8","i64","u16","usize","i32"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *const T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<toodee::TooDee<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<toodee::TooDee<T> as std::fmt::Debug>::fmt(p0, p1);
+<toodee::TooDee<T>>::fmt(p0, p1);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::From<view::TooDeeView<'_, T>>>::from
deps:{"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::convert::From<view::TooDeeView<'_, T>>>::from":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::cmp::Eq","std::hash::Hash","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::convert::From<view::TooDeeView<'_, T>>>::from":{"T":["toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *mut T>","std::clone::impls::<impl std::clone::Clone for &mut T>","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["u8","usize","i16","i64","i8","u16","std::hash::impls::<impl std::hash::Hash for *const T>","i32","u64","u32","char","bool"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // view::TooDeeView<'_, T>
+<toodee::TooDee<T> as std::convert::From<view::TooDeeView<'_, T>>>::from(p0);
+crate::<toodee::TooDee<T> as std::convert::From<view::TooDeeView<'_, T>>>::from(p0);
+<toodee::TooDee<T>>::from(p0);
-----------------
src/toodee.rs <toodee::TooDee<T> as std::convert::From<view::TooDeeViewMut<'_, T>>>::from
deps:{"<*const T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::convert::From<view::TooDeeViewMut<'_, T>>>::from":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["std::hash::Hash","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"view::TooDeeView":{"T":["std::cmp::Eq","std::marker::Copy","std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<toodee::TooDee<T> as std::convert::From<view::TooDeeViewMut<'_, T>>>::from":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","toodee::TooDee","view::TooDeeView","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>"]},"view::TooDeeView":{"T":["u64","u32","char","u8","i64","i32","i8","usize","std::hash::impls::<impl std::hash::Hash for *mut T>","u16","i16","bool"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // view::TooDeeViewMut<'_, T>
+<toodee::TooDee<T> as std::convert::From<view::TooDeeViewMut<'_, T>>>::from(p0);
+crate::<toodee::TooDee<T> as std::convert::From<view::TooDeeViewMut<'_, T>>>::from(p0);
+<toodee::TooDee<T>>::from(p0);
-----------------
src/toodee.rs <toodee::DrainCol<'a, T> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::DrainCol<'a, T> as std::fmt::Debug>::fmt":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeView":{"T":["std::hash::Hash","std::marker::Sized","std::clone::Clone","std::marker::Copy","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<toodee::DrainCol<'a, T> as std::fmt::Debug>::fmt":{"T":["<*const T as std::fmt::Debug>","iter::ColMut","iter::Col","view::TooDeeView","iter::RowsMut","iter::Rows","toodee::TooDee","view::TooDeeViewMut","toodee::DrainCol"]},"iter::Col":{"T":["view::TooDeeViewMut","iter::RowsMut","<*mut T as std::fmt::Debug>","toodee::TooDee","iter::Rows","toodee::DrainCol","view::TooDeeView","iter::Col","iter::ColMut"]},"iter::ColMut":{"T":["iter::Rows","view::TooDeeViewMut","iter::Col","iter::RowsMut","toodee::TooDee","iter::ColMut","view::TooDeeView","<*const T as std::fmt::Debug>","toodee::DrainCol"]},"iter::Rows":{"T":["toodee::DrainCol","iter::RowsMut","view::TooDeeView","iter::Col","<&mut T as std::fmt::Debug>","iter::ColMut","iter::Rows","view::TooDeeViewMut","toodee::TooDee"]},"iter::RowsMut":{"T":["<&T as std::fmt::Debug>","iter::ColMut","view::TooDeeViewMut","iter::Rows","view::TooDeeView","toodee::DrainCol","iter::RowsMut","iter::Col","toodee::TooDee"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::env::ArgsOs","std::collections::linked_list::Iter<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::cell::RefCell<T>","std::sync::mpsc::Receiver<T>","std::sync::mpmc::Receiver<T>","std::sync::Weak<T>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::linked_list::Cursor<'_, T>","std::sync::RwLock<T>","std::sync::mpsc::Sender<T>","std::ptr::NonNull<T>","std::sys::unix::args::Args","std::sync::atomic::AtomicPtr<T>","std::sync::Arc<T>","std::sync::Mutex<T>","std::ptr::Unique<T>","std::vec::IntoIter<T, A>","std::io::IoSlice<'a>","std::future::ResumeTy","std::sync::mpmc::Sender<T>","std::io::error::repr_bitpacked::Repr","std::collections::linked_list::IterMut<'_, T>","std::sync::OnceLock<T>","std::thread::JoinHandle<T>","std::collections::LinkedList<T>","std::env::Args","std::string::Drain<'_>","std::sync::RwLockWriteGuard<'_, T>","std::boxed::ThinBox<T>","std::rc::Weak<T>","std::vec::Drain<'_, T, A>","std::ptr::DynMetadata<Dyn>","std::slice::IterMut<'_, T>","std::io::IoSliceMut<'a>","std::task::Waker","std::slice::Iter<'_, T>","std::rc::Rc<T>","<*mut T as std::fmt::Debug>","std::cell::Cell<T>","std::sync::RwLockReadGuard<'_, T>","std::sync::MutexGuard<'_, T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *const T>"]},"view::TooDeeView":{"T":["u8","i32","u16","usize","u64","i64","char","bool","std::clone::impls::<impl std::clone::Clone for *mut T>","i8","i16","u32"]},"view::TooDeeViewMut":{"T":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::DrainCol<'a, T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<toodee::DrainCol<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<toodee::DrainCol<'a, T> as std::fmt::Debug>::fmt(p0, p1);
+<toodee::DrainCol<'a, T>>::fmt(p0, p1);
-----------------
src/toodee.rs <toodee::DrainCol<'_, T> as std::iter::Iterator>::next
deps:{"<toodee::DrainCol<'_, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::DrainCol<'_, T> as std::iter::Iterator>::next":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::DrainCol<'_, T>
+p0.next();
+<toodee::DrainCol<'_, T> as std::iter::Iterator>::next(p0);
+crate::<toodee::DrainCol<'_, T> as std::iter::Iterator>::next(p0);
+<toodee::DrainCol<'_, T>>::next(p0);
-----------------
src/toodee.rs <toodee::DrainCol<'_, T> as std::iter::Iterator>::size_hint
deps:{"<toodee::DrainCol<'_, T> as std::iter::Iterator>::size_hint":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::DrainCol<'_, T> as std::iter::Iterator>::size_hint":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // toodee::DrainCol<'_, T>
+p0.size_hint();
+<toodee::DrainCol<'_, T> as std::iter::Iterator>::size_hint(p0);
+crate::<toodee::DrainCol<'_, T> as std::iter::Iterator>::size_hint(p0);
+<toodee::DrainCol<'_, T>>::size_hint(p0);
-----------------
src/toodee.rs <toodee::DrainCol<'_, T> as std::iter::DoubleEndedIterator>::next_back
deps:{"<toodee::DrainCol<'_, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::DrainCol<'_, T> as std::iter::DoubleEndedIterator>::next_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::DrainCol<'_, T>
+p0.next_back();
+<toodee::DrainCol<'_, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<toodee::DrainCol<'_, T> as std::iter::DoubleEndedIterator>::next_back(p0);
+<toodee::DrainCol<'_, T>>::next_back(p0);
-----------------
src/toodee.rs <toodee::DrainCol<'_, T> as std::ops::Drop>::drop
deps:{"<toodee::DrainCol<'_, T> as std::ops::Drop>::drop":{"T":["std::marker::Sized"]}}
candidates:{"<toodee::DrainCol<'_, T> as std::ops::Drop>::drop":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::DrainCol<'_, T>
+p0.drop();
+<toodee::DrainCol<'_, T> as std::ops::Drop>::drop(p0);
+crate::<toodee::DrainCol<'_, T> as std::ops::Drop>::drop(p0);
+<toodee::DrainCol<'_, T>>::drop(p0);
-----------------
src/toodee.rs <<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T> as std::ops::Drop>::drop
'r,'a
deps:{"<<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T> as std::ops::Drop>::drop":{"T":["std::marker::Sized"]}}
candidates:{"<<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T> as std::ops::Drop>::drop":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // <toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T>
+p0.drop();
+<<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T> as std::ops::Drop>::drop(p0);
+crate::<<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T> as std::ops::Drop>::drop(p0);
+<<toodee::DrainCol<'_, T> as std::ops::Drop>::drop::DropGuard<'r, 'a, T>>::drop(p0);
-----------------
src/flattenexact.rs flattenexact::FlattenExact::<I>::new
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator"]},"flattenexact::FlattenExact::<I>::new":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::clone::Clone","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Copy","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Col","iter::ColMut","toodee::DrainCol","flattenexact::FlattenExact","iter::RowsMut","<&mut I as std::iter::Iterator>","iter::Rows"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact::<I>::new":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["toodee::DrainCol","iter::ColMut","view::TooDeeViewMut","iter::RowsMut","<*const T as std::fmt::Debug>","toodee::TooDee","iter::Rows","iter::Col","view::TooDeeView"]},"iter::ColMut":{"T":["toodee::TooDee","view::TooDeeView","iter::RowsMut","<&T as std::fmt::Debug>","iter::Rows","view::TooDeeViewMut","toodee::DrainCol","iter::ColMut","iter::Col"]},"iter::Rows":{"T":["toodee::TooDee","view::TooDeeView","toodee::DrainCol","iter::Col","iter::Rows","<*mut T as std::fmt::Debug>","iter::ColMut","iter::RowsMut","view::TooDeeViewMut"]},"iter::RowsMut":{"T":["<*const T as std::fmt::Debug>","iter::RowsMut","view::TooDeeView","view::TooDeeViewMut","toodee::DrainCol","iter::ColMut","iter::Col","toodee::TooDee","iter::Rows"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::RwLockReadGuard<'_, T>","std::rc::Weak<T>","std::collections::linked_list::CursorMut<'_, T>","std::env::Args","std::sys::unix::args::Args","std::sync::Mutex<T>","std::slice::IterMut<'_, T>","std::collections::LinkedList<T>","std::sync::mpsc::Receiver<T>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::MutexGuard<'_, T>","std::sync::mpsc::Sender<T>","std::sync::RwLock<T>","std::io::error::repr_bitpacked::Repr","std::string::Drain<'_>","std::sync::Arc<T>","std::ptr::DynMetadata<Dyn>","std::sync::Weak<T>","std::future::ResumeTy","std::slice::Iter<'_, T>","std::collections::linked_list::Iter<'_, T>","std::sync::atomic::AtomicPtr<T>","std::collections::linked_list::IterMut<'_, T>","std::thread::JoinHandle<T>","std::ptr::NonNull<T>","<*const T as std::fmt::Debug>","std::vec::IntoIter<T, A>","std::io::IoSliceMut<'a>","std::sync::OnceLock<T>","std::sync::mpmc::Sender<T>","std::sync::mpmc::Receiver<T>","std::boxed::ThinBox<T>","std::io::IoSlice<'a>","std::cell::RefCell<T>","std::collections::linked_list::Cursor<'_, T>","std::env::ArgsOs","std::ptr::Unique<T>","std::rc::Rc<T>","std::vec::Drain<'_, T, A>","std::sync::RwLockWriteGuard<'_, T>","std::task::Waker","std::cell::Cell<T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"view::TooDeeView":{"T":["usize","i8","i64","u16","u32","bool","i16","u64","char","i32","u8","std::clone::impls::<impl std::clone::Clone for *const T>"]},"view::TooDeeViewMut":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+flattenexact::FlattenExact::<I>::new(p0);
+crate::flattenexact::FlattenExact::<I>::new(p0);
+<flattenexact::FlattenExact<I>>::new(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::next
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::next":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","iter::TooDeeIterator","std::iter::DoubleEndedIterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["iter::TooDeeIterator","std::iter::DoubleEndedIterator","std::marker::Sized","std::iter::ExactSizeIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::marker::Sync","std::marker::Send","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::PartialEq","std::marker::Copy","std::hash::Hash","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Col","iter::RowsMut","<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","iter::Rows","iter::ColMut","toodee::DrainCol"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::next":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["toodee::TooDee","view::TooDeeView","iter::Rows","iter::ColMut","toodee::DrainCol","iter::RowsMut","iter::Col","view::TooDeeViewMut","<&mut T as std::fmt::Debug>"]},"iter::ColMut":{"T":["toodee::DrainCol","<&T as std::fmt::Debug>","view::TooDeeView","iter::Rows","iter::RowsMut","iter::Col","iter::ColMut","view::TooDeeViewMut","toodee::TooDee"]},"iter::Rows":{"T":["view::TooDeeViewMut","view::TooDeeView","toodee::TooDee","toodee::DrainCol","iter::Rows","iter::ColMut","<&mut T as std::fmt::Debug>","iter::RowsMut","iter::Col"]},"iter::RowsMut":{"T":["view::TooDeeViewMut","iter::ColMut","iter::RowsMut","toodee::TooDee","<*const T as std::fmt::Debug>","iter::Col","toodee::DrainCol","view::TooDeeView","iter::Rows"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::atomic::AtomicPtr<T>","std::thread::JoinHandle<T>","std::env::ArgsOs","<*const T as std::marker::Send>","std::ptr::Unique<T>","std::cell::Cell<T>","std::sync::Arc<T>","std::task::Waker","std::collections::vec_deque::Drain<'_, T, A>","std::string::Drain<'_>","std::future::ResumeTy","std::sync::mpsc::Receiver<T>","std::collections::linked_list::Cursor<'_, T>","std::sync::Mutex<T>","std::sync::mpsc::Sender<T>","std::sync::Weak<T>","std::sync::RwLock<T>","std::io::IoSliceMut<'a>","std::collections::linked_list::IterMut<'_, T>","std::sync::mpmc::Sender<T>","std::collections::LinkedList<T>","std::sync::OnceLock<T>","std::sync::mpmc::Receiver<T>","std::io::IoSlice<'a>","std::io::error::repr_bitpacked::Repr","std::sync::MutexGuard<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::vec::Drain<'_, T, A>","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::Iter<'_, T>","std::cell::RefCell<T>","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::sys::unix::args::Args","std::rc::Rc<T>","std::rc::Weak<T>","std::slice::IterMut<'_, T>","std::ptr::DynMetadata<Dyn>","std::env::Args","std::boxed::ThinBox<T>","std::ptr::NonNull<T>"]},"toodee::TooDee":{"T":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["bool","std::marker::copy_impls::<impl std::marker::Copy for *const T>","u32","i32","usize","char","i16","u16","i64","u8","u64","i8"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
+p0.next();
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::next(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::next(p0);
+<flattenexact::FlattenExact<I>>::next(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::nth
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::nth":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["iter::TooDeeIterator","std::iter::ExactSizeIterator","std::marker::Sized","std::iter::DoubleEndedIterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","iter::TooDeeIterator","std::marker::Sized","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::hash::Hash"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::marker::Copy","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash"]},"view::TooDeeViewMut":{"T":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["toodee::DrainCol","iter::Rows","flattenexact::FlattenExact","iter::ColMut","<&mut I as std::iter::Iterator>","iter::RowsMut","iter::Col"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::nth":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<I as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::Rows","view::TooDeeView","view::TooDeeViewMut","<&T as std::fmt::Debug>","toodee::TooDee","iter::Col","toodee::DrainCol","iter::RowsMut","iter::ColMut"]},"iter::ColMut":{"T":["toodee::TooDee","view::TooDeeViewMut","iter::RowsMut","iter::Rows","<*const T as std::fmt::Debug>","iter::ColMut","view::TooDeeView","iter::Col","toodee::DrainCol"]},"iter::Rows":{"T":["toodee::TooDee","toodee::DrainCol","view::TooDeeView","iter::Rows","view::TooDeeViewMut","iter::RowsMut","<&mut T as std::fmt::Debug>","iter::Col","iter::ColMut"]},"iter::RowsMut":{"T":["toodee::DrainCol","toodee::TooDee","iter::Col","iter::RowsMut","iter::Rows","iter::ColMut","<&mut T as std::fmt::Debug>","view::TooDeeViewMut","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::Weak<T>","std::sync::Arc<T>","std::cell::RefCell<T>","std::env::ArgsOs","std::task::Waker","std::sync::MutexGuard<'_, T>","std::ptr::Unique<T>","std::io::IoSliceMut<'a>","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::io::error::repr_bitpacked::Repr","std::collections::linked_list::Iter<'_, T>","std::env::Args","std::sync::Mutex<T>","std::sync::mpsc::Receiver<T>","std::collections::linked_list::CursorMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::sync::mpsc::Sender<T>","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::rc::Weak<T>","std::sync::mpmc::Sender<T>","std::cell::Cell<T>","std::sys::unix::args::Args","std::sync::RwLock<T>","std::io::IoSlice<'a>","std::sync::mpmc::Receiver<T>","std::thread::JoinHandle<T>","std::future::ResumeTy","<*const T as std::marker::Send>","std::sync::atomic::AtomicPtr<T>","std::collections::linked_list::IterMut<'_, T>","std::ptr::NonNull<T>","std::string::Drain<'_>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::IterMut<'_, T>","std::sync::OnceLock<T>","std::vec::Drain<'_, T, A>","std::rc::Rc<T>","std::ptr::DynMetadata<Dyn>","std::collections::LinkedList<T>","std::boxed::ThinBox<T>"]},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["usize","i32","bool","std::clone::impls::<impl std::clone::Clone for *const T>","u16","i64","u32","u8","i16","char","u64","i8"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
let mut p1 = 0usize; // None+usize
+p0.nth(p1);
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::nth(p0, p1);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::nth(p0, p1);
+<flattenexact::FlattenExact<I>>::nth(p0, p1);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::size_hint
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::size_hint":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","std::marker::Sized","iter::TooDeeIterator","std::iter::ExactSizeIterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator","std::marker::Sized","iter::TooDeeIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Send","std::marker::Sized","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::marker::Copy"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::hash::Hash"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Rows","flattenexact::FlattenExact","<&mut I as std::iter::Iterator>","toodee::DrainCol","iter::RowsMut","iter::Col","iter::ColMut"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::size_hint":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::ColMut","toodee::TooDee","<&T as std::fmt::Debug>","iter::Rows","iter::RowsMut","toodee::DrainCol","view::TooDeeViewMut","view::TooDeeView","iter::Col"]},"iter::ColMut":{"T":["view::TooDeeView","toodee::DrainCol","iter::RowsMut","<&T as std::fmt::Debug>","toodee::TooDee","iter::ColMut","iter::Rows","view::TooDeeViewMut","iter::Col"]},"iter::Rows":{"T":["view::TooDeeViewMut","toodee::DrainCol","<&mut T as std::fmt::Debug>","iter::Col","iter::RowsMut","iter::ColMut","iter::Rows","toodee::TooDee","view::TooDeeView"]},"iter::RowsMut":{"T":["view::TooDeeViewMut","view::TooDeeView","toodee::TooDee","iter::RowsMut","iter::Rows","toodee::DrainCol","<&mut T as std::fmt::Debug>","iter::ColMut","iter::Col"]},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::sync::mpsc::Receiver<T>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::LinkedList<T>","std::sync::MutexGuard<'_, T>","std::cell::RefCell<T>","std::rc::Weak<T>","std::collections::linked_list::Cursor<'_, T>","std::sync::Mutex<T>","std::collections::linked_list::Iter<'_, T>","std::string::Drain<'_>","std::env::Args","std::slice::Iter<'_, T>","std::io::IoSlice<'a>","std::sync::OnceLock<T>","std::collections::linked_list::CursorMut<'_, T>","std::sync::mpmc::Sender<T>","<*const T as std::fmt::Debug>","std::future::ResumeTy","std::sync::mpsc::Sender<T>","std::sync::RwLockWriteGuard<'_, T>","std::vec::Drain<'_, T, A>","std::sys::unix::args::Args","std::sync::atomic::AtomicPtr<T>","std::slice::IterMut<'_, T>","std::ptr::NonNull<T>","std::sync::RwLockReadGuard<'_, T>","std::ptr::Unique<T>","std::cell::Cell<T>","std::sync::mpmc::Receiver<T>","std::sync::Arc<T>","std::sync::RwLock<T>","std::vec::IntoIter<T, A>","std::env::ArgsOs","std::rc::Rc<T>","std::ptr::DynMetadata<Dyn>","std::collections::linked_list::IterMut<'_, T>","std::sync::Weak<T>","std::io::IoSliceMut<'a>","std::boxed::ThinBox<T>","std::task::Waker","std::io::error::repr_bitpacked::Repr","std::thread::JoinHandle<T>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]},"view::TooDeeView":{"T":["usize","u32","char","i64","bool","<*const T as std::fmt::Debug>","i32","u8","u16","i16","u64","i8"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *mut T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
+p0.size_hint();
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::size_hint(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::size_hint(p0);
+<flattenexact::FlattenExact<I>>::size_hint(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::last
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::last":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","std::marker::Sized","std::iter::ExactSizeIterator","iter::TooDeeIterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Sync","std::marker::Send"]},"toodee::TooDee":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::clone::Clone"]},"view::TooDeeView":{"T":["std::marker::Copy","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::hash::Hash","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["iter::RowsMut","iter::Rows","toodee::DrainCol","iter::ColMut","<&mut I as std::iter::Iterator>","flattenexact::FlattenExact","iter::Col"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::last":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["iter::RowsMut","<*mut T as std::fmt::Debug>","iter::Col","iter::ColMut","view::TooDeeViewMut","view::TooDeeView","toodee::DrainCol","toodee::TooDee","iter::Rows"]},"iter::ColMut":{"T":["toodee::TooDee","iter::Rows","iter::ColMut","iter::RowsMut","iter::Col","<*mut T as std::fmt::Debug>","view::TooDeeView","toodee::DrainCol","view::TooDeeViewMut"]},"iter::Rows":{"T":["view::TooDeeView","iter::Rows","iter::ColMut","view::TooDeeViewMut","iter::RowsMut","<&mut T as std::fmt::Debug>","toodee::DrainCol","toodee::TooDee","iter::Col"]},"iter::RowsMut":{"T":["view::TooDeeViewMut","iter::Rows","toodee::DrainCol","iter::Col","view::TooDeeView","iter::ColMut","toodee::TooDee","iter::RowsMut","<*const T as std::fmt::Debug>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"toodee::DrainCol":{"T":["std::sync::RwLock<T>","<*const T as std::fmt::Debug>","std::sync::Weak<T>","std::vec::Drain<'_, T, A>","std::future::ResumeTy","std::sync::Arc<T>","std::env::Args","std::cell::Cell<T>","std::collections::linked_list::Iter<'_, T>","std::collections::vec_deque::Drain<'_, T, A>","std::ptr::DynMetadata<Dyn>","std::collections::LinkedList<T>","std::string::Drain<'_>","std::sync::MutexGuard<'_, T>","std::sync::mpmc::Sender<T>","std::rc::Weak<T>","std::sync::mpsc::Sender<T>","std::sync::mpsc::Receiver<T>","std::io::IoSlice<'a>","std::sync::atomic::AtomicPtr<T>","std::thread::JoinHandle<T>","std::boxed::ThinBox<T>","std::sys::unix::args::Args","std::slice::IterMut<'_, T>","std::env::ArgsOs","std::sync::mpmc::Receiver<T>","std::collections::linked_list::CursorMut<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::slice::Iter<'_, T>","std::ptr::NonNull<T>","std::ptr::Unique<T>","std::sync::RwLockWriteGuard<'_, T>","std::task::Waker","std::cell::RefCell<T>","std::sync::Mutex<T>","std::rc::Rc<T>","std::sync::OnceLock<T>","std::io::IoSliceMut<'a>","std::collections::linked_list::IterMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::vec::IntoIter<T, A>","std::io::error::repr_bitpacked::Repr"]},"toodee::TooDee":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["u16","bool","i16","usize","u8","i64","i32","i8","char","std::clone::impls::<impl std::clone::Clone for *mut T>","u64","u32"]},"view::TooDeeViewMut":{"T":["<*const T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
+p0.last();
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::last(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::last(p0);
+<flattenexact::FlattenExact<I>>::last(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::Iterator>::fold
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"Acc":["std::marker::Sized"],"Fold":["std::marker::Sized","std::ops::FnMut"],"I":["std::iter::ExactSizeIterator","std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","std::marker::Sized","std::iter::ExactSizeIterator","iter::TooDeeIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::marker::Sync","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::hash::Hash","std::marker::Sized"]},"view::TooDeeView":{"T":["std::clone::Clone","std::hash::Hash","std::marker::Copy","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"view::TooDeeViewMut":{"T":["std::cmp::Eq","std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Col","iter::ColMut","toodee::DrainCol","<&mut I as std::iter::Iterator>","iter::RowsMut","iter::Rows","flattenexact::FlattenExact"]},"<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>","toodee::TooDee"],"Acc":["RUG_ANY"],"Fold":["std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["toodee::DrainCol","iter::Col","toodee::TooDee","view::TooDeeViewMut","view::TooDeeView","iter::Rows","<*const T as std::fmt::Debug>","iter::ColMut","iter::RowsMut"]},"iter::ColMut":{"T":["iter::Col","view::TooDeeView","toodee::DrainCol","iter::Rows","<&mut T as std::fmt::Debug>","iter::ColMut","iter::RowsMut","view::TooDeeViewMut","toodee::TooDee"]},"iter::Rows":{"T":["toodee::TooDee","iter::Rows","iter::RowsMut","view::TooDeeView","iter::ColMut","iter::Col","toodee::DrainCol","<*const T as std::fmt::Debug>","view::TooDeeViewMut"]},"iter::RowsMut":{"T":["iter::Col","iter::ColMut","toodee::DrainCol","view::TooDeeViewMut","iter::RowsMut","iter::Rows","<&mut T as std::fmt::Debug>","toodee::TooDee","view::TooDeeView"]},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::collections::linked_list::Iter<'_, T>","std::ptr::Unique<T>","std::ptr::NonNull<T>","std::io::error::repr_bitpacked::Repr","std::boxed::ThinBox<T>","std::slice::Iter<'_, T>","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::IterMut<'_, T>","std::env::Args","std::sync::atomic::AtomicPtr<T>","std::sync::Mutex<T>","std::sync::mpsc::Receiver<T>","std::vec::Drain<'_, T, A>","std::collections::linked_list::CursorMut<'_, T>","std::thread::JoinHandle<T>","std::env::ArgsOs","std::io::IoSlice<'a>","std::io::IoSliceMut<'a>","std::rc::Weak<T>","std::sync::OnceLock<T>","std::ptr::DynMetadata<Dyn>","std::sync::Arc<T>","std::future::ResumeTy","<*const T as std::marker::Sync>","std::sync::mpsc::Sender<T>","std::string::Drain<'_>","std::sync::mpmc::Sender<T>","std::slice::IterMut<'_, T>","std::sync::RwLockReadGuard<'_, T>","std::task::Waker","std::collections::LinkedList<T>","std::sync::mpmc::Receiver<T>","std::collections::linked_list::Cursor<'_, T>","std::vec::IntoIter<T, A>","std::sync::Weak<T>","std::sync::RwLock<T>","std::cell::RefCell<T>","std::collections::vec_deque::Drain<'_, T, A>","std::cell::Cell<T>","std::sync::MutexGuard<'_, T>","std::rc::Rc<T>","std::sys::unix::args::Args"]},"toodee::TooDee":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["i64","i8","u64","usize","u8","u16","u32","i32","bool","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","i16","char"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
let mut p1 = MaybeUninit::uninit().assume_init(); // Acc
let mut p2 = MaybeUninit::uninit().assume_init(); // Fold
+p0.fold(p1, p2);
+<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold(p0, p1, p2);
+crate::<flattenexact::FlattenExact<I> as std::iter::Iterator>::fold(p0, p1, p2);
+<flattenexact::FlattenExact<I>>::fold(p0, p1, p2);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::next_back
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::next_back":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["iter::TooDeeIterator","std::iter::ExactSizeIterator","std::marker::Sized","std::iter::DoubleEndedIterator"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::marker::Sized","iter::TooDeeIterator","std::iter::DoubleEndedIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sync","std::fmt::Debug","std::marker::Sized"]},"toodee::TooDee":{"T":["std::clone::Clone","std::hash::Hash","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeView":{"T":["std::cmp::Eq","std::clone::Clone","std::marker::Copy","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["toodee::DrainCol","iter::Rows","iter::RowsMut","flattenexact::FlattenExact","iter::ColMut","<&mut I as std::iter::Iterator>","iter::Col"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::next_back":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["<I as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["view::TooDeeView","view::TooDeeViewMut","<&T as std::fmt::Debug>","iter::Col","toodee::DrainCol","iter::ColMut","iter::Rows","iter::RowsMut","toodee::TooDee"]},"iter::ColMut":{"T":["<*const T as std::fmt::Debug>","view::TooDeeViewMut","view::TooDeeView","iter::Col","iter::RowsMut","iter::Rows","toodee::TooDee","toodee::DrainCol","iter::ColMut"]},"iter::Rows":{"T":["iter::Rows","iter::ColMut","iter::RowsMut","iter::Col","toodee::DrainCol","<&T as std::fmt::Debug>","view::TooDeeView","toodee::TooDee","view::TooDeeViewMut"]},"iter::RowsMut":{"T":["toodee::DrainCol","iter::Rows","iter::ColMut","iter::Col","iter::RowsMut","toodee::TooDee","view::TooDeeView","view::TooDeeViewMut","<*const T as std::fmt::Debug>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::DrainCol":{"T":["std::boxed::ThinBox<T>","std::collections::LinkedList<T>","std::sync::MutexGuard<'_, T>","<*mut T as std::marker::Send>","std::cell::Cell<T>","std::rc::Rc<T>","std::thread::JoinHandle<T>","std::io::error::repr_bitpacked::Repr","std::collections::linked_list::CursorMut<'_, T>","std::collections::linked_list::IterMut<'_, T>","std::collections::linked_list::Cursor<'_, T>","std::sys::unix::args::Args","std::ptr::NonNull<T>","std::slice::Iter<'_, T>","std::sync::mpmc::Receiver<T>","std::sync::RwLockReadGuard<'_, T>","std::ptr::DynMetadata<Dyn>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::sync::atomic::AtomicPtr<T>","std::collections::linked_list::Iter<'_, T>","std::io::IoSliceMut<'a>","std::rc::Weak<T>","std::env::Args","std::sync::OnceLock<T>","std::sync::mpsc::Sender<T>","std::sync::mpsc::Receiver<T>","std::vec::Drain<'_, T, A>","std::cell::RefCell<T>","std::sync::Weak<T>","std::sync::RwLockWriteGuard<'_, T>","std::collections::vec_deque::Drain<'_, T, A>","std::sync::Arc<T>","std::env::ArgsOs","std::sync::mpmc::Sender<T>","std::task::Waker","std::ptr::Unique<T>","std::string::Drain<'_>","std::io::IoSlice<'a>","std::sync::Mutex<T>","std::sync::RwLock<T>","std::future::ResumeTy"]},"toodee::TooDee":{"T":["toodee::TooDee","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"view::TooDeeView":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","i8","u8","i32","usize","i64","i16","u64","u16","char","u32","bool"]},"view::TooDeeViewMut":{"T":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
+p0.next_back();
+<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::next_back(p0);
+<flattenexact::FlattenExact<I>>::next_back(p0);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::nth_back
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::nth_back":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","iter::TooDeeIterator","std::iter::ExactSizeIterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::marker::Sized","std::iter::DoubleEndedIterator","iter::TooDeeIterator"]},"iter::Col":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sync","std::marker::Sized","std::fmt::Debug","std::marker::Send"]},"toodee::TooDee":{"T":["std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::clone::Clone","std::hash::Hash","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::marker::Copy","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash","std::cmp::Eq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Sync>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Rows","iter::ColMut","flattenexact::FlattenExact","iter::Col","iter::RowsMut","toodee::DrainCol","<&mut I as std::iter::Iterator>"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::nth_back":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>","toodee::TooDee"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["view::TooDeeViewMut","toodee::TooDee","iter::Rows","iter::Col","view::TooDeeView","iter::RowsMut","toodee::DrainCol","<&mut T as std::fmt::Debug>","iter::ColMut"]},"iter::ColMut":{"T":["view::TooDeeViewMut","iter::Rows","toodee::DrainCol","view::TooDeeView","iter::RowsMut","iter::Col","<&T as std::fmt::Debug>","toodee::TooDee","iter::ColMut"]},"iter::Rows":{"T":["view::TooDeeViewMut","toodee::DrainCol","<*mut T as std::fmt::Debug>","iter::ColMut","iter::Col","view::TooDeeView","toodee::TooDee","iter::RowsMut","iter::Rows"]},"iter::RowsMut":{"T":["iter::Col","iter::RowsMut","toodee::DrainCol","toodee::TooDee","view::TooDeeViewMut","<&mut T as std::fmt::Debug>","iter::Rows","iter::ColMut","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::future::ResumeTy","std::sync::RwLockWriteGuard<'_, T>","std::slice::Iter<'_, T>","std::io::error::repr_bitpacked::Repr","<*const T as std::marker::Sync>","std::sync::mpmc::Receiver<T>","std::env::ArgsOs","std::collections::linked_list::Iter<'_, T>","std::sync::Arc<T>","std::ptr::Unique<T>","std::sync::atomic::AtomicPtr<T>","std::collections::linked_list::IterMut<'_, T>","std::slice::IterMut<'_, T>","std::task::Waker","std::io::IoSliceMut<'a>","std::vec::IntoIter<T, A>","std::sync::Mutex<T>","std::cell::RefCell<T>","std::sys::unix::args::Args","std::env::Args","std::rc::Rc<T>","std::collections::LinkedList<T>","std::rc::Weak<T>","std::thread::JoinHandle<T>","std::sync::mpmc::Sender<T>","std::cell::Cell<T>","std::collections::linked_list::CursorMut<'_, T>","std::boxed::ThinBox<T>","std::sync::Weak<T>","std::collections::vec_deque::Drain<'_, T, A>","std::ptr::NonNull<T>","std::sync::RwLock<T>","std::sync::RwLockReadGuard<'_, T>","std::ptr::DynMetadata<Dyn>","std::sync::OnceLock<T>","std::string::Drain<'_>","std::io::IoSlice<'a>","std::sync::mpsc::Receiver<T>","std::sync::mpsc::Sender<T>","std::collections::linked_list::Cursor<'_, T>","std::sync::MutexGuard<'_, T>","std::vec::Drain<'_, T, A>"]},"toodee::TooDee":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *mut T>"]},"view::TooDeeView":{"T":["i16","usize","u64","u32","bool","char","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","i32","u16","u8","i8","i64"]},"view::TooDeeViewMut":{"T":["std::hash::impls::<impl std::hash::Hash for *mut T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
let mut p1 = 0usize; // None+usize
+p0.nth_back(p1);
+<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+crate::<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::nth_back(p0, p1);
+<flattenexact::FlattenExact<I>>::nth_back(p0, p1);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"Acc":["std::marker::Sized"],"Fold":["std::marker::Sized","std::ops::FnMut"],"I":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator","iter::TooDeeIterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator","iter::TooDeeIterator","std::marker::Sized"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Send","std::marker::Sized","std::marker::Sync","std::fmt::Debug"]},"toodee::TooDee":{"T":["std::marker::Sized","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"view::TooDeeView":{"T":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Copy","std::marker::Sized","std::hash::Hash","std::clone::Clone"]},"view::TooDeeViewMut":{"T":["std::fmt::Debug","std::cmp::Eq","std::hash::Hash","std::marker::Sized","std::cmp::PartialEq"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Sync>":{},"<*mut T as std::fmt::Debug>":{},"<*mut T as std::marker::Send>":{},"<I as std::iter::IntoIterator>":{"I":["iter::RowsMut","toodee::DrainCol","iter::ColMut","flattenexact::FlattenExact","iter::Rows","<&mut I as std::iter::Iterator>","iter::Col"]},"<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","toodee::TooDee"],"Acc":["RUG_ANY"],"Fold":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::option::Option<T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["<&mut T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeView","iter::RowsMut","iter::Col","view::TooDeeViewMut","iter::ColMut","toodee::TooDee","iter::Rows"]},"iter::ColMut":{"T":["<&mut T as std::fmt::Debug>","view::TooDeeView","iter::ColMut","view::TooDeeViewMut","toodee::DrainCol","iter::Rows","toodee::TooDee","iter::Col","iter::RowsMut"]},"iter::Rows":{"T":["toodee::TooDee","iter::Rows","<&T as std::fmt::Debug>","toodee::DrainCol","view::TooDeeViewMut","iter::Col","iter::ColMut","iter::RowsMut","view::TooDeeView"]},"iter::RowsMut":{"T":["iter::Col","<&mut T as std::fmt::Debug>","view::TooDeeViewMut","view::TooDeeView","toodee::DrainCol","iter::ColMut","iter::Rows","toodee::TooDee","iter::RowsMut"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::sys::unix::args::Args","std::collections::linked_list::IterMut<'_, T>","std::vec::Drain<'_, T, A>","std::collections::LinkedList<T>","std::collections::linked_list::Cursor<'_, T>","std::cell::RefCell<T>","std::sync::OnceLock<T>","std::cell::Cell<T>","std::env::ArgsOs","std::slice::IterMut<'_, T>","std::env::Args","std::boxed::ThinBox<T>","std::task::Waker","std::sync::mpsc::Receiver<T>","std::sync::MutexGuard<'_, T>","std::collections::vec_deque::Drain<'_, T, A>","std::thread::JoinHandle<T>","std::sync::mpsc::Sender<T>","std::sync::Mutex<T>","std::vec::IntoIter<T, A>","std::sync::Weak<T>","std::rc::Rc<T>","std::io::IoSlice<'a>","std::ptr::NonNull<T>","<*const T as std::marker::Sync>","std::io::error::repr_bitpacked::Repr","std::sync::mpmc::Receiver<T>","std::slice::Iter<'_, T>","std::future::ResumeTy","std::sync::atomic::AtomicPtr<T>","std::ptr::Unique<T>","std::rc::Weak<T>","std::collections::linked_list::Iter<'_, T>","std::sync::RwLock<T>","std::sync::RwLockWriteGuard<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::sync::Arc<T>","std::io::IoSliceMut<'a>","std::sync::RwLockReadGuard<'_, T>","std::sync::mpmc::Sender<T>","std::string::Drain<'_>","std::ptr::DynMetadata<Dyn>"]},"toodee::TooDee":{"T":["toodee::TooDee","<*mut T as std::fmt::Debug>"]},"view::TooDeeView":{"T":["i64","std::clone::impls::<impl std::clone::Clone for *const T>","char","i16","u64","u32","i32","bool","u16","usize","u8","i8"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::hash::impls::<impl std::hash::Hash for *mut T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
let mut p1 = MaybeUninit::uninit().assume_init(); // Acc
let mut p2 = MaybeUninit::uninit().assume_init(); // Fold
+p0.rfold(p1, p2);
+<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold(p0, p1, p2);
+crate::<flattenexact::FlattenExact<I> as std::iter::DoubleEndedIterator>::rfold(p0, p1, p2);
+<flattenexact::FlattenExact<I>>::rfold(p0, p1, p2);
-----------------
src/flattenexact.rs <flattenexact::FlattenExact<I> as iter::TooDeeIterator>::num_cols
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<flattenexact::FlattenExact<I> as iter::TooDeeIterator>::num_cols":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::DoubleEndedIterator","std::iter::ExactSizeIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator","iter::TooDeeIterator","std::marker::Sized"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["std::iter::ExactSizeIterator","std::iter::DoubleEndedIterator"],"<I as std::iter::Iterator>::Item":["std::iter::IntoIterator"],"I":["std::iter::DoubleEndedIterator","iter::TooDeeIterator","std::marker::Sized","std::iter::ExactSizeIterator"]},"iter::Col":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::ColMut":{"T":["std::fmt::Debug","std::marker::Sized"]},"iter::Rows":{"T":["std::marker::Sized","std::fmt::Debug"]},"iter::RowsMut":{"T":["std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::marker::Sized","std::fmt::Debug","std::marker::Send","std::marker::Sync"]},"toodee::TooDee":{"T":["std::marker::Sized","std::cmp::Eq","std::hash::Hash","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::marker::Copy","std::hash::Hash","std::cmp::Eq","std::fmt::Debug"]},"view::TooDeeViewMut":{"T":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::hash::Hash","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a mut view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a toodee::TooDee<T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeView<'a, T> as std::iter::IntoIterator>":{},"<&'a view::TooDeeViewMut<'a, T> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*const T as std::marker::Send>":{},"<*mut T as std::fmt::Debug>":{},"<I as std::iter::IntoIterator>":{"I":["iter::Rows","flattenexact::FlattenExact","toodee::DrainCol","iter::RowsMut","iter::ColMut","iter::Col","<&mut I as std::iter::Iterator>"]},"<flattenexact::FlattenExact<I> as iter::TooDeeIterator>::num_cols":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["toodee::DrainCol","flattenexact::FlattenExact"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::option::Option<T> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"flattenexact::FlattenExact":{"<<I as std::iter::Iterator>::Item as std::iter::IntoIterator>::IntoIter":["flattenexact::FlattenExact","toodee::DrainCol"],"<I as std::iter::Iterator>::Item":["toodee::TooDee","<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>"],"I":["flattenexact::FlattenExact"]},"iter::Col":{"T":["toodee::TooDee","iter::Rows","iter::ColMut","view::TooDeeView","view::TooDeeViewMut","iter::Col","iter::RowsMut","toodee::DrainCol","<&mut T as std::fmt::Debug>"]},"iter::ColMut":{"T":["view::TooDeeView","iter::Rows","<*const T as std::fmt::Debug>","toodee::DrainCol","iter::ColMut","toodee::TooDee","iter::Col","view::TooDeeViewMut","iter::RowsMut"]},"iter::Rows":{"T":["iter::Col","view::TooDeeViewMut","iter::RowsMut","<&mut T as std::fmt::Debug>","toodee::DrainCol","iter::Rows","iter::ColMut","view::TooDeeView","toodee::TooDee"]},"iter::RowsMut":{"T":["iter::Rows","toodee::DrainCol","iter::ColMut","view::TooDeeViewMut","iter::RowsMut","<&mut T as std::fmt::Debug>","iter::Col","view::TooDeeView","toodee::TooDee"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::DrainCol":{"T":["std::vec::Drain<'_, T, A>","std::rc::Weak<T>","std::io::IoSlice<'a>","std::sync::mpmc::Receiver<T>","std::slice::IterMut<'_, T>","std::collections::linked_list::CursorMut<'_, T>","std::boxed::ThinBox<T>","std::ptr::DynMetadata<Dyn>","std::io::error::repr_bitpacked::Repr","std::collections::LinkedList<T>","std::ptr::NonNull<T>","std::collections::linked_list::IterMut<'_, T>","std::cell::Cell<T>","std::sync::Mutex<T>","std::future::ResumeTy","<*mut T as std::fmt::Debug>","std::ptr::Unique<T>","std::string::Drain<'_>","std::sync::RwLockReadGuard<'_, T>","std::task::Waker","std::vec::IntoIter<T, A>","std::collections::linked_list::Cursor<'_, T>","std::rc::Rc<T>","std::collections::linked_list::Iter<'_, T>","std::sync::Weak<T>","std::env::ArgsOs","std::sync::mpmc::Sender<T>","std::env::Args","std::sync::RwLock<T>","std::sync::RwLockWriteGuard<'_, T>","std::sync::atomic::AtomicPtr<T>","std::sync::mpsc::Sender<T>","std::sync::OnceLock<T>","std::sync::Arc<T>","std::thread::JoinHandle<T>","std::sys::unix::args::Args","std::collections::vec_deque::Drain<'_, T, A>","std::io::IoSliceMut<'a>","std::sync::MutexGuard<'_, T>","std::cell::RefCell<T>","std::slice::Iter<'_, T>","std::sync::mpsc::Receiver<T>"]},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","toodee::TooDee"]},"view::TooDeeView":{"T":["u64","char","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","usize","i8","i32","bool","u16","u8","u32","i16","i64"]},"view::TooDeeViewMut":{"T":["<*mut T as std::fmt::Debug>","toodee::TooDee"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flattenexact::FlattenExact<I>
+p0.num_cols();
+<flattenexact::FlattenExact<I> as iter::TooDeeIterator>::num_cols(p0);
+crate::<flattenexact::FlattenExact<I> as iter::TooDeeIterator>::num_cols(p0);
+<flattenexact::FlattenExact<I>>::num_cols(p0);
-----------------
src/copy.rs <toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_slice
deps:{"<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_slice":{"T":["std::marker::Copy","std::marker::Sized"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"view::TooDeeView":{"T":["std::cmp::PartialEq","std::marker::Copy","std::fmt::Debug","std::clone::Clone","std::hash::Hash","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_slice":{"T":["view::TooDeeView","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","std::marker::copy_impls::<impl std::marker::Copy for *const T>"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"view::TooDeeView":{"T":["i16","u64","bool","u32","i32","u16","i8","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","usize","i64","char","u8"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [T]
+p0.copy_from_slice(p1);
+<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_slice(p0, p1);
+crate::<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_slice(p0, p1);
+<toodee::TooDee<T>>::copy_from_slice(p0, p1);
-----------------
src/copy.rs <toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_slice
deps:{"<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_slice":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::TooDee":{"T":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::hash::Hash","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::marker::Copy","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::hash::Hash","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_slice":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","toodee::TooDee","std::clone::impls::<impl std::clone::Clone for *const T>","view::TooDeeView"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["u16","i64","u32","std::clone::impls::<impl std::clone::Clone for *const T>","i16","u64","char","usize","bool","u8","i32","i8"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [T]
+p0.clone_from_slice(p1);
+<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_slice(p0, p1);
+crate::<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_slice(p0, p1);
+<toodee::TooDee<T>>::clone_from_slice(p0, p1);
-----------------
src/copy.rs <toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_toodee
deps:{"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_toodee":{"T":["std::marker::Copy","std::marker::Sized"],"impl TooDeeOps<T>":["std::marker::Sized","ops::TooDeeOps"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::hash::Hash","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::hash::Hash","std::marker::Copy","std::marker::Sized","std::cmp::PartialEq"]},"view::TooDeeViewMut":{"T":["std::hash::Hash","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_toodee":{"T":["view::TooDeeView","std::marker::copy_impls::<impl std::marker::Copy for *const T>","std::marker::copy_impls::<impl std::marker::Copy for &T>"],"impl TooDeeOps<T>":["view::TooDeeView","view::TooDeeViewMut","toodee::TooDee"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"toodee::TooDee":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","toodee::TooDee"]},"view::TooDeeView":{"T":["char","i8","u32","u16","i16","i64","bool","u64","u8","usize","<*mut T as std::fmt::Debug>","i32"]},"view::TooDeeViewMut":{"T":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","toodee::TooDee"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // impl TooDeeOps<T>
+p0.copy_from_toodee(p1);
+<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_toodee(p0, p1);
+crate::<toodee::TooDee<T> as copy::CopyOps<T>>::copy_from_toodee(p0, p1);
+<toodee::TooDee<T>>::copy_from_toodee(p0, p1);
-----------------
src/copy.rs <toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_toodee
deps:{"<*const T as std::fmt::Debug>":{},"<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_toodee":{"T":["std::marker::Sized","std::clone::Clone"],"impl TooDeeOps<T>":["std::marker::Sized","ops::TooDeeOps"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["std::fmt::Debug","std::hash::Hash","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"view::TooDeeView":{"T":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Copy","std::clone::Clone","std::hash::Hash","std::marker::Sized"]},"view::TooDeeViewMut":{"T":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::hash::Hash","std::fmt::Debug"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_toodee":{"T":["view::TooDeeView","std::clone::impls::<impl std::clone::Clone for &T>","toodee::TooDee"],"impl TooDeeOps<T>":["toodee::TooDee","view::TooDeeView","view::TooDeeViewMut"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{},"toodee::TooDee":{"T":["<*const T as std::fmt::Debug>","toodee::TooDee"]},"view::TooDeeView":{"T":["i8","i16","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","char","bool","u16","u64","i32","usize","u32","u8","i64"]},"view::TooDeeViewMut":{"T":["toodee::TooDee","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // toodee::TooDee<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // impl TooDeeOps<T>
+p0.clone_from_toodee(p1);
+<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_toodee(p0, p1);
+crate::<toodee::TooDee<T> as copy::CopyOps<T>>::clone_from_toodee(p0, p1);
+<toodee::TooDee<T>>::clone_from_toodee(p0, p1);